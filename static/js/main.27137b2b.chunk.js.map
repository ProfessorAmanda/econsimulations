{"version":3,"sources":["lib/constants.js","lib/types.js","components/SimBarOption.js","components/SimBar.js","components/StartHere.js","components/Collapsable.js","components/ScatterPlot.js","components/DotPlot.js","components/DataTable.js","components/ChartContainer.js","components/SampleSizeInput.js","lib/stats-utils.js","components/SimulateSamples.js","components/LawOfLargeNumbers/LawOfLargeNumbers.js","components/SimulationIntro.js","components/SelectorButtonGroup.js","components/LawOfLargeNumbers/LawOfLargeNumbersContainer.js","components/CentralLimitTheorem/SampleMeanChart.js","components/CentralLimitTheorem/SampleMeansSimulator.js","components/CentralLimitTheorem/CentralLimitTheorem.js","components/CentralLimitTheorem/CentralLimitTheoremContainer.js","components/JointDistributions/MeanSDInput.js","components/JointDistributions/JointChart.js","components/JointDistributions/JDCharts.js","components/InputSlider.js","components/JointDistributions/JointDistributions.js","components/JointDistributions/JointDistributionsContainer.js","components/LeastSquares/NewPointsInput.js","components/LeastSquares/LeastSquaresChart.js","components/LeastSquares/PlotLine.js","components/LeastSquares/LeastSquares.js","components/LeastSquares/LeastSquaresContainer.js","components/OmittedVariableBias/CoefficientInput.js","components/OmittedVariableBias/OmittedVariableChart.js","components/OmittedVariableBias/OmittedVariableBias.js","components/OmittedVariableBias/OmittedVariableBiasContainer.js","components/ConfidenceIntervals/ConfidenceInputs.js","components/ConfidenceIntervals/ConfidenceIntervalsChart.js","components/ConfidenceIntervals/ManySamplesInput.js","components/ConfidenceIntervals/PopulationChart.js","components/ConfidenceIntervals/ConfidenceIntervals.js","components/ConfidenceIntervals/ConfidenceIntervalsContainer.js","components/HypothesisTesting/Conclusion.js","components/HypothesisTesting/PopulationChartReveal.js","components/HypothesisTesting/ResultsDisplay.js","components/HypothesisTesting/SampleSizeAlphaInput.js","components/HypothesisTesting/NormalCurve.js","components/HypothesisTesting/ManySamplesInput.js","components/HypothesisTesting/StdNormalCurve.js","components/HypothesisTesting/SimulateTypeOneError.js","components/HypothesisTesting/PerformTest.js","components/HypothesisTesting/TestInputs.js","components/HypothesisTesting/HypothesisSelector.js","components/HypothesisTesting/HypothesisTesting.js","components/HypothesisTesting/HypothesisTestingContainer.js","components/SampleDistributionOLSEstimators/PopulationAndSampleCharts.js","components/SampleDistributionOLSEstimators/StandardNormalOLS.js","components/SampleDistributionOLSEstimators/SlopeDistributionPlot.js","components/SampleDistributionOLSEstimators/InterceptDistributionPlot.js","components/SampleDistributionOLSEstimators/MultipleSamplesInput.js","lib/data-utils.js","components/SampleDistributionOLSEstimators/SampleDistributionOLSEstimators.js","components/JobCorpsDataModal.js","components/SampleDistributionOLSEstimators/SampleDistributionOLSEstimatorsContainer.js","components/MultipleRegression/Scatter3D.js","components/MultipleRegression/MultipleRegression.js","components/MultipleRegression/MultipleRegressionContainer.js","components/OLSEstimatorsAreConsistent/PopulationPlot.js","components/OLSEstimatorsAreConsistent/SampleInput.js","components/OLSEstimatorsAreConsistent/SamplePlot.js","components/OLSEstimatorsAreConsistent/OLSEstimatorsAreConsistent.js","components/OLSEstimatorsAreConsistent/OLSEstimatorsAreConsistentContainer.js","components/ANOVA/FTest.js","components/ANOVA/PopulationRow.js","components/LabeledSelector.js","components/ANOVA/PopulationMeanInput.js","components/LabeledInput.js","components/ANOVA/PopulationSampleSizeInput.js","components/ANOVA/PopulationSettings.js","components/ANOVA/DistributionOfFStatistic.js","components/ANOVA/SimulationPopulationsDisplay.js","components/ANOVA/SimulationPopulationSettings.js","components/ANOVA/SimulationSampleSettings.js","components/ANOVA/SimulateType1Error.js","components/ANOVA/ANOVA.js","components/ANOVA/ANOVAContainer.js","components/SimulationContainer.js","components/SimulationMenu.js","App.js","registerServiceWorker.js","index.js"],"names":["VALUES","Normal","xmaxval","xminval","ymaxval","title","xLabel","tableCol","Uniform","Exponential","Mystery","VALUES_ALT","OLSE_VALUES","Continuous","xMin","xMax","yMin","yMax","yLabel","xCategories","slopeMin","slopeMax","interceptMin","interceptMax","yTickInterval","Binary","MULTIPLE_REGRESSION_VALUES","xAbbr","xRange","yAbbr","yRange","buttonLabel","zLabel","zAbbr","zRange","path","citation","href","target","rel","xtickvals","xticktext","ytickvals","yticktext","TEXTS","TEXTS_ALT","HYPOTHESIS_OPTIONS","oneSample","type","hypoText","nullH","math","alterH","sides","twoSample","OLS_ASSUMPTIONS_OPTIONS","OLS_ASSUMPTIONS_TEXTS","MODULES","name","description","distributionType","PropTypes","oneOf","dataObjectArrayType","arrayOf","shape","x","number","y","id","stringOrNumberType","size","mean","string","isRequired","data","color","enableMouseTracking","bool","showInLegend","visible","label","oneOfType","object","marker","animation","lowerConf","upperConf","confidenceLevel","distribution","reject","slope","intercept","element","sampleSize","sample","_","keys","SimBarOption","section","setSection","Card","border","className","data-testid","onClick","Header","Body","Text","SimBar","sections","map","Col","Row","xs","sm","md","lg","StartHere","start","showApp","Fade","in","Button","variant","Collapsable","children","style","margin","width","textAlign","backgroundColor","marginBottom","isOpened","springConfig","presets","gentle","height","padding","ScatterPlot","series","zoom","allowDecimalsY","tooltipFormat","useState","chart","setChart","useEffect","newChart","zoomType","legend","symbolHeight","symbolWidth","symbolRadius","xAxis","min","max","enabled","text","startOnTick","endOnTick","categories","yAxis","tickInterval","allowDecimals","seriesObject","length","turboThreshold","tooltip","pointFormat","highcharts","Highcharts","options","DotPlot","DataTable","headers","setSelected","setRowColor","determineRowColor","dataTable","row","values","isNaN","toUpperCase","round","reverse","Table","hover","striped","cursor","ChartContainer","popArray","popMean","sampled","sampleMean","popShape","undefined","format","Container","fluid","Alert","span","order","obj","includes","SampleSizeInput","maxSize","minSize","handleClick","setSampleSize","InputGroup","Form","Control","align","placeholder","value","onChange","event","disabled","getCounts","counts","entries","countBy","forEach","amt","count","i","push","generateNormal","standardDev","precision","PD","rnorm","num","generateUniform","low","hi","runif","generateExponential","lambda","rexp","generateChiSquared","degreesOfFreedom","rchisq","generateMystery","mysteryMean1","mysteryMean2","mysterySD1","mysterySD2","normal1","normal2","dataFromDistribution","distType","getDistributionFunction","population","shuffle","index","populationMean","attr","p","populationStandardDev","std","calculateOneSampleTestStatistic","mu0","jStat","zscore","sqrt","tscore","calculateTwoSampleTestStatistic","sampleMean1","sampleMean2","standardDev1","standardDev2","sampleSize1","sampleSize2","calculatePValue","testStat","equality","pval","ztest","ttest","convertToStandardNormal","array","popSD","linearRegression","parsedData","every","elem","isArray","isObject","Error","regression","linear","equation","SimulateSamples","mathTitle","sampleSeriesName","popValSeriesName","sampleFn","yFn","setSampled","meanLine","setMeanLine","setStart","plotOptions","states","timer","useRef","clearInterval","current","toggleSim","n","setInterval","iteration","newSamples","currSampled","currMeanLine","startSim","body","LawOfLargeNumbers","stage","setStage","setPopArray","newPop","classname","popValue","toFixed","SimulationIntro","Heading","SelectorButtonGroup","select","selected","buttons","option","ButtonGroup","LawOfLargeNumbersContainer","setPopType","SampleMeanChart","sampleMeans","sd","normalized","setNormalized","newSampleMeans","sampleMeansPoints","onlyValues","onlyCounts","Check","checked","inline","SampleMeansSimulator","addSamples","numberResamples","setNumberResamples","resampleSize","setResampleSize","resample","samplePop","runSim","CentralLimitTheorem","mainSampleSize","setSampleMeans","newMeans","means","CentralLimitTheoremContainer","MeanSDInput","setMean","setSD","step","aria-label","JointChart","jointData","sharedOptions","nodeId","position","float","marginLeft","colors","node","yScale","yFormat","e","formattedX","formattedY","axisBottom","tickSize","legendPosition","legendOffset","axisLeft","JDCharts","parentData","childData","setNodeId","handleMouseMove","useCallback","handleMouseLeave","animate","top","right","bottom","left","xScale","blendMode","xFormat","nodeSize","useMemo","enableGridX","enableGridY","onMouseMove","onMouseLeave","marginRight","InputSlider","custom","JointDistributions","parentMean","setParentMean","childMean","setChildMean","parentSD","setParentSD","childSD","setChildSD","correlation","setCorrelation","parent","child","joint","allData","setAllData","xl","covariance","abs","covMatrix","MultivariateNormal","jointSeries","parentHeight","childHeight","parentCounts","parentSeries","childCounts","childSeries","generate","JointDistributionsContainer","NewPointsInput","generatePoints","numPoints","setNumPoints","LeastSquaresChart","points","addPoint","linePoints","setSquareAreas","enableClick","setEnableClick","headerFormat","myChart","setMyChart","pairs","p1","p2","areas","buildSquare","dist","lowestPt","squares","dashStyle","fill","plotBorderColor","plotBorderWidth","events","click","caption","fontSize","verticalAlign","radius","fillColor","annotations","draggable","shapes","PlotLine","squareAreas","generateBestLine","reduce","a","b","LeastSquares","setPoints","setLinePoints","setSlope","setIntercept","point","linearPts","sort","offset","paddingTop","newPoints","random","newSlope","newIntercept","LeastSquaresContainer","CoefficientInput","beta","setBeta","delta","setDelta","OmittedVariableChart","dataPoints","naiveLine","correctedLine","zoomtype","OmittedVariableBias","setSeries","showCorrect","setShowCorrect","OBS","epsilon","ones","colOne","colTwo","scores","scorePoint","studyScores","X","transpose","matrix","Y","inverse","inv","multiply","bHat","int","range","parseFloat","get","covarianceMatrix","stdX","stdY","seriesArr","generateSeries","active","OmittedVariableBiasContainer","ConfidenceInputs","setDistType","confLevel","setConfLevel","pct","slice","ConfidenceIntervalsChart","samples","containsMean","doesntContainMean","sampleObject","high","outside","borderColor","inverted","selection","this","duration","reversed","tickPixelInterval","tickWidth","lineWidth","centerInCategory","allowPointSelect","inactive","symbol","zIndex","toString","ManySamplesInput","populationSize","PopulationChart","ConfidenceIntervals","setSamples","unselect","charts","generateSamples","replications","sampleObjects","ciFunction","normalci","tci","indexedSamples","filter","ConfidenceIntervalsContainer","Conclusion","result","relation","firstMean","secondMean","testType","PopulationChartReveal","popArr","popArr2","popMean2","popArrMax","popArr2Max","maxHeight","lineColor","ResultsDisplay","mean2","testStatistic","pValue","alpha","toPrecision","SampleSizeAlphaInputs","setAlpha","popSize","setSampleSize2","showSecondInput","NormalCurve","popStandardDev","setPopulation","easing","meanCounts","rejects","accepts","defaultTo","meanObject","baseSeries","StdNormalCurve","SimulateTypeOneError","sd1","sd2","population2","setPopulation2","standardized","setStandardized","dotPlotSeries","marginTop","clear","sample2","PerformTest","setPopArr","setSample","originalPop","setOriginalPop","originalPopSample","setOriginalPopSample","originalPopSampleSize","setOriginalPopSampleSize","popMean1","sampleSD","populationSD","originalSampleMean","originalSampleSD","originalPopSD","twoSampleSD1","twoSampleSD2","TestInputs","setTestType","paddingBottom","require","HypothesisSelector","setHypothesis","setMu0","menuOptions","Dropdown","Item","DropdownButton","HypothesisTesting","setPopShape","hypothesis","HypothesisTestingContainer","PopulationAndSampleCharts","selectSample","regressorType","mainSeries","sampleSeries","StandardNormalOLS","seriesName","SlopeDistributionPlot","slopeMean","slopeSD","standardizedData","plotData","InterceptDistributionPlot","interceptMean","interceptSD","MultipleSamplesInput","fetchCSV","callback","Papa","parse","download","skipEmptyLines","complete","results","SampleDistributionOLSEstimators","setData","meanX","meanY","corr","clamp","generateScatter","process","category","uniq","JobCorpsDataModal","showButton","showDataInfo","setShowDataInfo","Modal","show","onHide","Title","Footer","SampleDistributionOLSEstimatorsContainer","setRegressorType","Scatter3D","z","dataSet","display","setDisplay","showBestFit","setShowBestFit","mode","line","hovertemplate","A","zip","theta","column","bestFitPlane","floor","ceil","yi","temp","xi","showscale","opacity","hoverinfo","colorscale","displayPointsMap","unzip","lineX","lineY","layout","yanchor","l","r","t","showlegend","xaxis","tickvals","ticktext","yaxis","scene","zaxis","camera","eye","config","scrollZoom","displayModeBar","modeBarButtonsToRemove","paddingLeft","axes","MultipleRegression","setDataSet","val","MultipleRegressionContainer","PopulationPlot","assumption","showViolation","setShowViolation","sampleData","altered","originalX","originalY","SampleInput","addSample","showMessage","SamplePlot","originalIntercept","originalSlope","OLSEstimatorsAreConsistent","setShowMessage","samplingFunction","medianValue","median","belowMedian","belowMedianSample","belowMedianResample","sampleJobCorps","randomIndices","alteredJobCorps","idx","remainingSample","some","sampleControlAboveMedian","protocolBreakers","randomNormal","dev","getBestFitSlope","getBestFitIntercept","violationSlope","violationIntercept","OLSEstimatorsAreConsistentContainer","setAssumption","assumptionAsString","invert","FTest","populations","overallSampleMean","flatten","SSTR","sum","MSTR","SSE","MSE","F","anovaftest","borderless","PopulationRow","popSeries","LabeledSelector","setValue","Group","as","Label","PopulationMeanInput","LabeledInput","PopulationSampleSizeInput","PopulationSettings","setPopulations","stdDev","setStdDev","setPopulationAttr","newPopulations","pop","numPops","newPops","randomInt","resetPopulations","DistributionOfFStatistic","numSamples","setNumSamples","setAccepts","setRejects","fStats","fCounts","newRejects","newAccepts","fObject","runSimulation","SimulationPopulationsDisplay","SimulationPopulationSettings","setNumPops","generatePopulations","SimulationSampleSettings","SimulateType1Error","showSim","setShowSim","ANOVA","showResults","setShowResults","ANOVAContainer","SimulationContainer","setMode","SimulationMenu","logo","setLogo","setTimeout","clearTimeout","teachingMaterialsLink","App","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27137b2b.chunk.js","sourcesContent":["import { InlineMath } from 'react-katex';\n\nexport const SAMPLE_SIZE = 2000;\n\nexport const VALUES = {\n  Normal: { xmaxval: 75, xminval: 50, ymaxval: 40, title: 'Milk Production', xLabel: 'Gallons', tableCol: 'Cow' },\n  Uniform: { xmaxval: 10, xminval: -10, ymaxval: 25, title: 'Lottery Outcome', xLabel: 'Dollars', tableCol: 'Person' },\n  Exponential: { xmaxval: 500, xminval: 0, ymaxval: 10, title: 'Duration of Telemarketer Call', xLabel: 'Duration (s)', tableCol: 'Call' },\n  'Chi-Squared': { xmaxval: 30, xminval: 0, ymaxval: 40, title: 'Money Spent on Lunch', xLabel: 'Dollars', tableCol: 'Worker' },\n  Mystery: { xmaxval: 80, xminval: 50, ymaxval: 60, title: 'Alien Female Height', xLabel: 'Height (in)', tableCol: 'Alien' }\n}\n\nexport const VALUES_ALT = {\n  Normal: { xmaxval: 75, xminval: 50, title: 'Milk Production', xLabel: 'Gallons' },\n  Uniform: { xmaxval: 75, xminval: 55, title: 'Alien Female Height', xLabel: 'Height (in)' },\n  Exponential: { xmaxval: 500, xminval: 0, title: 'Duration of Telemarketer Call', xLabel: 'Duration (seconds)' },\n  'Chi-Squared': { xmaxval: 30, xminval: 0, title: 'Money Spent on Lunch', xLabel: 'Dollars' }\n}\n\nexport const OLSE_VALUES = {\n  Continuous: { xMin: 0, xMax: 15, yMin: 20, yMax: 100, xLabel: 'Study Hours', yLabel: 'Test Score', xCategories: null, slopeMin: -5, slopeMax: 5, interceptMin: 20, interceptMax: 100, yTickInterval: 20 },\n  Binary: { xMin: 0, xMax: 1, yMin: 50, yMax: 350, yLabel: 'Weekly Earnings', xCategories: ['Control Group', 'Job Corps'], title: 'Sample', slopeMin: -10, slopeMax: 30, interceptMin: 175, interceptMax: 225, yTickInterval: 50 }\n}\n\nexport const MULTIPLE_REGRESSION_VALUES = {\n  'California Schools Data': {\n    'XY': { xLabel: 'Student-Teacher Ratio', xAbbr: 'StudentTeacherRatio', xRange: [10, 30], yLabel: 'Percent English Learners', yAbbr: 'PercentEngLearners' , yRange: [0, 100], buttonLabel: <p>Percent English Learners<br/>vs<br/>Student-Teacher Ratio</p> },\n    'XZ': { xLabel: 'Student-Teacher Ratio', xAbbr: 'StudentTeacherRatio', xRange: [10, 30], yLabel: 'Test Scores', yAbbr: 'TestScores', yRange: [600, 720], buttonLabel: <p>Test Scores<br/>vs<br/>Student-Teacher Ratio</p> },\n    'YZ': { xLabel: 'Percent English Learners', xAbbr: 'PercentEngLearners', xRange: [0, 100], yLabel: 'Test Scores', yAbbr: 'TestScores', yRange: [600, 720], buttonLabel: <p>Test Scores<br/>vs<br/>Percent English Learners</p> },\n    '3D': { xLabel: 'Student-Teacher Ratio', xAbbr: 'StudentTeacherRatio', xRange: [10, 30], yLabel: 'Percent English Learners', yAbbr: 'PercentEngLearners' , yRange: [0, 100], zLabel: 'Test Scores', zAbbr: 'TestScores', zRange: [600, 720], buttonLabel: <p>Test Scores<br/>vs<br/>Percent English Learners<br/>vs<br/>Student-Teacher Ratio</p> },\n    path: 'california_schools_data.csv',\n    citation: <>This data is California Standardized Testing and Reporting data for 420 elementary school districts in California for 1999. This dataset is used throughout Stock and Watson, Introduction to Econometrics and was originally obtained from the California Department of Education (<a href=\"https://www.cde.ca.gov/\" target=\"_blank\" rel=\"noopener noreferrer\">www.cde.ca.gov</a>).</>\n  },\n  'CPS Earnings Data': {\n    'XY': { xLabel: '', xAbbr: 'College', yLabel: '', yAbbr: 'Female', buttonLabel: <p>Gender (Female)<br/>vs<br/>College</p>, xtickvals: [0, 1], xticktext: ['No College', 'College'], ytickvals: [0, 1], yticktext: ['Male', 'Female'] },\n    'XZ': { xLabel: '', xAbbr: 'College', yLabel: 'Weekly Earnings', yAbbr: 'Earnings', buttonLabel: <p>Earnings<br/>vs<br/>College</p>, xtickvals: [0, 1], xticktext: ['No College', 'College'] },\n    'YZ': { xLabel: '', xAbbr: 'Female', yLabel: 'Weekly Earnings', yAbbr: 'Earnings', buttonLabel: <p>Earnings<br/>vs<br/>Gender (Female)</p>, xtickvals: [0, 1], xticktext: ['Male', 'Female'] },\n    '3D': { xLabel: '', xAbbr: 'College', xRange: [-0.5, 1.5], yLabel: '', yAbbr: 'Female', yRange: [-0.5, 1.5], zLabel: 'Weekly Earnings', zAbbr: 'Earnings', buttonLabel: <p>Earnings<br/>vs<br/>Gender (Female)<br/>vs<br/>College</p>, xtickvals: [0, 1], xticktext: ['No College', 'College'], ytickvals: [0, 1], yticktext: ['Male', 'Female'] },\n    path: 'CPS_earnings_data.csv',\n    citation: <>The data is a random sample from the CPS Outgoing Rotation group earner study in March 2019.<br/><cite>(Sarah Flood, Miriam King, Renae Rodgers, Steven Ruggles and J. Robert Warren. Integrated Public Use Microdata Series, Current Population Survey: Version 8.0 [dataset]. Minneapolis, MN: IPUMS, 2020. <a href=\"https://doi.org/10.18128/D030.V8.0\" target=\"_blank\" rel=\"noopener noreferrer\">https://doi.org/10.18128/D030.V8.0</a>)</cite></>\n  },\n  'CPS Log Earnings Data': {\n    'XY': { yLabel: 'Years of Education', yAbbr: 'Years_of_Ed', xLabel: '', xAbbr: 'Female', buttonLabel: <p>Years of Education<br/>vs<br/>Gender (Female)</p>, xtickvals: [0, 1], xticktext: ['Male', 'Female'] },\n    'YZ': { xLabel: 'Years of Education', xAbbr: 'Years_of_Ed', yLabel: 'Log Weekly Earnings', yAbbr: 'ln(Earnings)', buttonLabel: <p>Log Earnings<br/>vs<br/>Years of Education</p> },\n    'XZ': { xLabel: '', xAbbr: 'Female', yLabel: 'Log Weekly Earnings', yAbbr: 'ln(Earnings)', buttonLabel: <p>Log Earnings<br/>vs<br/>Gender (Female)</p>, xtickvals: [0, 1], xticktext: ['Male', 'Female'] },\n    '3D': { yLabel: 'Years of Education', yAbbr: 'Years_of_Ed', xLabel: '', xAbbr: 'Female', xRange: [-0.5, 1.5], zLabel: 'Log Weekly Earnings', zAbbr: 'ln(Earnings)', buttonLabel: <p>Log Earnings<br/>vs<br/>Gender (Female)<br/>vs<br/>Years of Education</p>, xtickvals: [0, 1], xticktext: ['Male', 'Female'] },\n    path: 'CPS_log_earnings_data.csv',\n    citation: <>The data is a random sample from the CPS Outgoing Rotation group earner study in March 2019.<br/><cite>(Sarah Flood, Miriam King, Renae Rodgers, Steven Ruggles and J. Robert Warren. Integrated Public Use Microdata Series, Current Population Survey: Version 8.0 [dataset]. Minneapolis, MN: IPUMS, 2020. <a href=\"https://doi.org/10.18128/D030.V8.0\" target=\"_blank\" rel=\"noopener noreferrer\">https://doi.org/10.18128/D030.V8.0</a>)</cite></>\n  }\n}\n\nexport const TEXTS = {\n  Normal: ['monthly Milk Production', 'cows', 'produced', ' gallons a month.'],\n  // Uniform: [\"the wait time\", \"people at the DMV in VT\", \"reported a total time of\", \" minutes.\"],\n  Exponential: ['duration', 'Telemarketer Calls', 'reported a duration of', ' seconds on a call.'],\n  'Chi-Squared': ['expenditure', 'workers on lunch', 'reported an expenditure of', ' dollars on lunch.'],\n  Mystery: ['the height', 'Alien Females from planet Stata', 'reported a height of', ' inches.'],\n}\n\nexport const TEXTS_ALT = {\n  Normal: ['monthly Milk Production', 'cows'],\n  Uniform: ['the height', 'Alien Females from planet Stata'],\n  Exponential: ['duration', 'Telemarketer Calls'],\n  'Chi-Squared': ['expenditure', 'workers on lunch']\n}\n\nexport const HYPOTHESIS_OPTIONS = {\n  oneSample: [\n    {\n      type: '>',\n      hypoText: 'Option 1: These cows produce more than ',\n      nullH: <InlineMath math=\"H_0: \\mu \\leq \"/>,\n      alterH: <InlineMath math=\"H_a: \\mu \\gt \"/>,\n      sides: 1\n    },\n    {\n      type: '<',\n      hypoText: 'Option 2: These cows produce less than ',\n      nullH: <InlineMath math=\"H_0: \\mu \\geq \"/>,\n      alterH: <InlineMath math=\"H_a: \\mu \\lt \"/>,\n      sides: 1\n    },\n    {\n      type: '!=',\n      hypoText: 'Option 3: These cows produce an amount not equal to ',\n      nullH: <InlineMath math=\"H_0: \\mu = \"/>,\n      alterH: <InlineMath math=\"H_a: \\mu \\neq \"/>,\n      sides: 2\n    }\n  ],\n  twoSample: [\n    {\n      type: '<',\n      hypoText: 'Option 1: These cows produce more than they did before.',\n      nullH: <InlineMath math=\"H_0: \\mu_1 - \\mu_2 \\geq 0\"/>,\n      alterH: <InlineMath math=\"H_a: \\mu_1 - \\mu_2 \\lt 0\"/>,\n      sides: 1\n    },\n    {\n      type: '>',\n      hypoText: 'Option 2: These cows produce less than they did before',\n      nullH: <InlineMath math=\"H_0: \\mu_1 - \\mu_2 \\leq 0\"/>,\n      alterH: <InlineMath math=\"H_a: \\mu_1 - \\mu_2 \\gt 0\"/>,\n      sides: 1\n    },\n    {\n      type: '!=',\n      hypoText: 'Option 3: These cows produce a different amount now compared to before.',\n      nullH: <InlineMath math=\"H_0: \\mu_1 - \\mu_2 = 0\"/>,\n      alterH: <InlineMath math=\"H_a: \\mu_1 - \\mu_2 \\neq 0\"/>,\n      sides: 2\n    }\n  ]\n}\n\nexport const OLS_ASSUMPTIONS_OPTIONS = {\n  'OLS Assumptions Hold': 'OLS Assumptions Hold',\n  'Non-Random Sample': 'Non-Random Sample',\n  'Large Outliers': 'Large Outliers',\n  'E(u|x) != 0': <InlineMath key=\"E(u|x)\\neq 0\" math=\"E(u|x)\\neq 0\"/>\n};\n\nexport const OLS_ASSUMPTIONS_TEXTS = {\n  'OLS Assumptions Hold': '',\n  'Non-Random Sample': 'Researchers collect their sample by randomly calling people from the list of people in the study population. BUT, people who are not working are much more likely to answer the phone to respond to the survey. This means that the sample is not actually random and draws people from the bottom half of the earnings distribution (those working fewer hours or without steady jobs). Note that we need to sample with replacement for any sample size over 1000 (half of the population size).',\n  'Large Outliers': 'The technician hired to enter earnings from the sample respondents makes data entry errors when recording a batch of earnings data from the treatment group, accidently inflating the values.',\n  'E(u|x) != 0': 'Some people who were randomized into the control group are very ambitious and well-connected and find a way to get into the Job Corps program. This is an example of “failure to follow treatment protocol.” In this scenario, the regressor (X=indicator for being in Job Corps) in no longer uncorrelated with other characteristics (eg. motivation, connections) of the individual.'\n}\n\nexport const MODULES = [\n  {\n    name: 'Law of Large Numbers',\n    description: 'The Law of Large Numbers tells us that that the sample mean approaches the mean of the population as we increase the sample size. This simulation investigates the behavior of the sample mean as we change the sample size.',\n  },\n  {\n    name: 'Central Limit Theorem',\n    description: 'The Central Limit Theorem states that, for sufficiently large samples, the sample mean is approximately normally distributed, even if the underlying population is not normally distributed (or if we have no idea what the underlying population looks like). This simulation investigates how the distribution of the sample mean is affected by the sample size and the shape of the population distribution.',\n  },\n  {\n    name: 'Confidence Intervals',\n    description: 'A confidence interval provides a range of values for the likely location of the true population mean, based on information gathered from a sample.',\n  },\n  {\n    name: 'Hypothesis Testing',\n    description: 'Hypothesis testing is a procedure that allows us to form conclusions based on information derived from a sample.',\n  },\n  {\n    name: 'ANOVA',\n    description: 'The module presents a simple version of ANOVA (Analysis of Variance), in which we test the null hypothesis that the means of two or more populations are equal.',\n  },\n  {\n    name: 'Joint Distributions',\n    description: 'A joint probability distribution describes the simultaneous behavior of two random variables.',\n  },\n  {\n    name: 'Least Squares',\n    description: 'Ordinary least squares regression estimates the slope(s) and intercept of a line to best fit data for two (or more) variables by minimizing the sum of the squared distances from the data points to the line.',\n  },\n  {\n    name: 'Sample Distribution of OLS Estimators',\n    description: <>The sampling distributions of the OLS estimators <InlineMath math=\"\\hat{\\beta}_0\"/> and <InlineMath math=\"\\hat{\\beta}_1\"/> are approximately normal.</>\n  },\n  {\n    name: 'The OLS Estimators are Consistent',\n    description: <> If the least squares assumptions hold, the OLS estimators, <InlineMath math=\"\\hat{\\beta}_0\"/> and <InlineMath math=\"\\hat{\\beta}_1\"/>, converge to the population intercept and slope when the sample is large.</>\n  },\n  {\n    name: 'Omitted Variable Bias',\n    description: 'Omitted variable bias (OVB) arises when a variable that is i) correlated with the outcome and ii) correlated with one of the included regressors is omitted from the regression model.',\n  },\n  {\n    name: 'Multiple Regression',\n    description: <>OLS regression with multiple regressors (<InlineMath math=\"k\"/>) estimates the <InlineMath math=\"k+1\"/> dimensional plane that best fits the data.</>\n  }\n];\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { OLS_ASSUMPTIONS_OPTIONS } from './constants';\n\nexport const popShapeType = PropTypes.oneOf([\n  'Normal',\n  'Uniform',\n  'Exponential',\n  'Chi-Squared',\n  'Mystery'\n]);\n\nexport const distributionType = PropTypes.oneOf(['Z', 'T']);\n\nexport const dataObjectArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n    id: PropTypes.number\n  })\n);\n\nexport const sampleMeanArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    size: PropTypes.number,\n    mean: PropTypes.number,\n    id: PropTypes.number\n  })\n);\n\nexport const highchartsSeriesType = PropTypes.arrayOf(\n  PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    data: dataObjectArrayType.isRequired,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    enableMouseTracking: PropTypes.bool,\n    showInLegend: PropTypes.bool,\n    visible: PropTypes.bool,\n    label: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    marker: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n  })\n);\n\nexport const confidenceIntervalsSampleType = PropTypes.shape({\n  data: dataObjectArrayType.isRequired,\n  size: PropTypes.number.isRequired,\n  mean: PropTypes.number.isRequired,\n  lowerConf: PropTypes.number.isRequired,\n  upperConf: PropTypes.number.isRequired,\n  confidenceLevel: PropTypes.number.isRequired,\n  distribution: distributionType.isRequired,\n  label: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired\n});\n\nexport const stringOrNumberType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n\nexport const hypothesisTestingSampleArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    mean: PropTypes.number.isRequired,\n    reject: PropTypes.bool.isRequired\n  })\n);\n\nexport const testTypeType = PropTypes.oneOf(['oneSample', 'twoSample']);\n\nexport const olsSampleType = PropTypes.shape({\n  data: dataObjectArrayType.isRequired,\n  slope: PropTypes.number.isRequired,\n  intercept: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired\n});\n\nexport const hypothesisEqualityType = PropTypes.oneOf(['<', '>', '!=']);\n\nexport const optionalLaTeXType = PropTypes.oneOfType([PropTypes.element, PropTypes.string]);\n\nexport const anovaPopulationObjectType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  mean: PropTypes.number,\n  sampleSize: stringOrNumberType.isRequired,\n  data: dataObjectArrayType.isRequired,\n  sample: dataObjectArrayType\n});\n\nexport const olsAssumptionType = PropTypes.oneOf(_.keys(OLS_ASSUMPTIONS_OPTIONS))\n","import { Card } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { optionalLaTeXType } from '../lib/types';\n\nexport default function SimBarOption({ section, setSection }) {\n  return (\n    <Card border=\"primary\" className=\"menu-item\" data-testid={`module-${section.name}`} onClick={() => setSection(section.name)}>\n      <Card.Header className=\"menu-item-title\">{section.name}</Card.Header>\n      <Card.Body>\n        <Card.Text className=\"menu-item-text\">{section.description}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nSimBarOption.propTypes = {\n  setSection: PropTypes.func.isRequired,\n  section: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    description: optionalLaTeXType.isRequired\n  }).isRequired,\n}\n","import SimBarOption from './SimBarOption';\nimport PropTypes from 'prop-types'\nimport { MODULES } from '../lib/constants';\nimport { Col, Row } from 'react-bootstrap';\n\nexport default function SimBar({ setSection }) {\n  const sections = MODULES.map((section) => (\n    <Col key={section.name}>\n      <SimBarOption section={section} setSection={setSection}/>\n    </Col>\n  ));\n\n  return (\n    <div className=\"menu\" data-testid=\"menu\">\n      <div className=\"mini-logo\"/>\n      <br/>\n      <Row xs={1} sm={2} md={3} lg={4} className=\"g-4\">{sections}</Row>\n    </div>\n  );\n}\n\nSimBar.propTypes = {\n  setSection: PropTypes.func.isRequired,\n}\n","import { Button, Fade } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function StartHere({ start, showApp }) {\n  return (\n    <Fade in={start}>\n      <div className=\"jumbotron\">\n        <p className=\"lead\">\n          This website is an interactive educational application developed to simulate and visualize various statistical concepts.\n        </p>\n        <p>\n          Project of Professor Tanya Byker and Professor Amanda Gregg at Middlebury College, with research assistants Kevin Serrao, Class of 2018, Dylan Mortimer, Class of 2019, Ammar Almahdy, Class of 2020, Jacqueline Palacios, Class of 2020, Siyuan Niu, Class of 2021, David Gikoshvili, Class of 2021, and Ethan Saxenian, Class of 2022\n        </p>\n        <Button variant=\"outline-danger\" onClick={() => showApp()}>Start!</Button>\n      </div>\n    </Fade>\n  );\n}\n\nStartHere.propTypes = {\n  start: PropTypes.bool.isRequired,\n  showApp: PropTypes.func.isRequired,\n}\n","import Collapse from 'react-collapse';\nimport { presets } from 'react-motion';\nimport '../styles/MarzEg.css';\nimport PropTypes from 'prop-types';\n\nexport default function Collapsable({ children }) {\n  return (\n    <div>\n      <Collapse\n        style={{\n          margin: 'auto',\n          width: '100%',\n          textAlign: 'center',\n          backgroundColor: 'rgba(255,255,255,0.4)',\n          marginBottom: '1em'\n        }}\n        isOpened\n        springConfig={{ ...presets.gentle }}\n      >\n        <div style={{ height: '100%', padding: '2em' }}>\n          <div style={{ padding: '2em' }}>\n            {children}\n          </div>\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n\nCollapsable.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport '../styles/dark-unica.css';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport PropTypes from 'prop-types';\nimport { highchartsSeriesType, stringOrNumberType } from '../lib/types';\n\nexport default function ScatterPlot({\n  series,\n  title,\n  xMin,\n  xMax,\n  yMin,\n  yMax,\n  xLabel,\n  yLabel,\n  animation,\n  zoom,\n  height,\n  xCategories,\n  yTickInterval,\n  allowDecimalsY,\n  tooltipFormat,\n}) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        animation: !!animation,\n        height,\n        zoomType: zoom ? 'xy' : ''\n      },\n      legend: {\n        symbolHeight: 12,\n        symbolWidth: 12,\n        symbolRadius: 6\n      },\n      xAxis: {\n        min: xMin,\n        max: xMax,\n        title: {\n          enabled: true,\n          text: xLabel\n        },\n        startOnTick: true,\n        endOnTick: true,\n        categories: xCategories\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        min: yMin,\n        max: yMax,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: yLabel\n        },\n        tickInterval: yTickInterval,\n        allowDecimals: allowDecimalsY\n      },\n      series: series.map((seriesObject) => (\n        {\n          showInLegend: seriesObject.data.length > 0,\n          turboThreshold: 0,\n          tooltip: {\n            pointFormat: tooltipFormat || 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'\n          },\n          ...seriesObject,\n          data: seriesObject.data.map(({ x, y }) => ({ x, y })), // don't want any other attributes\n        })\n      )\n    }\n    setChart(newChart);\n  }, [\n    series,\n    title,\n    xMin,\n    xMax,\n    yMin,\n    yMax,\n    xLabel,\n    yLabel,\n    animation,\n    zoom,\n    height,\n    xCategories,\n    yTickInterval,\n    allowDecimalsY,\n    tooltipFormat\n  ]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nScatterPlot.propTypes = {\n  series: highchartsSeriesType.isRequired,\n  title: PropTypes.string,\n  xMin: PropTypes.number,\n  xMax: PropTypes.number,\n  yMin: PropTypes.number,\n  yMax: PropTypes.number,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n  animation: PropTypes.bool,\n  zoom: PropTypes.bool,\n  height: stringOrNumberType,\n  xCategories: PropTypes.arrayOf(PropTypes.string),\n  yTickInterval: PropTypes.number,\n  allowDecimalsY: PropTypes.bool,\n  tooltipFormat: PropTypes.string\n}\n","import PropTypes from 'prop-types';\nimport { highchartsSeriesType } from '../lib/types';\nimport ScatterPlot from './ScatterPlot';\n\nexport default function DotPlot({ series, title, xMin, xMax, yMax, xLabel, yLabel, animation, zoom }) {\n  return (\n    <ScatterPlot\n      series={series}\n      title={title}\n      xMin={xMin}\n      xMax={xMax}\n      yMin={0}\n      yMax={yMax}\n      xLabel={xLabel}\n      yLabel={yLabel || 'Count'}\n      animation={animation}\n      zoom={zoom}\n      allowDecimalsY={false}\n      tooltipFormat={`${xLabel}: <b>{point.x}</b><br />`}\n    />\n  )\n}\n\nDotPlot.propTypes = {\n  series: highchartsSeriesType.isRequired,\n  title: PropTypes.string,\n  xMin: PropTypes.number,\n  xMax: PropTypes.number,\n  yMax: PropTypes.number,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n  animation: PropTypes.bool,\n  zoom: PropTypes.bool\n}\n","import { Table } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport default function DataTable({ data, headers, height, setSelected, setRowColor }) {\n  const clickRow = (row) => {\n    if (setSelected) {\n      setSelected(row)\n    }\n  }\n\n  const determineRowColor = (object) => {\n    if (setRowColor) {\n      return setRowColor(object)\n    }\n    return undefined\n  }\n\n  const dataTable = data.map((object) => (\n    <tr\n      style={{ backgroundColor: determineRowColor(object) }}\n      key={object.id}\n      onClick={() => clickRow(object)}\n    >\n      {_.values(headers).map(\n        (name) => <td key={name}>{!isNaN(object[name]) ? _.round(object[name], 2) : object[name].toUpperCase()}</td>\n      )}\n    </tr>\n  ));\n\n  dataTable.reverse();\n\n  return (\n    <div className=\"data-table-container\" style={{height: `${height || 250}px`}}>\n      <Table hover={!!setSelected} striped className=\"data-table\" style={{cursor: setSelected ? 'pointer' : 'default'}}>\n        <thead>\n          <tr>\n            {_.keys(headers).map((name) => <th key={name}>{name}</th>)}\n          </tr>\n        </thead>\n        <tbody>\n          {dataTable}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nDataTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({id: PropTypes.number.isRequired})).isRequired,\n  headers: PropTypes.object.isRequired,\n  height: PropTypes.number,\n  setSelected: PropTypes.func,\n  setRowColor: PropTypes.func  // takes the current object as a parameter and returns a color or undefined\n}\n","import DotPlot from './DotPlot';\nimport { Alert, Container, Col, Row } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../lib/types';\nimport { TEXTS, VALUES } from '../lib/constants';\nimport DataTable from './DataTable';\n\nexport default function ChartContainer({ popArray, popMean, sampled, sampleMean, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES[popShape];\n\n  const series = [\n    {\n      name: 'Population Observations',\n      data: popArray\n    },\n    {\n      name: 'Sampled Observations',\n      data: sampled\n    },\n    {\n      type: 'line',\n      name: 'Sample Mean',\n      data: [{ x: sampleMean || 0, y: 0 }, { x: sampleMean || 0, y: ymaxval }],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: (sampleMean !== undefined) && (sampled.length > 0),\n      label: {\n        format: `<div>Sample Mean: ${sampleMean}</div>`\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Alert variant=\"secondary\">\n            {(popShape !== 'Uniform') ? (\n              <p>\n                We queried the {TEXTS[popShape][0]} of {popArray.length} {TEXTS[popShape][1]} and plotted the results on the following chart.\n              </p>\n            ) : (\n              <p>\n                Behavioral economists studying loss aversion design a lottery among 2000 participants where each amount between -10 and +10 is equally likely.  We plotted the winnings and losses below.\n              </p>\n            )}\n          </Alert>\n        </Row>\n        <Row>\n          <Col lg={{span: 2, order: 'first'}} xs={{span: 12, order: 'last'}} style={{width: 'fit-content', margin: 'auto'}}>\n            <DataTable\n              data={popArray}\n              headers={{\n                [VALUES[popShape].tableCol]: 'id',\n                [VALUES[popShape].xLabel]: 'x'\n              }}\n              height={350}\n              setRowColor={(object) => sampled.map((obj) => obj.id).includes(object.id) ? '#747EF2' : undefined}\n            />\n            <br/>\n          </Col>\n          <Col lg={{span: 9, order: 'last'}} xs={{span: 12, order: 'first'}}>\n            <DotPlot\n              series={series}\n              title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n              xMin={xminval}\n              xMax={xmaxval}\n              yMax={ymaxval}\n              xLabel={xLabel}\n              animation={false}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nChartContainer.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  sampled: dataObjectArrayType.isRequired,\n  sampleMean: PropTypes.number,\n  popShape: popShapeType.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types'\n\nexport default function SampleSizeInput({ maxSize, minSize, handleClick }) {\n  const [sampleSize, setSampleSize] = useState('');\n\n  useEffect(() => {\n    setSampleSize('')\n  }, [maxSize]);\n\n  return (\n    <InputGroup className=\"sample-size-input\">\n      <Form.Control\n        align=\"right\"\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        min={minSize}\n        value={sampleSize}\n        max={maxSize}\n        onChange={(event) => setSampleSize(event.target.value)}\n      />\n      <Button\n        variant=\"secondary\"\n        disabled={!sampleSize || sampleSize > maxSize || sampleSize < minSize} onClick={() => handleClick(+sampleSize, 1, false)}\n      >\n        Sample\n      </Button>\n    </InputGroup>\n  );\n}\n\nSampleSizeInput.propTypes = {\n  maxSize: PropTypes.number.isRequired,\n  minSize: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  classname: PropTypes.string\n}\n","import { mean, std, sqrt } from 'mathjs';\nimport PD from 'probability-distributions';\nimport _ from 'lodash';\nimport { jStat } from 'jstat';\nimport MultivariateNormal from 'multivariate-normal';\nimport regression from 'regression';\n\nexport const getCounts = (data) => {\n  const counts = [];\n  _.entries(_.countBy(data)).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      counts.push({ x: +amt, y: i })\n    }\n  });\n  return counts\n}\n\n// returns an array of values with a normal distribution\nexport const generateNormal = (sampleSize, mean, standardDev, precision = 5) => {\n  return PD.rnorm(sampleSize, mean, standardDev).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with a uniform distribution\nexport const generateUniform = (sampleSize, low, hi, precision = 5) => {\n  return PD.runif(sampleSize, low, hi).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with an exponential distribution\nexport const generateExponential = (sampleSize, lambda, precision = 5) => {\n  return PD.rexp(sampleSize, lambda).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with a chi-squared distribution\nexport const generateChiSquared = (sampleSize, degreesOfFreedom, precision = 5) => {\n  return PD.rchisq(sampleSize, degreesOfFreedom).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with a 'mystery' distribution (really points sampled randomly from two normal distributions)\nexport const generateMystery = (sampleSize, mysteryMean1, mysteryMean2, mysterySD1, mysterySD2, precision = 5) => {\n  const normal1 = PD.rnorm(sampleSize, mysteryMean1, mysterySD1).map((num) => _.round(num, precision));\n  const normal2 = PD.rnorm(sampleSize, mysteryMean2, mysterySD2).map((num) => _.round(num, precision));\n  return _.sampleSize([...normal1, ...normal2], 2000);\n}\n\n// returns the data set from the function corresponding with distType\n// objects in array are of shape {x, y, id}\nexport const dataFromDistribution = (\n  distType,\n  sampleSize,\n  {\n    mean = 64,\n    standardDev = 3,\n    low = -10,\n    hi = 10,\n    lambda = 1 / 64,\n    degreesOfFreedom = 8,\n    mysteryMean1 = 58,\n    mysteryMean2 = 70,\n    mysterySD1 = 1,\n    mysterySD2 = 3,\n    precision = 1\n  } = {}\n) => {\n  const getDistributionFunction = {\n    Normal: () => generateNormal(sampleSize, mean, standardDev, precision),\n    Uniform: () => generateUniform(sampleSize, low, hi, precision),\n    Exponential: () => generateExponential(sampleSize, lambda, precision),\n    'Chi-Squared': () => generateChiSquared(sampleSize, degreesOfFreedom, precision),\n    Mystery: () => generateMystery(sampleSize, mysteryMean1, mysteryMean2, mysterySD1, mysterySD2, precision)\n  }\n\n  const population = getDistributionFunction[distType]();\n\n  return _.shuffle(getCounts(population)).map((obj, index) => ({ ...obj, id: index }));\n}\n\n// returns the mean of popArray\nexport const populationMean = (popArray, attr = 'x') => {\n  return (popArray.length > 0) ? mean(popArray.map((p) => p[attr])) : undefined\n}\n\n// returns the std of popArray\nexport const populationStandardDev = (popArray, attr = 'x') => {\n  return (popArray.length > 0) ? std(popArray.map((p) => p[attr])) : undefined\n}\n\nexport const calculateOneSampleTestStatistic = (distType, sampleMean, mu0, standardDev, sampleSize) => ((distType === 'Z')\n  ? jStat.zscore(sampleMean, mu0, standardDev / sqrt(sampleSize))\n  : jStat.tscore(sampleMean, mu0, standardDev, sampleSize))\n\nexport const calculateTwoSampleTestStatistic = (\n  sampleMean1,\n  sampleMean2,\n  standardDev1,\n  standardDev2,\n  sampleSize1,\n  sampleSize2\n) => (sampleMean1 - sampleMean2) / sqrt(standardDev1 ** 2 / sampleSize1 + standardDev2 ** 2 / sampleSize2);\n\nexport const calculatePValue = (distType, testStat, equality, sampleSize, sides) => {\n  const pval = (distType === 'Z') ? jStat.ztest(testStat, sides) : jStat.ttest(testStat, sampleSize - 1, sides)\n  if (((equality === '>') && (testStat < 0)) || ((equality === '<') && (testStat >= 0))) {\n    return 1 - pval\n  } else {\n    return pval\n  }\n}\n\nexport const generateScatter = (size, meanX, meanY, stdX, stdY, corr) => {\n  const covarianceMatrix = [\n    [stdX * stdX, corr * stdX * stdY],\n    [corr * stdX * stdY, stdY * stdY]\n  ];\n  const distribution = MultivariateNormal([meanX, meanY], covarianceMatrix);\n  return PD.rnorm(size, 0, 5).map((epsilon) => {\n    const [x, y] = distribution.sample();\n    const scorePoint = 40 + 3 * x + 2.5 * y + epsilon;\n    return ({\n      x: _.clamp(_.round(x, 2), 0, 15),\n      y: _.clamp(_.round(scorePoint, 2), 0, 100)\n    });\n  });\n}\n\nexport const generateBinary = (size, mean1, mean2, std1, std2, precision = 2) => {\n  const control = generateNormal(size, mean1, std1, precision).map((num) => ({ x: 0, y: num, category: 'Control' }));\n  const jobCorps = generateNormal(size, mean2, std2, precision).map((num) => ({ x: 1, y: num, category: 'Job Corps' }));\n  return [...control, ...jobCorps].map((obj, id) => ({ ...obj, id }));\n}\n\nexport const convertToStandardNormal = (array, popMean, popSD, attr) => {\n  return array.map((p) => ({...p, [attr]: (p[attr] - popMean) / (popSD || 1)}));\n}\n\nexport const linearRegression = (data, precision = 2) => {\n  let parsedData;\n  if (data.every((elem) => _.isArray(elem))) {\n    parsedData = data;\n  } else if (data.every((elem) => _.isObject(elem))) {\n    parsedData = data.map(({ x, y }) => [x, y]);\n  } else {\n    throw new Error();\n  }\n  const { equation } = regression.linear(parsedData, { precision });\n  return { slope: equation[0], intercept: equation[1] }\n}\n","import { useEffect, useRef, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Card, Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, optionalLaTeXType } from '../lib/types.js';\n\nexport default function SimulateSamples({ title, mathTitle, popArray, sampleSeriesName, popValSeriesName, yLabel, sampleFn, yFn }) {\n  const [sampled, setSampled] = useState([]);\n  const [meanLine, setMeanLine] = useState([]);\n  const [start, setStart] = useState(false);\n  const [chart, setChart] = useState({\n    chart: {\n      type: 'line',\n      animation: false\n    },\n    plotOptions: {\n      series: {\n        states: {\n          hover: {\n            enabled: false\n          }\n        }\n      }\n    },\n    title: {\n      text: title || ''\n    },\n    xAxis: {\n      title: {\n        text: 'Sample Size'\n      },\n      min: 0\n    },\n    yAxis: {\n      title: {\n        text: yLabel\n      }\n    },\n    tooltip: {\n      enabled: false\n    }\n  });\n\n  const timer = useRef();\n\n  useEffect(() => {\n    setSampled([]);\n    setMeanLine([]);\n    setStart(false);\n    clearInterval(timer.current);\n  }, [mathTitle]);\n\n  useEffect(() => {\n    const newChart = {\n      series: [\n        {\n          name: popValSeriesName,\n          data: meanLine,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          color: 'red'\n        },\n        {\n          name: sampleSeriesName,\n          data: sampled,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          color: 'black'\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [sampled, meanLine, popValSeriesName, sampleSeriesName]);\n\n  useEffect(() => {\n    return () => clearInterval(timer.current);\n  }, []);\n\n  const startSim = () => {\n    setSampled([]);\n    setMeanLine([]);\n    const simSpeeds = (iteration) => {\n      if (iteration < 200) {\n        return 1\n      } else if (iteration < 500) {\n        return 2\n      } else if (iteration < 1000) {\n        return 4\n      } else {\n        return 8\n      }\n    }\n    let n = 0;\n    timer.current = setInterval(() => {\n      const newSamples = [];\n      for (let i = 0; i < simSpeeds(n); i++) {\n        n += 1;\n        if (n >= 2000) {\n          clearInterval(timer.current);\n          setStart(false);\n          break;\n        }\n        const sample = sampleFn(popArray, n);\n        newSamples.push({ x: n, y: yFn(sample) });\n      }\n      setSampled((currSampled) => [...currSampled, ...newSamples]);\n      setMeanLine((currMeanLine) => [...currMeanLine, { x: n, y: yFn(popArray) }]);\n    }, n);\n  }\n\n  const toggleSim = () => {\n    if (!start) {\n      startSim()\n    } else {\n      clearInterval(timer.current)\n    }\n    setStart(!start)\n  }\n\n  return (\n    <Card body>\n      {mathTitle && mathTitle}\n      <HighchartsReact highcharts={Highcharts} options={chart}/>\n      <Button\n        variant={`outline-${start ? 'danger' : 'success'}`}\n        onClick={() => toggleSim()}\n      >\n        {start ? 'Stop' : 'Start'} Simulation\n      </Button>\n    </Card>\n  );\n}\n\nSimulateSamples.propTypes = {\n  title: PropTypes.string,\n  mathTitle: optionalLaTeXType,\n  popArray: dataObjectArrayType.isRequired,\n  sampleSeriesName: PropTypes.string.isRequired,\n  popValSeriesName: PropTypes.string.isRequired,\n  yLabel: PropTypes.string.isRequired,\n  sampleFn: PropTypes.func.isRequired,\n  yFn: PropTypes.func.isRequired\n}\n","import { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ChartContainer from '../ChartContainer.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport { Alert } from 'react-bootstrap';\nimport { populationMean, dataFromDistribution } from '../../lib/stats-utils.js';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { popShapeType } from '../../lib/types.js';\nimport SimulateSamples from '../SimulateSamples.js';\n\nexport default function LawOfLargeNumbers({ popShape, sampleSize }) {\n  const [sampled, setSampled] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [popArray, setPopArray] = useState([]);\n\n  useEffect(() => {\n    setStage(1);\n    const newPop = dataFromDistribution(popShape, sampleSize);\n    setPopArray(newPop);\n    setSampled([]);\n  }, [popShape, sampleSize]);\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    setStage(2);\n  }\n\n  const popMean = populationMean(popArray) || 0;\n  const sampleMean = _.round(populationMean(sampled), 2) || 0;\n\n  return (\n    <Collapsable>\n      <div data-testid=\"lln-sim\">\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} sampleMean={sampleMean} popShape={popShape}/>\n        <p>Try a few different sample sizes and compare sample mean to population mean</p>\n        <SampleSizeInput maxSize={popArray.length} minSize={1} handleClick={handleClick} classname=\"sample-size-input\"/>\n        {(stage >= 2) && (\n          <div>\n            <Alert variant=\"success\">\n              Sample Mean: {_.round(sampleMean, 2) || ''}\n              <br/>\n              Difference of Means: {_.round(popMean - sampleMean, 2)}\n            </Alert>\n            <Alert variant=\"info\">\n              According to the law, the average of the results obtained from a large enough sample should be close to the total average of the population, and will tend to become closer the larger the sample is. Make sure to pick several samples, or see below for a simulation to see the law in action.\n            </Alert>\n            <SimulateSamples\n              title={`Population vs Sample Means <br /> (${popShape})`}\n              popArray={popArray}\n              popValue={_.round(popMean, 2)}\n              popValSeriesName={`Population Mean (${popMean.toFixed(2)})`}\n              sampleSeriesName=\"Sampled Means\"\n              yLabel=\"Mean\"\n              sampleFn={_.sampleSize}\n              yFn={(sample) => _.round(populationMean(sample), 2)}\n            />\n          </div>\n        )}\n      </div>\n    </Collapsable>\n  );\n}\n\nLawOfLargeNumbers.propTypes = {\n  popShape: popShapeType.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n}\n","import { Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { optionalLaTeXType } from '../lib/types';\n\nexport default function SimulationIntro({ name, text }) {\n  return (\n    <Alert className=\"sim-description\" variant=\"primary\">\n      <Alert.Heading>{name}</Alert.Heading>\n      <hr/>\n      {text}\n    </Alert>\n  )\n}\n\nSimulationIntro.propTypes = {\n  name: PropTypes.string.isRequired,\n  text: optionalLaTeXType.isRequired\n}\n","import { ButtonGroup, Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { optionalLaTeXType } from '../lib/types';\n\nexport default function SelectorButtonGroup({ options, select, selected }) {\n  const buttons = options.map((option) => (\n    <Button\n      variant={(selected === option) ? 'selected' : 'unselected'}\n      onClick={() => select(option)}\n      key={`${option}`}\n    >\n      {option}\n    </Button>\n  ));\n\n  return (\n    <ButtonGroup>\n      {buttons}\n    </ButtonGroup>\n  )\n}\n\nSelectorButtonGroup.propTypes = {\n  options: PropTypes.arrayOf(optionalLaTeXType).isRequired,\n  select: PropTypes.func.isRequired,\n  selected: optionalLaTeXType\n}\n","import { useState } from 'react';\nimport LawOfLargeNumbers from './LawOfLargeNumbers.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\nimport SimulationIntro from '../SimulationIntro.js';\nimport { InlineMath } from 'react-katex';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\n\nexport default function LawOfLargeNumbersContainer() {\n  const [popShape, setPopType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Law of Large Numbers\"\n        text={<>The Law of Large Numbers (LLN) is a statement about the relationship between a population and a random sample drawn from that population. Let <InlineMath math=\"\\mu\"/> denote the true mean of a variable when calculated using the entire population, let <InlineMath math=\"\\sigma\"/> denote the true standard deviation of that variable when calculated using the entire population, let <InlineMath math=\"\\bar{x}\"/> denote the mean calculated from a sample drawn from that population, and let <InlineMath math=\"s\"/> denote the standard deviation calculated from that sample. We would like to use information from the sample to make conclusions about the population. The LLN is helpful in this endeavor, because it states that as the sample size gets larger, the sample mean approaches the true population mean. This simulation’s goal is to demonstrate this handy property.</>}\n      />\n      <br/>\n      <p>Pick a Population Distribution:</p>\n      <SelectorButtonGroup\n        options={['Normal', 'Uniform', 'Exponential', 'Chi-Squared']}\n        select={setPopType}\n        selected={popShape}\n      />\n      <br/>\n      <br/>\n      {popShape && <LawOfLargeNumbers popShape={popShape} sampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DotPlot from '../DotPlot.js';\nimport { VALUES } from '../../lib/constants.js';\nimport { max, min, sqrt } from 'mathjs';\nimport { popShapeType, sampleMeanArrayType } from '../../lib/types.js';\nimport _ from 'lodash';\nimport { Form } from 'react-bootstrap';\nimport { getCounts } from '../../lib/stats-utils.js';\n\nexport default function SampleMeanChart({ sampleMeans, popMean, sd, popShape }) {\n  const [normalized, setNormalized] = useState(false);\n\n  const newSampleMeans = normalized\n    ? sampleMeans.map(({ size, mean }) => _.round((mean - popMean) / (sd / sqrt(size)), 2))\n    : sampleMeans.map(({ mean }) => _.round(mean, 2));\n\n  const sampleMeansPoints = getCounts(newSampleMeans);\n\n  // these lists are used to determine axis sizing as more samples are added to the plot\n  const onlyValues = sampleMeansPoints.map((obj) => obj.x);\n  const onlyCounts = sampleMeansPoints.map((obj) => obj.y);\n\n  return (\n    <div>\n      <DotPlot\n        series={[{ name: 'Sample Means', data: sampleMeansPoints }]}\n        title=\"Sample Mean Distribution\"\n        xMin={normalized ? min(-3, ...onlyValues) : VALUES[popShape].xminval}\n        xMax={normalized ? max(3, ...onlyValues) : VALUES[popShape].xmaxval}\n        yMax={max(8, ...onlyCounts)}\n        xLabel={normalized ? 'Standard Deviations' : VALUES[popShape].xLabel}\n        yLabel=\"Observations of Sample Mean\"\n      />\n      <Form.Check\n        checked={normalized}\n        inline\n        className=\"form-switch\"\n        label=\"Convert to Standard Normal\"\n        onChange={() => setNormalized(!normalized)}\n      />\n    </div>\n  )\n}\n\nSampleMeanChart.propTypes = {\n  sampleMeans: sampleMeanArrayType.isRequired,\n  popMean: PropTypes.number,\n  sd: PropTypes.number,\n  popShape: popShapeType.isRequired\n}\n","import { useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils.js';\n\nexport default function SampleMeansSimulator({ population, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  const resample = () => {\n    const samplePop = _.sampleSize(population, resampleSize);\n    const sampleMean = populationMean(samplePop);\n    return { size: +resampleSize, mean: sampleMean };\n  }\n\n  const runSim = () => {\n    const newSamples = [];\n    for (let i = 0; i < numberResamples; i++) {\n      newSamples.push(resample())\n    }\n    addSamples(newSamples);\n  }\n\n  return (\n    <div>\n      <span> Sample Size: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => setResampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        variant=\"secondary\"\n        onClick={() => runSim()} disabled={(resampleSize < 1) || (resampleSize > population.length) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button variant=\"secondary\" onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nSampleMeansSimulator.propTypes = {\n  population: dataObjectArrayType.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ChartContainer from '../ChartContainer.js';\nimport SampleMeanChart from './SampleMeanChart.js'\nimport SampleMeansSimulator from './SampleMeansSimulator.js'\nimport { Alert, Button, Col, Row } from 'react-bootstrap';\nimport { populationMean, dataFromDistribution, populationStandardDev } from '../../lib/stats-utils.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { popShapeType } from '../../lib/types.js';\nimport DataTable from '../DataTable.js';\n\nexport default function CentralLimitTheorem({ popShape, mainSampleSize }) {\n  const [sampleMeans, setSampleMeans] = useState([]);\n  const [sampled, setSampled] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [popArray, setPopArray] = useState([]);\n\n  useEffect(() => {\n    setStage(1);\n    const newPop = dataFromDistribution(popShape, mainSampleSize);\n    setPopArray(newPop);\n    setSampled([]);\n    setSampleMeans([]);\n  }, [popShape, mainSampleSize]);\n\n  const addSampleMeans = (means) => {\n    if (!means) { // calling addSampleMeans with no arguments clears the data\n      setSampleMeans([])\n    } else {\n      const newSampleMeans = means.map((mean, index) => ({ ...mean, id: index }));\n      setSampleMeans(newSampleMeans);\n    }\n  }\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    const newMeans = [...sampleMeans, { size, mean: populationMean(sample) }];\n    setSampleMeans(newMeans.map((mean, index) => ({ ...mean, id: index })));\n  }\n\n  const popMean = populationMean(popArray) || 0;\n\n  return (\n    <Collapsable>\n      <div>\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} popShape={popShape}/>\n        <Button variant=\"success\" onClick={() => setStage(2)}>Continue</Button>\n        {(stage >= 2) && (\n          <div>\n            <Row>\n              <p style={{ margin: 15 }}>Try drawing some samples and calculating means</p>\n              <SampleSizeInput maxSize={popArray.length} minSize={1} handleClick={handleClick} classname=\"sample-size-input\"/>\n            </Row>\n            <Row>\n              <Col lg=\"8\">\n                <SampleMeanChart\n                  sampleMeans={sampleMeans}\n                  popMean={popMean}\n                  sd={populationStandardDev(popArray)}\n                  popShape={popShape}\n                />\n              </Col>\n              <Col lg=\"4\">\n                <DataTable\n                  data={sampleMeans}\n                  headers={{\n                    'Sample': 'id',\n                    'Size': 'size',\n                    'Mean': 'mean'\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <div>\n                <br/>\n                <Alert variant=\"primary\" style={{ width: '50%', margin: 'auto' }}>\n                  Simulate drawing many many samples\n                </Alert>\n                <br/>\n                <SampleMeansSimulator\n                  population={popArray}\n                  addSamples={addSampleMeans}\n                />\n              </div>\n            </Row>\n          </div>\n        )}\n\n      </div>\n    </Collapsable>\n  );\n}\n\nCentralLimitTheorem.propTypes = {\n  popShape: popShapeType.isRequired,\n  mainSampleSize: PropTypes.number.isRequired,\n}\n","import { useState } from 'react';\nimport CentralLimitTheorem from './CentralLimitTheorem.js';\nimport SimulationIntro from '../SimulationIntro.js';\nimport { InlineMath } from 'react-katex';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\n\nconst SAMPLE_SIZE = 2000;\n\nexport default function CentralLimitTheoremContainer() {\n  const [popShape, setPopType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Central Limit Theorem\"\n        text={<>This simulation demonstrates the shape of the sampling distribution of the sample mean. Suppose I draw a large number of samples, each of size <InlineMath math=\"n\"/>, from some population. For each sample, I calculate a sample mean <InlineMath math=\"\\bar{x}\"/>. I now plot a histogram of those sample means. For a sufficiently large sample size, the shape of that histogram will look like a beautiful bell-shaped curve, no matter what shape the underlying population had.</>}\n      />\n      <br/>\n      <p>Pick a Population Distribution:</p>\n      <SelectorButtonGroup\n        options={['Normal', 'Uniform', 'Exponential', 'Chi-Squared', 'Mystery']}\n        select={setPopType}\n        selected={popShape}\n      />\n      <br/>\n      <br/>\n      {popShape && <CentralLimitTheorem popShape={popShape} mainSampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import { Form, InputGroup, } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../../lib/types.js';\n\nexport default function MeanSDInput({ title, mean, setMean, sd, setSD }) {\n  return (\n    <div>\n      <p> Choose the Mean and Standard Deviation for {title} Height </p>\n      <InputGroup>\n        <InputGroup.Text>{title} Height Mean:</InputGroup.Text>\n        <Form.Control type=\"number\" min={60} max={80} step={1} value={mean} onChange={(event) => setMean(event.target.value)}/>\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroup.Text>{title} Height SD:</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          min={1}\n          max={7}\n          value={sd}\n          onChange={(event) => setSD(event.target.value)}\n          aria-label={`${title}-SD`}\n        />\n      </InputGroup>\n    </div>\n  );\n}\n\nMeanSDInput.propTypes = {\n  title: PropTypes.string.isRequired,\n  mean: stringOrNumberType.isRequired,\n  setMean: PropTypes.func.isRequired,\n  sd: stringOrNumberType.isRequired,\n  setSD: PropTypes.func.isRequired,\n}\n","import { ResponsiveScatterPlot } from '@nivo/scatterplot';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function JointChart({ jointData, sharedOptions, nodeId }) {\n  return (\n    <div style={{ height: 368, width: 366, position: 'inline-block', float: 'right', marginLeft: '0px', }} aria-label=\"plot\">\n      <ResponsiveScatterPlot\n        {...sharedOptions}\n        colors={(node) => ((nodeId && (node.id === nodeId)) ? '#0053a1' : '#00b3ff')}\n        data={[{ id: 'data', data: jointData }]}\n        yScale={{ type: 'linear', min: 40, max: 100 }}\n        yFormat={(e) => `${e} in.`}\n        tooltip={({ node }) => (\n          <div>\n            Parent Height: <strong>{node.data.formattedX}</strong>\n            <br/>\n            Child Height: <strong>{node.data.formattedY}</strong>\n          </div>\n        )}\n        axisBottom={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: 46,\n          legend: 'Parent Height (inches)'\n        }}\n        axisLeft={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: -38,\n          legend: 'Child Height (inches)'\n        }}\n      />\n    </div>\n  );\n}\n\nJointChart.propTypes = {\n  jointData: dataObjectArrayType.isRequired,\n  sharedOptions: PropTypes.objectOf(PropTypes.any).isRequired,\n  nodeId: PropTypes.string,\n}\n","import { useState, useCallback, useMemo } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport JointChart from './JointChart.js';\nimport { ResponsiveScatterPlotCanvas } from '@nivo/scatterplot';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function JDCharts({ parentData, childData, jointData }) {\n  // these functions synchronize the plots - all three corresponding data points increase in size on mouse over\n  const [nodeId, setNodeId] = useState();\n  const handleMouseMove = useCallback((node) => setNodeId(node.id), [setNodeId]);\n  const handleMouseLeave = useCallback(() => setNodeId(), [setNodeId]);\n  const getNodeSize = useMemo(() => (node) => ((nodeId && (nodeId === node.id)) ? 15 : 5), [nodeId]);\n\n  // options common to all three plots\n  const sharedOptions = {\n    animate: false,\n    margin: { top: 60, right: 10, bottom: 70, left: 70 },\n    xScale: { type: 'linear', min: 40, max: 100 },\n    blendMode: 'darken',\n    xFormat: (e) => `${e} in.`,\n    nodeSize: getNodeSize,\n    enableGridX: false,\n    enableGridY: false,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    axisBottom: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: 46\n    },\n    axisLeft: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: -30\n    }\n  }\n\n  return (\n    <Row>\n      <Col style={{ padding: '5px 0px 5px 0px', marginRight: '0px', marginLeft: '-60px' }}>\n        <div style={{ height: 368, width: 366, float: 'left', position: 'inline-block', }} aria-label=\"plot\">\n          <ResponsiveScatterPlotCanvas\n            data={[{ id: 'data', data: parentData }]}\n            tooltip={({ node }) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => ((node.id === nodeId) ? '#910000' : '#ff0000')}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{ ...sharedOptions.axisBottom, legend: 'Parent Height (inches)' }}\n            axisLeft={{ ...sharedOptions.axisLeft, legend: 'Count' }}\n          />\n        </div>\n      </Col>\n      <Col style={{ padding: '5px 0px 5px 0px', marginLeft: '-55px', marginRight: '0px', width: 'fit-content' }}>\n        <div style={{ height: 368, width: 366, float: 'left', position: 'inline-block', marginLeft: '0px', }} aria-label=\"plot\">\n          <ResponsiveScatterPlotCanvas\n            data={[{ id: 'data', data: childData }]}\n            tooltip={({ node }) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => ((node.id === nodeId) ? '#006607' : '#00ba0c')}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{ ...sharedOptions.axisBottom, legend: 'Child Height (inches)' }}\n            axisLeft={{ ...sharedOptions.axisLeft, legend: 'Count' }}\n          />\n        </div>\n      </Col>\n      <Col style={{ padding: '5px 0px 5px 0px', marginLeft: '-50px', marginRight: '0px', width: 'fit-content' }}>\n        <JointChart\n          jointData={jointData}\n          sharedOptions={sharedOptions}\n          nodeId={nodeId}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nJDCharts.propTypes = {\n  parentData: dataObjectArrayType.isRequired,\n  childData: dataObjectArrayType.isRequired,\n  jointData: dataObjectArrayType.isRequired,\n}\n","import { Form, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../lib/types';\n\nexport default function InputSlider({ value, min, max, step, onChange }) {\n  return (\n    <InputGroup className=\"input-slider-group\">\n      <Form.Control\n        type=\"range\"\n        custom\n        className=\"form-range custom-range\"\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={(event) => onChange(event.target.value)}\n      />\n      <Form.Control\n        type=\"number\"\n        className=\"input-group-append\"\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={(event) => onChange(event.target.value)}\n      />\n    </InputGroup>\n  );\n}\n\nInputSlider.propTypes = {\n  value: stringOrNumberType.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport MultivariateNormal from 'multivariate-normal';\nimport { Container, Row, Col, Button, InputGroup } from 'react-bootstrap';\nimport MeanSDInput from './MeanSDInput';\nimport JDCharts from './JDCharts';\nimport _ from 'lodash';\nimport InputSlider from '../InputSlider';\nimport { abs } from 'mathjs';\n\nexport default function JointDistributions() {\n  const [parentMean, setParentMean] = useState(70);\n  const [childMean, setChildMean] = useState(70);\n  const [parentSD, setParentSD] = useState(1);\n  const [childSD, setChildSD] = useState(1);\n  const [correlation, setCorrelation] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [allData, setAllData] = useState({ parent: [], child: [], joint: [] });\n\n  useEffect(() => {\n    if ((allData.parent.length > 0) && (allData.child.length > 0) && (allData.joint.length > 0)) {\n      setStage(2)\n    }\n  }, [allData]);\n\n  // generate datapoints for parent height and child height in a normal distribution\n  const generate = () => {\n    const newCorrelation = ((abs(+correlation) === 1) ? (0.999999 * correlation) : correlation);\n    const covariance = newCorrelation * parentSD * childSD;\n    const covMatrix = [[parentSD ** 2, covariance], [covariance, childSD ** 2]];\n    const distribution = MultivariateNormal([+parentMean, +childMean], covMatrix);\n\n    const jointSeries = [];\n    for (let i = 0; i < 500; i++) {\n      const [parentHeight, childHeight] = distribution.sample();\n      jointSeries.push({ x: _.round(parentHeight, 2), y: _.round(childHeight, 2) });\n    }\n\n    const parentCounts = {};\n    const parentSeries = [];\n    const childCounts = {};\n    const childSeries = [];\n\n    jointSeries.forEach(({ x, y }) => {\n      if (parentCounts[x]) {\n        parentCounts[x] += 1\n      } else {\n        parentCounts[x] = 1\n      }\n      parentSeries.push({ x, y: parentCounts[x] });\n      if (childCounts[y]) {\n        childCounts[y] += 1\n      } else {\n        childCounts[y] = 1\n      }\n      childSeries.push({ x: y, y: childCounts[y] });\n    });\n\n    const data = { parent: parentSeries, child: childSeries, joint: jointSeries }\n    setAllData(data);\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xl={4} md={6} xs={12} style={{ padding: 10 }}>\n          <MeanSDInput title=\"Parent\" mean={parentMean} setMean={setParentMean} sd={parentSD} setSD={setParentSD}/>\n        </Col>\n        <Col xl={4} md={6} xs={12} style={{ padding: 10 }}>\n          <MeanSDInput title=\"Child\" mean={childMean} setMean={setChildMean} sd={childSD} setSD={setChildSD}/>\n        </Col>\n        <Col xl={4} md={12} style={{ padding: 10 }}>\n          <p>Set the Correlation</p>\n          <InputSlider value={correlation} min={-1} max={1} step={0.1} onChange={(value) => setCorrelation(value)}/>\n          <p style={{ margin: '15px' }}>Covariance</p>\n          <InputGroup.Text aria-label=\"covariance\">{(correlation * parentSD * childSD).toFixed(2)}</InputGroup.Text>\n        </Col>\n      </Row>\n      <Row>\n        <Button\n          variant=\"primary\"\n          style={{ width: 'fit-content', margin: 'auto' }}\n          disabled={!parentMean || !parentSD || !childMean || !childSD}\n          onClick={() => generate()}\n        >\n          Generate!\n        </Button>\n      </Row>\n      {(stage === 2) && <JDCharts parentData={allData.parent} childData={allData.child} jointData={allData.joint}/>}\n    </Container>\n  );\n}\n","import SimulationIntro from '../SimulationIntro.js';\nimport JointDistributions from './JointDistributions.js';\n\nexport default function JointDistributionsContainer() {\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Joint Distributions\"\n        text=\"Covariance measures the extent to which two random variables move together, or “co-vary.” Correlation is an alternative measure of how two variables co-move that is scaled by the standard deviation of the variables and ranges between -1 and 1. The mean and variance of each individual random variable factor into the calculation of covariance (or correlation), but pairs of random variables with same underlying distributions could have very different correlations.\"\n      />\n      <br/>\n      <JointDistributions/>\n    </div>\n  );\n}\n","/*\n\n  Displays a slider for the user to choose a number of random points and a button to generate them\n\n*/\nimport { useState } from 'react';\nimport { Button, Form, InputGroup, } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function NewPointsInput({ generatePoints }) {\n  const [numPoints, setNumPoints] = useState(5);\n\n  return (\n    <InputGroup className=\"input-slider-group\">\n      <Form.Control\n        type=\"range\"\n        custom\n        className=\"form-range custom-range\"\n        data-testid=\"new-points-slider\"\n        style={{ width: '50%' }}\n        min={0}\n        max={10}\n        value={numPoints}\n        onChange={(event) => setNumPoints(event.target.value)}\n      />\n      <InputGroup.Text>{numPoints}</InputGroup.Text>\n      <Button variant=\"outline-primary\" onClick={() => generatePoints(numPoints)}>New Points</Button>\n    </InputGroup>\n  );\n}\n\nNewPointsInput.propTypes = {\n  generatePoints: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport { abs } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js'\nimport { Form } from 'react-bootstrap';\nrequire('highcharts/modules/annotations')(Highcharts);\n\nexport default function LeastSquaresChart({ points, addPoint, linePoints, setSquareAreas }) {\n  const [enableClick, setEnableClick] = useState(false);\n  const [myChart, setMyChart] = useState({\n    tooltip: {\n      headerFormat: '',\n      pointFormat: 'x: {point.x:.2f}<br/>y: {point.y:.2f}',\n    },\n    title: {\n      text: ''\n    },\n    xAxis: {\n      title: {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    },\n    yAxis: {\n      title: {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    },\n    legend: {\n      enabled: false\n    }\n  });\n\n  useEffect(() => {\n    // generate pairs for the corresponding points to create squares\n    const pairs = [];\n    linePoints.forEach((p1) => {\n      points.forEach((p2) => {\n        if (p1.x === p2.x) {\n          pairs.push({ p1, p2 })\n        }\n      });\n    });\n\n    const areas = pairs.map(({ p1, p2 }) => abs(p1.y - p2.y) ** 2);\n    setSquareAreas(areas);\n\n    // returns an array of points to create a square shape in highcharts\n    const buildSquare = (p1, p2) => {\n      const dist = abs(p1.y - p2.y);\n      const lowestPt = p1.y < p2.y ? p1 : p2;\n      return [{\n        x: lowestPt.x,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x + dist,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x + dist,\n        y: lowestPt.y + dist,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x,\n        y: lowestPt.y + dist,\n        xAxis: 0,\n        yAxis: 0\n      }, {\n        x: lowestPt.x,\n        y: lowestPt.y,\n        xAxis: 0,\n        yAxis: 0\n      }];\n    }\n\n    // create the actual square objects for highcharts\n    const squares = pairs.map(({ p1, p2 }) => (\n      {\n        dashStyle: 'solid',\n        fill: 'rgba(255, 255, 255, 0)',\n        points: buildSquare(p1, p2),\n        type: 'path'\n      })\n    );\n\n    const newChart = {\n      chart: {\n        animation: false,\n        type: 'line',\n        plotBorderColor: '#000000',\n        plotBorderWidth: 1,\n        margin: [100, 100, 100, 100],\n        width: 600,\n        height: 600,\n        events: {\n          click: (e) => {  // click to add a point on the plot!\n            if (enableClick) {\n              const x = e.xAxis[0].value;\n              const y = e.yAxis[0].value;\n              addPoint({x, y});\n            }\n          }\n        }\n      },\n      caption: {\n        align: 'center',\n        y: 0,\n        style: {fontSize: 15},\n        text: enableClick ? 'Click on the chart to add a data point. <br/> Notice how it affects the slope and intercept of the estimated line.' : '',\n        verticalAlign: 'bottom'\n      },\n      series: [\n        {\n          type: 'scatter',\n          marker: {\n            radius: 5,\n          },\n          data: points,\n        },\n        {\n          type: 'line',\n          data: linePoints,\n          marker: {\n            enabled: true,\n            fillColor: 'orange'\n          },\n          label: {\n            enabled: false\n          }\n        }\n      ],\n      annotations: [{\n        draggable: '',\n        shapes: squares\n      }]\n    }\n\n    setMyChart(newChart);\n  }, [points, addPoint, linePoints, setSquareAreas, enableClick]);\n\n  return (\n    <>\n      <HighchartsReact highcharts={Highcharts} options={myChart}/>\n      <Form.Check\n        checked={enableClick}\n        inline\n        className=\"form-switch\"\n        label=\"Enable Click for New Points\"\n        onChange={() => setEnableClick(!enableClick)}\n      />\n    </>\n  );\n}\n\nLeastSquaresChart.propTypes = {\n  points: dataObjectArrayType.isRequired,\n  addPoint: PropTypes.func.isRequired,\n  linePoints: dataObjectArrayType.isRequired,\n  setSquareAreas: PropTypes.func.isRequired\n}\n","import { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function PlotLine({ stage, setStage, squareAreas, generateBestLine }) {\n  return (\n    (stage === 2) ? (\n      <Button variant=\"outline-primary\" onClick={() => setStage(3)}>Plot Your Guess</Button>\n    ) : (\n      <div>\n        <p>Sum Squares: {squareAreas.reduce((a, b) => a + b, 0).toFixed(2)}</p>\n        <Button variant=\"outline-info\" onClick={() => generateBestLine()}>Reveal the Least Squares Line</Button>\n      </div>\n    )\n  );\n}\n\nPlotLine.propTypes = {\n  stage: PropTypes.number.isRequired,\n  setStage: PropTypes.func.isRequired,\n  squareAreas: PropTypes.arrayOf(PropTypes.number).isRequired,\n  generateBestLine: PropTypes.func.isRequired,\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport NewPointsInput from './NewPointsInput';\nimport LeastSquaresChart from './LeastSquaresChart.js';\nimport PlotLine from './PlotLine.js';\nimport InputSlider from '../InputSlider.js';\nimport { random } from 'mathjs';\nimport { linearRegression } from '../../lib/stats-utils';\n\nexport default function LeastSquares() {\n  const [points, setPoints] = useState([]);\n  const [linePoints, setLinePoints] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [squareAreas, setSquareAreas] = useState([]);\n  const [slope, setSlope] = useState(1);\n  const [intercept, setIntercept] = useState(1);\n\n  const addPoint = useCallback((point) => {\n    setPoints([...points, point]);\n  }, [points])\n\n  useEffect(() => {\n    if (stage === 2) {\n      setLinePoints([]);\n      setSquareAreas([]);\n      setSlope(1);\n      setIntercept(1);\n    }\n  }, [stage]);\n\n  useEffect(() => {\n    if (stage === 3) {\n      setSquareAreas([]);\n      const linearPts = [{ x: 0, y: 0 }, ...points].map((point) => ({ x: point.x, y: (point.x * +slope) + +intercept }));\n      linearPts.sort((a, b) => a.x - b.x);\n      setLinePoints(linearPts);\n    }\n  }, [stage, slope, intercept, points]);\n\n  const generatePoints = (num) => {\n    const newPoints = [];\n    for (let i = 0; i < num; i++) {\n      const x = random(2, 17);\n      const y = random(2, 17);\n      newPoints.push({ x: +x, y: +y });\n    }\n    setPoints(newPoints);\n    setStage(2);\n  }\n\n  const generateBestLine = () => {\n    const { slope: newSlope, intercept: newIntercept } = linearRegression(points, 1);\n    setSlope(newSlope);\n    setIntercept(newIntercept);\n  }\n\n  return (\n    <Row className=\"least-squares-container\">\n      <Col xs=\"auto\">\n        <LeastSquaresChart points={points} addPoint={addPoint} linePoints={linePoints} setSquareAreas={setSquareAreas}/>\n      </Col>\n      <Col xs={{ span: 3, offset: 3 }} md={{ span: 3, offset: 0 }} style={{ paddingTop: '100px' }}>\n        <NewPointsInput generatePoints={generatePoints}/>\n        <br/>\n        {(stage === 2) && <p>Guess a Slope and Y-Intercept to fit the points</p>}\n        {(stage === 3) && <p>Want to try again? Guess a different slope and y-intercept to reduce the Sum of Squares!</p>}\n        {(stage >= 2) && (\n          <div>\n            <h4>Intercept</h4>\n            <InputSlider value={intercept} min={-20} max={20} step={0.1} onChange={(value) => setIntercept(value)}/>\n            <br/>\n            <h4>Slope</h4>\n            <InputSlider value={slope} min={-10} max={10} step={0.1} onChange={(value) => setSlope(value)}/>\n            <br/>\n            <PlotLine stage={stage} setStage={setStage} squareAreas={squareAreas} generateBestLine={generateBestLine}/>\n          </div>\n        )}\n      </Col>\n    </Row>\n  )\n}\n","import LeastSquares from './LeastSquares';\nimport SimulationIntro from '../SimulationIntro';\n\nexport default function LeastSquaresContainer() {\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Least Squares\"\n        text=\"The Ordinary Least Squares method estimates the intercept and slope of a line that “best fits” the observed data by minimizing the sum of the squared distances between the points and the line.\"\n      />\n      <br/>\n      <LeastSquares/>\n    </div>\n  );\n}\n","import { Form, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { InlineMath } from 'react-katex';\n\nexport default function CoefficientInput({ beta, setBeta, delta, setDelta }) {\n  return (\n    <div>\n      <InputGroup>\n        <InputGroup.Text><InlineMath math=\"\\beta_1\"/>, the Coefficient on Study Hours:</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          step={0.1}\n          value={beta}\n          min={-4}\n          max={4}\n          onChange={(event) => setBeta(event.target.value)}\n        />\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroup.Text><InlineMath math=\"\\delta_1\"/>, the Coefficient on Sleep Hours:</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          step={0.1}\n          value={delta}\n          min={-4}\n          max={4}\n          onChange={(event) => setDelta(event.target.value)}\n        />\n      </InputGroup>\n    </div>\n  );\n}\n\nCoefficientInput.propTypes = {\n  beta: PropTypes.number.isRequired,\n  setBeta: PropTypes.func.isRequired,\n  delta: PropTypes.number.isRequired,\n  setDelta: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function OmittedVariableChart({ dataPoints, naiveLine, correctedLine }) {\n  const [myChart, setMyChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        zoomtype: 'xy'\n      },\n      title: {\n        text: 'Study Hours vs. Test Score'\n      },\n      xAxis: {\n        min: 0,\n        max: 10,\n        title: {\n          text: 'Study Hours'\n        }\n      },\n      yAxis: {\n        min: 20,\n        max: 100,\n        title: {\n          text: 'Test Score'\n        }\n      },\n      series: [\n        {\n          type: 'scatter',\n          data: dataPoints,\n          name: 'Test Score',\n          color: '#33A5FF'\n        },\n        {\n          type: 'line',\n          data: naiveLine,\n          name: 'Naive Regression',\n          color: '#E30404',\n          label: {\n            enabled: false\n          }\n        },\n        {\n          type: 'line',\n          data: correctedLine,\n          name: 'Corrected Regression',\n          color: '#2AC208',\n          label: {\n            enabled: false\n          }\n        }\n      ]\n    }\n\n    setMyChart(newChart);\n  }, [dataPoints, naiveLine, correctedLine]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nOmittedVariableChart.propTypes = {\n  dataPoints: dataObjectArrayType.isRequired,\n  naiveLine: PropTypes.arrayOf(PropTypes.number),\n  correctedLine: PropTypes.arrayOf(PropTypes.number)\n}\n","import { useState, useEffect } from 'react';\nimport { Row, Col, Button, InputGroup } from 'react-bootstrap';\nimport CoefficientInput from './CoefficientInput.js';\nimport MultivariateNormal from 'multivariate-normal';\nimport { round, transpose, matrix, multiply, inv } from 'mathjs';\nimport OmittedVariableChart from './OmittedVariableChart.js';\nimport PD from 'probability-distributions';\nimport _ from 'lodash';\nimport InputSlider from '../InputSlider.js';\nimport { linearRegression } from '../../lib/stats-utils.js';\n\nexport default function OmittedVariableBias() {\n  const [beta, setBeta] = useState(3);\n  const [delta, setDelta] = useState(3);\n  const [correlation, setCorrelation] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [series, setSeries] = useState([]);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [allData, setAllData] = useState({ points: [], naiveLine: [], correctedLine: [] });\n\n  const stdX = 3;\n  const stdY = 6;\n  const OBS = 1000;\n\n  useEffect(() => {\n    if (series.length > 0) {\n      // TODO - simplify this\n\n      // generate epsilon\n      const epsilon = PD.rnorm(OBS, 0, 5);\n\n      // matrix data\n      const ones = [];\n      const colOne = [];\n      const colTwo = [];\n\n      // generate test score data\n      const scores = [];\n      for (let i = 0; i < OBS; i++) {\n        const scorePoint = 40 + beta * series[i][0] + delta * series[i][1] + epsilon[i];\n        scores.push(round(scorePoint * 100) / 100);\n        ones.push(1);\n        colOne.push(series[i][0]);\n        colTwo.push(series[i][1]);\n      }\n\n      // get series with study hours vs test scores\n      const studyScores = [];\n      for (let i = 0; i < OBS; i++) {\n        studyScores.push([series[i][0], scores[i]]);\n      }\n\n      // regress study hours with test scores\n      const { slope, intercept } = linearRegression(studyScores)\n\n      // Corrected regression\n\n      // using matrices\n      const X = transpose(matrix([ones, colOne, colTwo]));\n      const Y = transpose(matrix([scores]));\n      const inverse = inv(multiply(transpose(X), X));\n      const bHat = multiply(multiply(inverse, transpose(X)), Y);\n\n      const generatePoints = (slope, int) => _.range(0, 11).map((i) => _.round(int + i * slope, 2));\n\n      setAllData({\n        points: studyScores.map(([x, y]) => ({ x, y })),\n        naiveLine: generatePoints(slope, intercept),\n        correctedLine: generatePoints(parseFloat(bHat.get([1, 0])), parseFloat(bHat.get([0, 0])))\n      });\n      setShowCorrect(false);\n    }\n  }, [series]);  // eslint-disable-line\n\n  useEffect(() => {\n    if ((allData.points.length > 0) && (allData.naiveLine.length > 0)) {\n      setStage(2);\n    }\n  }, [allData]);\n\n  const generateSeries = () => {\n    // covariance between dimensions. This examples makes the first and third\n    // dimensions highly correlated, and the second dimension independent.\n    const covarianceMatrix = [\n      [stdX * stdX, correlation * stdX * stdY],\n      [correlation * stdX * stdY, stdY * stdY]\n    ];\n\n    // lets you sample from distribution\n    const distribution = MultivariateNormal([5, 2], covarianceMatrix);\n    const seriesArr = []\n\n    // samples 1000\n    for (let i = 0; i < OBS; i++) {\n      const [a, b] = distribution.sample()\n      seriesArr.push([_.round(a, 2), _.round(b, 2)]);\n    }\n\n    setSeries(seriesArr);\n  }\n\n  return (\n    <div>\n      <Row>\n        <p>Choose Population Parameters:</p>\n      </Row>\n      <br/>\n      <Row lg={2} sm={1}>\n        <Col style={{ margin: 'auto', padding: 10 }}>\n          <CoefficientInput beta={beta} setBeta={setBeta} delta={delta} setDelta={setDelta}/>\n        </Col>\n        <Col>\n          <div style={{ padding: 10 }}>Set the Correlation between Study Hours and Sleep Hours:</div>\n          <InputSlider value={correlation} min={-0.99} max={0.99} step={0.01} onChange={(value) => setCorrelation(value)}/>\n          <br/>\n          <InputGroup style={{ width: 'fit-content', margin: 'auto' }}>\n            <InputGroup.Text>Covariance between Study Hours and Sleep Hours:</InputGroup.Text>\n            <InputGroup.Text aria-label=\"covariance\">{(correlation * stdX * stdY).toFixed(2)}</InputGroup.Text>\n          </InputGroup>\n        </Col>\n      </Row>\n      <br/>\n      <Row>\n        <Col>\n          <p>Estimate Regression Using Test Score and Study Hours Data </p>\n          <Button variant=\"primary\" onClick={() => generateSeries()}>Generate!</Button>\n        </Col>\n      </Row>\n      <br/>\n      {(stage >= 2) && (\n        <div>\n          <Row>\n            <Col lg={{ span: 12, offset: 0 }} xl={{ span: 8, offset: 2 }}>\n              <OmittedVariableChart\n                dataPoints={allData.points}\n                naiveLine={allData.naiveLine}\n                correctedLine={showCorrect ? allData.correctedLine : []}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <p variant=\"primary\">Add Omitted Variable, Density, to Regression</p>\n              <Button\n                variant=\"outline-primary\"\n                onClick={() => setShowCorrect(!showCorrect)}\n                active={showCorrect}\n              >\n                Show Corrected Regression Line\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { Row } from 'react-bootstrap';\nimport OmittedVariableBias from './OmittedVariableBias';\nimport { InlineMath } from 'react-katex';\nimport SimulationIntro from '../SimulationIntro';\n\nexport default function OmittedVariableBiasContainer() {\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Omitted Variable Bias\"\n        text={<>Omitted Variable Bias (OVB) is the bias in a regression estimator that arises when there is a variable (<InlineMath math=\"V\"/>) which is not included in the regression that is correlated with the regressor (<InlineMath math=\"X\"/>) and is a determinant of the outcome (<InlineMath math=\"Y\"/>). In the regression model <InlineMath math=\"Y_i = \\beta_0 + \\beta_1 X_i + \\delta V_i + \\epsilon_i\"/> where <InlineMath math=\"V\"/> is omitted from the regression estimation, the OVB is described as the final term in the following expression: <InlineMath math=\"\\hat{\\beta}_1 \\xrightarrow{p} \\beta_1 + \\frac{\\delta Cov(X,V)}{Var(X)}\"/></>}\n      />\n      <br/>\n      <Row>\n        <p>We are studying the relationship between test score and study hours:</p>\n        <InlineMath math=\"Test\\ Score = \\beta_0 + \\beta_1 Study\\ Hours_i + \\delta Sleep\\ Hours_i + u_i\"/>\n      </Row>\n      <br/>\n      <OmittedVariableBias/>\n      <br/>\n    </div>\n  );\n}\n","import { Row, Col } from 'react-bootstrap';\nimport InputSlider from '../InputSlider.js';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\nimport PropTypes from 'prop-types';\nimport { distributionType, stringOrNumberType } from '../../lib/types.js';\nimport { InlineMath } from 'react-katex';\n\nexport default function ConfidenceInputs({ distType, setDistType, confLevel, setConfLevel }) {\n  return (\n    <div>\n      <Row>\n        <div>\n          1) Do you want to assume that you know <InlineMath math=\"\\sigma\"/>? If yes, choose Z. If no, choose T: {' '}\n          <SelectorButtonGroup options={['Z', 'T']} select={setDistType} selected={distType}/>\n        </div>\n      </Row>\n      <br/>\n      <Row>\n        <div>\n          2) Confidence Level: {' '}\n          <SelectorButtonGroup\n            options={['90%', '95%', '99%']}\n            select={(pct) => setConfLevel(pct.slice(0, 2))}\n            selected={`${confLevel}%`}\n          />\n        </div>\n      </Row>\n      <br/>\n      <Row>\n        <Col sm=\"12\" md={{ span: 6, offset: 3 }}>\n          <div>\n            More Levels:\n            <InputSlider value={confLevel} min={1} max={99} step={1} onChange={setConfLevel}/>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nConfidenceInputs.propTypes = {\n  distType: distributionType.isRequired,\n  setDistType: PropTypes.func.isRequired,\n  confLevel: stringOrNumberType.isRequired,\n  setConfLevel: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Alert } from 'react-bootstrap';\nimport _ from 'lodash';\nimport { max } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType, popShapeType } from '../../lib/types.js';\nimport { VALUES_ALT } from '../../lib/constants.js';\nrequire('highcharts/highcharts-more')(Highcharts);\n\nexport default function ConfidenceIntervalsChart({ confidenceLevel, samples, popShape, popMean, selected, setSelected }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const { xmaxval, xminval, title, xLabel } = VALUES_ALT[popShape];\n\n    const sampleMeans = [];\n    const containsMean = [];\n    const doesntContainMean = [];\n\n    // put objects into separate lists depending on whether or not they contain the mean\n    // can't seem to color individual points in a highcharts series, so this is the next best option imo\n    samples.forEach((sampleObject) => {\n      sampleMeans.push({\n        ...sampleObject,\n        x: sampleObject.id,\n        y: sampleObject.mean\n      });\n      if (sampleObject.label) {\n        containsMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      } else {\n        doesntContainMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      }\n    });\n\n    const tooltipFormat = {\n      headerFormat: '',\n      pointFormat: 'Sample Size: <b>{point.size}</b><br/>Sample Mean: <b>{point.mean}</b><br/>Lower Bound of CI: <b>{point.lowerConf}</b><br/>Upper Bound of CI: <b>{point.upperConf}</b><br/>Confidence Level: <b>{point.confidenceLevel}%</b><br/>Distribution: <b>{point.distribution}</b><br/>',\n      outside: true,\n      borderColor: 'gray',\n    }\n\n    const newChart = {\n      chart: {\n        type: 'columnrange',\n        inverted: true,\n        animation: false,\n        zoomType: 'xy',\n        events: {\n          // hack to allow zoom - this unselects all points in the plot\n          selection: (event) => {\n            event.target.series.forEach((series) => {\n              series.data.forEach((point) => {\n                point.select(false, false)\n              })\n            })\n          }\n        }\n      },\n      plotOptions: {\n        series: {\n          point: {\n            events: {\n              click() {\n                setSelected(this);\n                this.select(false, false);\n              }\n            }\n          },\n          animation: {\n            duration: 0\n          },\n          cursor: 'pointer'\n        }\n      },\n      title: {\n        text: title\n      },\n      xAxis: {\n        reversed: false,\n        min: 1,\n        max: max(samples.length, 10),\n        startOnTick: true,\n        title: {\n          text: 'Sample Number'\n        },\n        tickPixelInterval: 1,\n        tickInterval: 1,\n        tickWidth: 0,\n        lineWidth: 0\n      },\n      yAxis: {\n        min: xminval,\n        max: xmaxval,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: xLabel\n        }\n      },\n      series: [\n        {\n          name: 'Confidence Interval',\n          data: containsMean,\n          color: 'rgba(0, 170, 0, 0.5)',\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: 'rgba(0, 170, 0, 1)'\n            },\n            inactive: {\n              color: 'rgba(0, 170, 0, 0.5)'\n            },\n            select: {\n              enabled: false,\n              color: 'rgba(0, 170, 0, 0.5)'\n            }\n          }\n        },\n        {\n          name: 'Confidence Interval',\n          data: doesntContainMean,\n          color: 'rgba(255, 0, 0, 0.5)',\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: 'rgba(255, 0, 0, 1)'\n            },\n            inactive: {\n              color: 'rgba(255, 0, 0, 0.5)'\n            },\n            select: {\n              enabled: false,\n              color: 'rgba(255, 0, 0, 0.5)'\n            }\n          }\n        },\n        {\n          name: 'Sample Means',\n          type: 'scatter',\n          data: sampleMeans,\n          color: '#616161',\n          marker: {\n            enabled: true,\n            symbol: 'diamond',\n            radius: 1\n          },\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false,\n            }\n          },\n          tooltip: tooltipFormat,\n        },\n        {\n          type: 'line',\n          name: 'Population Mean',\n          data: [[0, popMean], [samples.length, popMean]],\n          color: 'gray',\n          enableMouseTracking: false,\n          showInLegend: false,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          zIndex: -5\n        }\n      ]\n    }\n    setChart(newChart);\n  }, [confidenceLevel, samples, popShape, popMean, setSelected]);\n\n  return (\n    <div>\n      {selected ? (\n        <Alert variant={selected.label ? 'success' : 'danger'}>\n          Sample number {selected.id} has a mean of {selected.mean.toFixed(2)}, with {confidenceLevel}% CI ({_.round(selected.lowerConf, 2)}, {_.round(selected.upperConf, 2)}). CI contains the population mean? {selected.label.toString()}\n        </Alert>\n      ) : (\n        <div style={{ height: 80 }}/>\n      )}\n      <HighchartsReact highcharts={Highcharts} options={chart}/>\n    </div>\n  );\n}\n\nConfidenceIntervalsChart.propTypes = {\n  confidenceLevel: PropTypes.number.isRequired,\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  popShape: popShapeType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  selected: confidenceIntervalsSampleType,\n  setSelected: PropTypes.func.isRequired,\n}\n","import { useState } from 'react';\nimport { Button, Form, Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function ManySamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <Alert variant=\"primary\" style={{ width: '50%', margin: 'auto' }}>\n        Simulate drawing many many samples\n      </Alert>\n      <br/>\n      <span> Sample Size: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => setResampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        variant=\"secondary\"\n        onClick={() => addSamples(resampleSize, numberResamples)}\n        disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button variant=\"secondary\" onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nManySamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import DotPlot from '../DotPlot';\nimport { Alert, Container } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../../lib/types.js';\nimport { TEXTS_ALT, VALUES_ALT } from '../../lib/constants.js';\n\nexport default function PopulationChart({ popArray, popMean, sampled, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES_ALT[popShape];\n\n  const series = [\n    {\n      name: 'Population',\n      data: popArray\n    },\n    {\n      name: 'Samples',\n      data: sampled\n    }\n  ];\n\n  return (\n    <Container fluid>\n      <Alert variant=\"secondary\">\n        We queried the {TEXTS_ALT[popShape][0]} of {popArray.length} {TEXTS_ALT[popShape][1]} and plotted the results on the following chart.\n      </Alert>\n      <DotPlot\n        series={series}\n        title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n        xMin={xminval}\n        xMax={xmaxval}\n        yMax={ymaxval}\n        xLabel={xLabel}\n      />\n    </Container>\n  );\n}\n\nPopulationChart.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number,\n  sampled: dataObjectArrayType.isRequired,\n  popShape: popShapeType.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ConfidenceInputs from './ConfidenceInputs.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport ConfidenceIntervalsChart from './ConfidenceIntervalsChart.js';\nimport ManySamplesInput from './ManySamplesInput.js';\nimport { dataFromDistribution, populationMean, populationStandardDev } from '../../lib/stats-utils.js';\nimport { Row, Col, Alert } from 'react-bootstrap';\nimport PopulationChart from './PopulationChart.js';\nimport _ from 'lodash';\nimport { jStat } from 'jstat';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts';\nimport { popShapeType } from '../../lib/types.js';\nimport DataTable from '../DataTable.js';\n\nexport default function ConfidenceIntervals({ popShape, populationSize }) {\n  const [distType, setDistType] = useState('Z'); // can be \"Z\" or \"T\"\n  const [confLevel, setConfLevel] = useState(95);\n  const [popArray, setPopArray] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    const newPop = dataFromDistribution(popShape, populationSize, { low: 55, hi: 75 });\n    setPopArray(newPop);\n    setSamples([]);\n    setSelected();\n  }, [popShape, populationSize]);\n\n  // this is a hack to get around what I believe is a bug in highcharts\n  // where a point will sometimes turn gray when selected\n  const unselect = () => {\n    Highcharts.charts.forEach((chart) => {\n      if (chart) {\n        chart.series.forEach((series) => {\n          series.data.forEach((point) => {\n            point.select(false, false)\n          })\n        })\n      }\n    });\n  }\n\n  const generateSamples = (size, replications = 1) => {\n    unselect();\n    if (!size) { // calling generateSamples with no arguments clears the data\n      setSamples([]);\n      setSelected();\n    } else {\n      const sampleObjects = [];\n      for (let i = 0; i < replications; i++) {\n        const sample = _.sampleSize(popArray, size);\n        const mean = _.round(populationMean(sample), 2);\n        const popMean = _.round(populationMean(popArray), 2);\n        const standardDev = populationStandardDev((distType === 'Z') ? popArray : sample);\n        const ciFunction = (distType === 'Z') ? jStat.normalci : jStat.tci;\n        const [lowerConf, upperConf] = ciFunction(mean, 1 - (confLevel / 100), standardDev, size);\n\n        const sampleObject = {\n          data: sample,\n          size: +size,\n          mean,\n          lowerConf: _.round(lowerConf, 2),\n          upperConf: _.round(upperConf, 2),\n          confidenceLevel: confLevel,\n          distribution: distType,\n          label: (popMean >= _.round(lowerConf, 2)) && (popMean <= _.round(upperConf, 2)),\n        }\n\n        sampleObjects.push(sampleObject);\n      }\n\n      const newSamples = [...samples, ...sampleObjects];\n      const indexedSamples = newSamples.map((sample, index) => ({ ...sample, id: index + 1 }))\n      setSamples(indexedSamples);\n      setSelected(indexedSamples[indexedSamples.length - 1]);\n    }\n  }\n\n  const selectPoint = (point) => {\n    setSelected(point);\n    unselect();\n  }\n\n  return (\n    <Collapsable>\n      <div>\n        <Row>\n          <ConfidenceInputs\n            distType={distType}\n            setDistType={setDistType}\n            confLevel={confLevel}\n            setConfLevel={setConfLevel}\n          />\n        </Row>\n        <br/>\n        <Row md={1} lg={2}>\n          <Col>\n            <PopulationChart\n              popArray={popArray}\n              popMean={populationMean(popArray)}\n              sampled={selected ? selected.data : []} // most recent sample data\n              popShape={popShape}\n            />\n            <p>Try drawing some samples and calculating means</p>\n            <SampleSizeInput maxSize={popArray.length} minSize={1} handleClick={generateSamples} classname=\"sample-size-input\"/>\n          </Col>\n          <Col>\n            <ConfidenceIntervalsChart\n              confidenceLevel={confLevel}\n              samples={samples}\n              popShape={popShape}\n              popMean={_.round(populationMean(popArray), 2)}\n              selected={selected}\n              setSelected={setSelected}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={12} xl={5}>\n            <ManySamplesInput\n              populationSize={popArray.length}\n              addSamples={generateSamples}\n            />\n          </Col>\n          <Col lg={12} xl={7}>\n            <DataTable\n              data={samples}\n              headers={{\n                'Sample': 'id',\n                'Size': 'size',\n                'Mean': 'mean',\n                'Lower Bound for CI': 'lowerConf',\n                'Upper Bound for CI': 'upperConf',\n                'Confidence Level': 'confidenceLevel',\n                'Distribution': 'distribution'\n              }}\n              height={400}\n              setSelected={selectPoint}\n              setRowColor={(object) => object.label ? 'rgba(23, 161, 80, 0.233)' : 'rgba(161, 23, 23, 0.233)'}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <Row>\n          {(samples.length > 0) && (\n            <Alert variant=\"info\">\n              {samples.filter(({ label }) => !label).length} intervals did not contain the population mean.\n              <br/>\n              {samples.filter(({ label }) => label).length} did ({_.round(100 * samples.filter(({ label }) => label).length / samples.length, 2)}%).\n            </Alert>\n          )}\n        </Row>\n      </div>\n    </Collapsable>\n  );\n}\n\nConfidenceIntervals.propTypes = {\n  popShape: popShapeType.isRequired,\n  populationSize: PropTypes.number.isRequired,\n}\n","import { useState } from 'react';\nimport ConfidenceIntervals from './ConfidenceIntervals.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\nimport SimulationIntro from '../SimulationIntro.js';\nimport { InlineMath } from 'react-katex';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\n\nexport default function ConfidenceIntervalsContainer() {\n  const [popShape, setPopType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Confidence Intervals\"\n        text={<>This simulation demonstrates how confidence intervals provide an estimate for the location of the true population mean <InlineMath math=\"\\mu\"/>. In this exercise you will first choose 1) whether to assume that you know the true population standard deviation and 2) what confidence level to impose. Then, you will take random samples from the population, calculation a sample mean for each, and construct confidence intervals around those sample means. The proportion of confidence intervals that contain the true mean corresponds to the chosen confidence level!</>}\n      />\n      <br/>\n      <p>Pick a Population Distribution:</p>\n      <SelectorButtonGroup\n        options={['Normal', 'Uniform', 'Exponential', 'Chi-Squared']}\n        select={setPopType}\n        selected={popShape}\n      />\n      <br/>\n      <br/>\n      {popShape && <ConfidenceIntervals popShape={popShape} populationSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { InlineMath } from 'react-katex';\nimport { hypothesisEqualityType, testTypeType } from '../../lib/types';\n\nexport default function Conclusion({ firstMean, secondMean, equality, reject, testType }) {\n\n  let result;\n  let relation;\n  if ((testType === 'oneSample' && equality === '>') || (testType === 'twoSample' && equality === '<')) {\n    result = firstMean > secondMean;\n    relation = firstMean > secondMean ? 'greater than' : 'less than';\n  } else if ((testType === 'oneSample' && equality === '<') || (testType === 'twoSample' && equality === '>')) {\n    result = firstMean < secondMean;\n    relation = firstMean < secondMean ? 'less than' : 'greater than';\n  } else if (equality === '!=') {\n    result = firstMean !== secondMean;\n    relation = firstMean !== secondMean ? 'not equal to' : 'equal to';\n  }\n\n  return (\n    (testType === 'oneSample') ? (\n      <p>The true mean is {relation} <InlineMath math=\"\\mu_0\"/>. Therefore we should {(result) ? 'reject' : 'fail to reject'} the null hypothesis. Our conclusion above was {(result === reject) ? 'correct' : 'incorrect'}</p>\n    ) : (\n      <p>\n        The second population mean is ${relation} the first population mean. Therefore we should {(result) ? 'reject' : 'fail to reject'} the null hypothesis. Our conclusion above was {(result === reject) ? 'correct' : 'incorrect'}.\n      </p>\n    )\n  )\n}\n\nConclusion.propTypes = {\n  firstMean: PropTypes.number.isRequired,\n  secondMean: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  reject: PropTypes.bool.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { Container, Row, Alert } from 'react-bootstrap';\nimport DotPlot from '../DotPlot.js';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, hypothesisEqualityType, testTypeType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils.js';\nimport { max } from 'mathjs';\nimport Conclusion from './Conclusion.js';\n\nexport default function PopulationChartReveal({ popArr, popArr2, mu0, equality, reject, testType }) {\n  const popMean = populationMean(popArr);\n  const popMean2 = populationMean(popArr2);\n  const popArrMax = (popArr.length > 0) ? max(popArr.map(({ y }) => y)) : 0;\n  const popArr2Max = (popArr2.length > 0) ? max(popArr2.map(({ y }) => y)) : 0;\n  const maxHeight = max(popArrMax, popArr2Max);\n\n  const series = [\n    {\n      name: `Population${(popArr2.length === 0) ? '' : ' 1'}`,\n      data: popArr\n    },\n    {\n      name: 'Population 2',\n      data: popArr2,\n      showInLegend: popArr2.length > 0,\n      visible: popArr2.length > 0,\n      color: '#903C3D',\n      marker: {\n        symbol: 'diamond',\n        radius: 4,\n        lineColor: '#5A2526',\n        lineWidth: 1\n      }\n    },\n    {\n      type: 'line',\n      name: (popArr2.length === 0) ? 'True Population Mean' : 'First Population Mean',\n      data: [{ x: popMean || 0, y: 0 }, { x: popMean || 0, y: maxHeight }],\n      color: 'blue',\n      enableMouseTracking: false,\n      showInLegend: false,\n      label: {\n        format: `<div>${(popArr2.length === 0) ? 'True Population Mean' : 'First Population Mean'}: ${popMean && popMean.toFixed(2)}</div>`\n      }\n    },\n    {\n      type: 'line',\n      name: 'Second Population Mean',\n      data: [{ x: popMean2 || 0, y: 0 }, { x: popMean2 || 0, y: maxHeight }],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: popArr2.length > 0,\n      label: {\n        format: `<div>Second Population Mean: ${popMean2 && popMean2.toFixed(2)}</div>`\n      }\n    },\n    {\n      type: 'line',\n      name: 'Mu_0',\n      data: [{ x: mu0 || 0, y: 0 }, { x: mu0 || 0, y: popArrMax }],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: popArr2.length === 0,\n      label: {\n        format: `<div>Mu_0: ${mu0}</div>`\n      }\n    }\n  ];\n\n  return (\n    <Container>\n      <Row>\n        <Container fluid>\n          <Row>\n            <Alert variant=\"secondary\">\n              We queried the monthly Milk Production of {(popArr2.length > 0) ? 'two populations of' : ''} {popArr.length} cows and plotted the results on the following chart.\n            </Alert>\n          </Row>\n          <Row>\n            <DotPlot\n              series={series}\n              title=\"Milk Production\"\n              xLabel=\"Gallons\"\n            />\n          </Row>\n        </Container>\n      </Row>\n      <Row>\n        <Conclusion\n          firstMean={(testType === 'oneSample') ? popMean : popMean2}\n          secondMean={(testType === 'oneSample') ? mu0 : popMean}\n          equality={equality}\n          reject={reject}\n          testType={testType}\n        />\n      </Row>\n    </Container>\n  )\n}\n\nPopulationChartReveal.propTypes = {\n  popArr: dataObjectArrayType.isRequired,\n  popArr2: dataObjectArrayType.isRequired,\n  mu0: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  reject: PropTypes.bool.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { hypothesisEqualityType, testTypeType } from '../../lib/types.js';\nimport { InlineMath } from 'react-katex';\n\nexport default function ResultsDisplay({ testType, mean, mean2, standardDev, standardDev2, testStatistic, pValue, alpha, equality }) {\n  return (\n    <Alert variant=\"secondary\" >\n      <p>This sample yields the following data:</p>\n      {(testType === 'oneSample') ? (\n        <div>\n          <p>Sample Mean: {_.round(mean, 2)}</p>\n          <p>Sample Standard Deviation: {_.round(standardDev, 2)} </p>\n        </div>\n      ) : (\n        <div>\n          <p>First Sample Mean: {_.round(mean, 2)}</p>\n          <p>Second Sample Mean: {_.round(mean2, 2)}</p>\n          <p>First Sample Standard Deviation: {_.round(standardDev, 2)} </p>\n          <p>Second Sample Standard Deviation: {_.round(standardDev2, 2)} </p>\n        </div>\n      )}\n      <p>The test statistic is {_.round(testStatistic, 2)}</p>\n      <p>\n        This test statistic yields a p-value of <InlineMath math={`P(Z ${(equality === '!=') ? '>' : equality} ${(equality === '!=') ? '|test\\\\ stat|' : 'test\\\\ stat'}) = ${pValue.toPrecision(3)}`}/>.\n      </p>\n      <p>Therefore we {(pValue < alpha) ? 'reject' : 'fail to reject'} the null hypothesis. </p>\n    </Alert>\n  )\n}\n\nResultsDisplay.propTypes = {\n  testType: testTypeType.isRequired,\n  mean: PropTypes.number.isRequired,\n  mean2: PropTypes.number,\n  standardDev: PropTypes.number.isRequired,\n  standardDev2: PropTypes.number,\n  testStatistic: PropTypes.number.isRequired,\n  pValue: PropTypes.number.isRequired,\n  alpha: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired\n}\n","import PropTypes from 'prop-types';\nimport { Row, Col, InputGroup, Form } from 'react-bootstrap';\nimport { stringOrNumberType } from '../../lib/types';\n\nexport default function SampleSizeAlphaInputs({ sampleSize, setSampleSize, alpha, setAlpha, popSize, sampleSize2, setSampleSize2, showSecondInput }) {\n  return (\n    <Row sm=\"1\" md={showSecondInput ? 1 : 2} lg=\"2\">\n      <Col>\n        <InputGroup>\n          <InputGroup.Text>{showSecondInput ? 'First' : ''} Sample Size</InputGroup.Text>\n          <Form.Control\n            type=\"number\"\n            step={1}\n            value={sampleSize}\n            min={1}\n            max={popSize}\n            onChange={(event) => setSampleSize(event.target.value)}\n          />\n        </InputGroup>\n        {showSecondInput && (\n          <InputGroup>\n            <InputGroup.Text>Second Sample Size</InputGroup.Text>\n            <Form.Control\n              type=\"number\"\n              step={1}\n              value={sampleSize2}\n              min={1}\n              max={popSize}\n              onChange={(event) => setSampleSize2(event.target.value)}\n            />\n          </InputGroup>\n        )}\n      </Col>\n      <Col>\n        <InputGroup>\n          <InputGroup.Text>Alpha</InputGroup.Text>\n          <Form.Control\n            type=\"number\"\n            step={0.01}\n            value={alpha}\n            min={0}\n            max={1}\n            onChange={(event) => setAlpha(event.target.value)}\n          />\n        </InputGroup>\n      </Col>\n    </Row>\n  )\n}\n\nSampleSizeAlphaInputs.propTypes = {\n  sampleSize: stringOrNumberType.isRequired,\n  sampleSize2: stringOrNumberType.isRequired,\n  setSampleSize: PropTypes.func.isRequired,\n  setSampleSize2: PropTypes.func.isRequired,\n  alpha: stringOrNumberType.isRequired,\n  setAlpha: PropTypes.func.isRequired,\n  popSize: PropTypes.number.isRequired,\n  showSecondInput: PropTypes.bool.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport { distributionType, hypothesisTestingSampleArrayType, testTypeType } from '../../lib/types';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { dataFromDistribution } from '../../lib/stats-utils';\nimport { sqrt } from 'mathjs';\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nexport default function NormalCurve({ means, mu0, popStandardDev, sampleSize, distType, testType }) {\n  // use a placeholder population to draw the bell curve in the plot\n  const [population, setPopulation] = useState(\n    dataFromDistribution(\n      'Normal', 2000, { mean: (testType === 'oneSample') ? mu0 : 0, standardDev: popStandardDev / sqrt(sampleSize) }\n    )\n  );\n\n  const [chart, setChart] = useState({\n    chart: {\n      zoomType: 'xy'\n    },\n    plotOptions: {\n      series: {\n        animation: {\n          duration: 100,\n          easing: 'easeOutBounce'\n        },\n      }\n    },\n    title: {\n      text: 'Sample Means'\n    },\n    xAxis: {\n      title: {\n        text: 'Gallons',\n      },\n      startOnTick: true,\n      endOnTick: true\n    },\n    yAxis: [{  // Primary yAxis\n      allowDecimals: false,\n      min: 0,\n      title: {\n        text: 'Observations of Sample Mean'\n      }\n    }, {  // Secondary yAxis for bell curve\n      visible: false\n    }],\n    tooltip: {\n      pointFormat: `${(testType === 'oneSample') ? 'sample mean' : 'difference of means'}: <b>{point.mean}</b><br/>test statistic: <b>{point.testStatistic}</b><br/>reject H_0: <b>{point.reject}</b></br>`\n    }\n  });\n\n  useEffect(() => {\n    setPopulation(\n      dataFromDistribution(\n        'Normal', 2000, { mean: (testType === 'oneSample') ? mu0 : 0, standardDev: popStandardDev / sqrt(sampleSize) }\n      )\n    )\n  }, [mu0, popStandardDev, sampleSize, testType]);\n\n  useEffect(() => {\n    const meanCounts = {};\n    const rejects = [];\n    const accepts = [];\n    means.forEach(({ testStatistic, mean, reject }) => {\n      meanCounts[mean] = _.defaultTo(meanCounts[mean] + 1, 1);\n      const meanObject = {\n        x: mean,\n        y: meanCounts[mean],\n        testStatistic,\n        mean,\n        reject,\n      }\n      if (reject) {\n        rejects.push(meanObject)\n      } else {\n        accepts.push(meanObject)\n      }\n    });\n\n    const newChart = {\n      series: [\n        {\n          name: 'Normal Distribution',\n          type: 'bellcurve',\n          baseSeries: 1,\n          zIndex: -1,\n          enableMouseTracking: false,\n          label: false,\n          showInLegend: false,\n          visible: !(distType === 'T'),\n          yAxis: 1\n        },\n        {\n          name: 'Data',\n          type: 'scatter',\n          data: population.map(({ x }) => x),\n          visible: false,\n          showInLegend: false\n        },\n        {\n          name: 'Fail to Reject H_0',\n          type: 'scatter',\n          data: accepts,\n          color: '#03fc0b',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: 'green',\n            lineWidth: 1\n          }\n        },\n        {\n          name: 'Reject H_0',\n          type: 'scatter',\n          data: rejects,\n          color: 'red',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: '#800000',\n            lineWidth: 1\n          }\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [means, population, sampleSize, distType]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nNormalCurve.propTypes = {\n  means: hypothesisTestingSampleArrayType.isRequired,\n  mu0: PropTypes.number.isRequired,\n  popStandardDev: PropTypes.number.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n  distType: distributionType.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { useState } from 'react';\nimport { Button, Form, Alert, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function ManySamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <Alert variant=\"primary\" style={{ width: '50%', margin: 'auto' }}>\n        Simulate drawing many many samples\n      </Alert>\n      <br/>\n      <span> Sample Size: </span>\n      <InputGroup className=\"sample-size-input\" style={{ width: '40%', margin: 'auto' }}>\n        <Form.Control\n          align=\"right\"\n          type=\"number\"\n          placeholder=\"Sample Size:\"\n          min={1}\n          value={resampleSize}\n          onChange={(event) => setResampleSize(event.target.value)}\n        />\n        <Button\n          variant=\"secondary\"\n          disabled={!resampleSize || resampleSize > populationSize || resampleSize < 1}\n          onClick={() => addSamples(+resampleSize, 1, false)}\n        >\n          Sample Once\n        </Button>\n      </InputGroup>\n      <br/>\n      <span> Number of Replications: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        variant=\"secondary\"\n        onClick={() => addSamples(resampleSize, numberResamples, true)}\n        disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button variant=\"secondary\" onClick={() => addSamples(0, 0, true)}>Clear</Button>\n    </div>\n  );\n}\n\nManySamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport { distributionType, hypothesisTestingSampleArrayType, testTypeType } from '../../lib/types';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { dataFromDistribution } from '../../lib/stats-utils';\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nexport default function StdNormalCurve({ means, sampleSize, distType, testType }) {\n  // use a placeholder population to draw the bell curve in the plot\n  const [population] = useState(\n    dataFromDistribution('Normal', 2000, { mean: 0, standardDev: 1 })\n  );\n\n  const [chart, setChart] = useState({\n    chart: {\n      zoomType: 'xy'\n    },\n    plotOptions: {\n      series: {\n        animation: {\n          duration: 100,\n          easing: 'easeOutBounce'\n        },\n      }\n    },\n    title: {\n      text: 'Sample Means'\n    },\n    xAxis: {\n      title: {\n        text: 'Test Statistic',\n      },\n      startOnTick: true,\n      endOnTick: true\n    },\n    yAxis: [{  // Primary yAxis\n      allowDecimals: false,\n      min: 0,\n      title: {\n        text: 'Observations of Test Statistic'\n      }\n    }, {  // Secondary yAxis for bell curve\n      visible: false\n    }],\n    tooltip: {\n      pointFormat: `test statistic: <b>{point.testStatistic}</b><br/>${(testType === 'oneSample') ? 'sample mean' : 'difference of means'}: <b>{point.mean}</b><br/>reject H_0: <b>{point.reject}</b></br>`\n    }\n  });\n\n  useEffect(() => {\n    const meanCounts = {};\n    const rejects = [];\n    const accepts = [];\n    means.forEach(({ testStatistic, mean, reject }) => {\n      meanCounts[mean] = _.defaultTo(meanCounts[mean] + 1, 1);\n      const meanObject = {\n        x: testStatistic,\n        y: meanCounts[mean],\n        testStatistic,\n        mean,\n        reject,\n      }\n      if (reject) {\n        rejects.push(meanObject)\n      } else {\n        accepts.push(meanObject)\n      }\n    });\n\n    const newChart = {\n      series: [\n        {\n          name: 'Normal Distribution',\n          type: 'bellcurve',\n          baseSeries: 1,\n          zIndex: -1,\n          enableMouseTracking: false,\n          label: false,\n          showInLegend: false,\n          visible: !(distType === 'T'),\n          yAxis: 1\n        },\n        {\n          name: 'Data',\n          type: 'scatter',\n          data: population.map(({ x }) => x),\n          visible: false,\n          showInLegend: false\n        },\n        {\n          name: 'Fail to Reject H_0',\n          type: 'scatter',\n          data: accepts,\n          color: '#03fc0b',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: 'green',\n            lineWidth: 1\n          }\n        },\n        {\n          name: 'Reject H_0',\n          type: 'scatter',\n          data: rejects,\n          color: 'red',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: '#800000',\n            lineWidth: 1\n          }\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [means, population, sampleSize, distType]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nStdNormalCurve.propTypes = {\n  means: hypothesisTestingSampleArrayType.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n  distType: distributionType.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport DotPlot from '../DotPlot.js';\nimport NormalCurve from './NormalCurve.js';\nimport ManySamplesInput from './ManySamplesInput.js';\nimport { Container, Row, Col, Alert, Form } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { distributionType, hypothesisEqualityType, popShapeType, testTypeType } from '../../lib/types.js';\nimport StdNormalCurve from './StdNormalCurve.js';\nimport { random } from 'mathjs';\nimport {\n  calculateOneSampleTestStatistic,\n  calculatePValue,\n  calculateTwoSampleTestStatistic,\n  dataFromDistribution,\n  populationMean,\n  populationStandardDev\n} from '../../lib/stats-utils';\n\nexport default function SimulateTypeOneError({ popShape, mu0, alpha, distType, sides, equality, testType, sd1, sd2 }) {\n  const [population, setPopulation] = useState([]);\n  const [population2, setPopulation2] = useState([]);\n  const [sampleMeans, setSampleMeans] = useState([]);\n  const [sampleSize, setSampleSize] = useState(0);\n  const [standardized, setStandardized] = useState(false);\n\n  useEffect(() => {\n    setPopulation(dataFromDistribution(\n      popShape,\n      2000,\n      {\n        mean: mu0,\n        standardDev: sd1,\n        low: mu0 - 10,\n        hi: mu0 + 10,\n        mysteryMean1: mu0 - 6,\n        mysteryMean2: mu0 + 6,\n        mysterySD1: random(1, 4),\n        mysterySD2: random(1, 4)\n      }\n    ))\n    if (testType === 'twoSample') {\n      setPopulation2(dataFromDistribution(\n        popShape,\n        2000,\n        {\n          mean: mu0,\n          standardDev: sd2,\n          low: mu0 - 10,\n          hi: mu0 + 10,\n          mysteryMean1: mu0 - 6,\n          mysteryMean2: mu0 + 6,\n          mysterySD1: random(1, 4),\n          mysterySD2: random(1, 4)\n        }\n      ))\n    }\n  }, [mu0, popShape, testType, sd1, sd2]);\n\n  const addSamples = (size, replications, clear) => {\n    const means = [];\n    for (let i = 0; i < replications; i++) {\n      const sample = _.sampleSize(population, size);\n      const sampleMean = populationMean(sample);\n\n      // these are only used in the two-sample case\n      const sample2 = (testType === 'twoSample') ? _.sampleSize(population2, size) : [];\n      const sampleMean2 = populationMean(sample2);\n\n      const testStatistic = (testType === 'oneSample')\n        ? calculateOneSampleTestStatistic(\n          distType,\n          sampleMean,\n          mu0,\n          populationStandardDev((distType === 'Z') ? population : sample),\n          size\n        )\n        : calculateTwoSampleTestStatistic(\n          sampleMean,\n          sampleMean2,\n          populationStandardDev((distType === 'Z') ? population : sample),\n          populationStandardDev((distType === 'Z') ? population2 : sample2),\n          size,\n          size\n        );\n\n      const pValue = calculatePValue(distType, testStatistic, equality, size, sides);\n\n      const sampleObject = {\n        testStatistic: _.round(testStatistic, 2),\n        mean: (testType === 'oneSample') ? _.round(sampleMean, 2) : _.round(sampleMean - sampleMean2, 2),\n        reject: !(((equality === '<') && (testStatistic > 0)) || ((equality === '>') && (testStatistic < 0))) && pValue <= alpha\n      };\n\n      means.push(sampleObject);\n    }\n    const newSampleMeans = clear ? means : [...sampleMeans, ...means];\n    setSampleMeans(newSampleMeans);\n    setSampleSize(size);\n  }\n\n  const dotPlotSeries = [\n    {\n      name: `Population${(testType === 'twoSample') ? ' 1' : ''}`,\n      data: population,\n    },\n    {\n      name: 'Population 2',\n      data: population2,\n      color: '#903C3D',\n      marker: {\n        symbol: 'diamond',\n        radius: 4,\n        lineColor: '#5A2526',\n        lineWidth: 1\n      }\n    }\n  ]\n\n  return (\n    <Container>\n      <Alert variant=\"primary\" style={{ marginTop: 50, marginBottom: 50 }}>\n        Now we simulate Type I error. In other words, if the true mean were actually {mu0.toPrecision(2)}, how often would we (incorrectly) reject the null hypothesis?\n      </Alert>\n      <Row>\n        <Col>\n          <DotPlot series={dotPlotSeries} title={`Population${(testType === 'twoSample') ? 's' : ''}`} xLabel=\"Gallons\"/>\n        </Col>\n        <Col>\n          {!standardized ? (\n            <NormalCurve\n              means={sampleMeans}\n              mu0={mu0}\n              popStandardDev={_.defaultTo(populationStandardDev(population), 0)}\n              sampleSize={+sampleSize || 1}\n              distType={distType}\n              testType={testType}\n            />\n          ) : (\n            <StdNormalCurve\n              means={sampleMeans}\n              sampleSize={+sampleSize || 1}\n              distType={distType}\n              testType={testType}\n            />\n          )}\n          <Form.Check\n            checked={standardized}\n            inline\n            className=\"form-switch\"\n            label=\"Convert to Standard Normal\"\n            onChange={() => setStandardized(!standardized)}\n          />\n        </Col>\n      </Row>\n      <ManySamplesInput populationSize={population.length} addSamples={addSamples}/>\n      {(sampleMeans.length > 0) && (\n        <Alert variant=\"info\">\n          Out of {sampleMeans.length} samples, we rejected the null hypothesis {sampleMeans.filter(({ reject }) => reject).length} times ({_.round(100 * sampleMeans.filter(({ reject }) => reject).length / sampleMeans.length, 2)}%).\n        </Alert>\n      )}\n    </Container>\n  )\n}\n\nSimulateTypeOneError.propTypes = {\n  popShape: popShapeType.isRequired,\n  mu0: PropTypes.number.isRequired,\n  alpha: PropTypes.number.isRequired,\n  distType: distributionType.isRequired,\n  sides: PropTypes.oneOf([1, 2]).isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  testType: testTypeType.isRequired,\n  sd1: PropTypes.number.isRequired,\n  sd2: PropTypes.number\n}\n","import { useEffect, useState } from 'react';\nimport { random } from 'mathjs';\nimport { Button, Container, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport PopulationChartReveal from './PopulationChartReveal.js';\nimport _ from 'lodash';\nimport ResultsDisplay from './ResultsDisplay.js';\nimport SampleSizeAlphaInputs from './SampleSizeAlphaInput.js';\nimport SimulateTypeOneError from './SimulateTypeOneError.js';\nimport { hypothesisEqualityType, popShapeType, testTypeType } from '../../lib/types.js';\nimport {\n  calculateOneSampleTestStatistic,\n  calculatePValue,\n  calculateTwoSampleTestStatistic,\n  dataFromDistribution,\n  populationMean,\n  populationStandardDev\n} from '../../lib/stats-utils.js';\n\nexport default function PerformTest({ distType, shape, sides, mu0, equality, testType }) {\n  const [popArr, setPopArr] = useState([]);\n  const [sample, setSample] = useState([]);\n  const [sampleSize, setSampleSize] = useState(0);\n  const [alpha, setAlpha] = useState(0);\n  const [stage, setStage] = useState(0);\n\n  // in the two-sample case, 'popArr' becomes the '2nd' population, and we use 'originalPop' as the first population\n  // see the ResultsDisplay component for an example of this\n  const [originalPop, setOriginalPop] = useState([]);\n  const [originalPopSample, setOriginalPopSample] = useState([]);\n  const [originalPopSampleSize, setOriginalPopSampleSize] = useState(0);\n\n  useEffect(() => {\n    if (stage === 3) {\n      setStage(2)\n    }\n  }, [mu0, equality]);  // eslint-disable-line\n\n  useEffect(() => {\n    const popMean1 = random(61, 66);\n    const sd1 = random(1, 4);\n    setPopArr(dataFromDistribution(\n      shape,\n      2000,\n      {\n        mean: popMean1,\n        standardDev: sd1,\n        low: popMean1 - 10,\n        hi: popMean1 + 10,\n        mysteryMean1: popMean1 - 6,\n        mysteryMean2: popMean1 + 6,\n        mysterySD1: sd1 - 1,\n        mysterySD2: sd1 + 1\n      }\n    ));\n    if (testType === 'twoSample') {\n      setOriginalPop(dataFromDistribution(shape, 2000, { low: 54, hi: 74 }));\n    } else {\n      setOriginalPop([]);\n    }\n  }, [shape, testType]);\n\n  const takeSample = () => {\n    setSample(_.sampleSize(popArr, sampleSize));\n    if (stage === 0) {\n      setStage(1);\n    }\n    if (testType === 'twoSample') {\n      setOriginalPopSample(_.sampleSize(originalPop, originalPopSampleSize))\n    }\n  }\n\n  const sampleMean = populationMean(sample);\n  const sampleSD = populationStandardDev(sample);\n  const populationSD = populationStandardDev(popArr);\n\n  // for the two-sample case\n  const originalSampleMean = populationMean(originalPopSample);\n  const originalSampleSD = populationStandardDev(originalPopSample);\n  const originalPopSD = populationStandardDev(originalPop);\n\n  // use the population or sample sd based on the distribution type (Z or T)\n  const oneSampleSD = (distType === 'Z') ? populationSD : sampleSD;\n  const twoSampleSD1 = (distType === 'Z') ? originalPopSD : originalSampleSD;\n  const twoSampleSD2 = (distType === 'Z') ? originalPopSD : sampleSD;\n\n  const testStatistic = (testType === 'oneSample')\n    ? calculateOneSampleTestStatistic(distType, sampleMean, mu0, oneSampleSD, sampleSize)\n    : calculateTwoSampleTestStatistic(\n        originalSampleMean,\n        sampleMean,\n        twoSampleSD1,\n        twoSampleSD2,\n        originalPopSampleSize,\n        sampleSize\n      );\n\n  const pValue = calculatePValue(distType, testStatistic, equality, sampleSize, sides);\n\n  return (\n    <Container fluid>\n      <p>Let’s test your assertion by taking a sample and setting our tolerance for making a type-one error α!</p>\n      <SampleSizeAlphaInputs\n        sampleSize={sampleSize}\n        setSampleSize={setSampleSize}\n        alpha={alpha}\n        setAlpha={setAlpha}\n        popSize={popArr.length}\n        sampleSize2={originalPopSampleSize}\n        setSampleSize2={setOriginalPopSampleSize}\n        showSecondInput={testType === 'twoSample'}\n      />\n      <br/>\n      <Button\n        variant=\"outline-primary\"\n        active={stage >= 1}\n        disabled={\n          (sampleSize <= 0) ||\n          (sampleSize > popArr.length) ||\n          ((testType === 'twoSample') && ((originalPopSampleSize <= 0) || (originalPopSampleSize > originalPop.length)))\n        }\n        onClick={() => takeSample()}\n      >\n        Sample\n      </Button>\n      <br/>\n      <br/>\n      {(stage >= 1) && (\n        <Container>\n          <ResultsDisplay\n            testType={testType}\n            // note how we use the 'original' mean in the two-sample case but the 'regular' mean in the one-sample case\n            mean={(testType === 'twoSample') ? originalSampleMean : sampleMean}\n            mean2={sampleMean}  // mean2 has no effect in the one-sample case\n            standardDev={(testType === 'twoSample') ? originalSampleSD : sampleSD}\n            standardDev2={sampleSD}\n            testStatistic={testStatistic}\n            pValue={pValue}\n            alpha={+alpha}\n            equality={equality}\n          />\n          <br/>\n          <Row>\n            <p>\n              Press here to reveal the true population distribution and mean.&nbsp;\n              <Button active={stage >= 2} variant=\"outline-primary\" onClick={() => setStage(2)}>Reveal</Button>\n            </p>\n          </Row>\n        </Container>\n      )}\n      <br/>\n      {(stage >= 2) && (\n        <div>\n          <PopulationChartReveal\n            popArr={(testType === 'twoSample') ? originalPop : popArr}\n            popArr2={(testType === 'twoSample') ? popArr : []}\n            mu0={+mu0}\n            equality={equality}\n            reject={pValue < alpha}\n            testType={testType}\n          />\n          <Button variant=\"outline-primary\" active={stage >= 3} onClick={() => setStage(3)}>Simulate Type I Error</Button>\n        </div>\n      )}\n      {(stage >= 3) && (\n        <SimulateTypeOneError\n          popShape={shape}\n          mu0={(testType === 'twoSample') ? populationMean(popArr) : +mu0}\n          alpha={+alpha}\n          distType={distType}\n          sides={sides}\n          equality={equality}\n          testType={testType}\n          sd1={(testType === 'twoSample') ? originalPopSD : populationSD}\n          sd2={populationSD}\n        />\n      )}\n    </Container>\n  )\n}\n\nPerformTest.propTypes = {\n  distType: PropTypes.string.isRequired,\n  shape: popShapeType.isRequired,\n  sides: PropTypes.oneOf([1, 2]).isRequired,\n  mu0: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  testType: testTypeType.isRequired\n}\n","import SelectorButtonGroup from '../SelectorButtonGroup';\nimport { Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { distributionType } from '../../lib/types.js';\nimport { InlineMath } from 'react-katex';\n\nexport default function TestInputs({ setDistType, distType, testType, setTestType, popShape, setPopType }) {\n  return (\n    <div style={{ padding: 20 }}>\n      <Row style={{ padding: 10 }}>\n        <div>\n          Do you want to assume that you know <InlineMath math=\"\\sigma\"/>? If yes, choose Z. If no, choose T: {' '}\n          <SelectorButtonGroup options={['Z', 'T']} select={setDistType} selected={distType}/>\n        </div>\n      </Row>\n      <Row style={{ padding: 10 }}>\n        <div>\n          Choose a kind of hypothesis test: {' '}\n          <SelectorButtonGroup options={['oneSample', 'twoSample']} select={setTestType} selected={testType}/>\n        </div>\n      </Row>\n      <Row style={{ padding: 10 }}>\n        <div>\n          <div style={{ paddingBottom: 10 }}>Choose a population distribution shape:</div>\n          <SelectorButtonGroup options={['Normal', 'Uniform', 'Mystery', '??Unknown??']} select={setPopType} selected={popShape}/>\n        </div>\n      </Row>\n    </div>\n  )\n}\n\nTestInputs.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setTestType: PropTypes.func.isRequired,\n  popShape: PropTypes.string.isRequired,\n  setPopType: PropTypes.func.isRequired,\n  setDistType: PropTypes.func.isRequired,\n  distType: distributionType.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownButton, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport { HYPOTHESIS_OPTIONS } from '../../lib/constants';\nimport { stringOrNumberType } from '../../lib/types';\n\nexport default function HypothesisSelector({ testType, setHypothesis, mu0, setMu0 }) {\n  const [selected, setSelected] = useState(HYPOTHESIS_OPTIONS[testType][0].hypoText);\n\n  useEffect(() => {\n    setSelected(HYPOTHESIS_OPTIONS[testType][0].hypoText)\n    setHypothesis(HYPOTHESIS_OPTIONS[testType][0])\n  }, [testType, setHypothesis])\n\n  const selectOption = (option) => {\n    setHypothesis(option);\n    setSelected(option.hypoText)\n  }\n\n  const menuOptions = HYPOTHESIS_OPTIONS[testType].map((obj) =>\n    <Dropdown.Item onClick={() => selectOption(obj)} key={obj.hypoText}>{obj.hypoText}</Dropdown.Item>\n  );\n\n  return (\n    <InputGroup>\n      <DropdownButton variant=\"secondary\" title={selected}>\n        {menuOptions}\n      </DropdownButton>\n      {(testType === 'oneSample') && (\n        <>\n          <Form.Control\n            type=\"number\"\n            value={mu0}\n            step={1}\n            min={1}\n            max={1000}\n            onChange={(event) => setMu0(event.target.value)}\n          />\n          <InputGroup.Text>gallons of milk per day.</InputGroup.Text>\n        </>\n      )}\n    </InputGroup>\n  )\n}\n\nHypothesisSelector.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setHypothesis: PropTypes.func.isRequired,\n  mu0: stringOrNumberType.isRequired,\n  setMu0: PropTypes.func.isRequired\n}\n","import { useEffect, useState } from 'react';\nimport PerformTest from './PerformTest.js';\nimport { Alert, Container, Row, Button } from 'react-bootstrap';\nimport TestInputs from './TestInputs.js';\nimport HypothesisSelector from './HypothesisSelector.js';\nimport _ from 'lodash';\n\nexport default function HypothesisTesting() {\n  const [popShape, setPopShape] = useState('');\n  const [testType, setTestType] = useState('');\n  const [hypothesis, setHypothesis] = useState();\n  const [mu0, setMu0] = useState(64);\n  const [stage, setStage] = useState(1);\n  const [distType, setDistType] = useState('Z'); // can be \"Z\" or \"T\"\n\n  useEffect(() => {\n    if ((popShape !== '') && (testType !== '')) {\n      setStage(2)\n    }\n  }, [popShape, testType, distType]);\n\n  return (\n    <div className=\"module-container\">\n      <TestInputs\n        testType={testType}\n        setDistType={setDistType}\n        distType={distType}\n        setTestType={setTestType}\n        popShape={popShape}\n        setPopType={setPopShape}\n      />\n      {(stage >= 2) && (\n        <Container fluid>\n          <Row>\n            <Alert variant=\"secondary\">\n              <p>The true population distribution will be revealed at the end.</p>\n              {(testType === 'oneSample') ? (\n                <p>\n                  Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Choose an Option and specify a hypothesized amount. To help make an informed guess, note that the distribution of milk production before we changed the feed had a mean of about 64 gallons\n                </p>\n              ) : (\n                <p>\n                  Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Let Population 1 denote the cows before the feed change and Population 2 denote the cows after the change. Choose an Option below.\n                </p>\n              )}\n            </Alert>\n          </Row>\n          <br/>\n          <Row style={{ width: '95%', margin: 'auto' }}>\n            <HypothesisSelector testType={testType} setHypothesis={setHypothesis} mu0={mu0} setMu0={setMu0}/>\n          </Row>\n          <br/>\n          <Button\n            variant=\"outline-primary\"\n            onClick={() => setStage(3)}\n            active={stage >= 3}\n          >\n            Continue\n          </Button>\n          <br/>\n          <br/>\n          {(stage >= 3) && (\n            <Container>\n              <Row>\n                <Alert variant=\"secondary\" >\n                  <p>This means our null and alternative hypotheses are given by:</p>\n                  <p>{hypothesis.nullH} {(testType === 'oneSample') && mu0}</p>\n                  <p>{hypothesis.alterH} {(testType === 'oneSample') && mu0}</p>\n                </Alert>\n              </Row>\n              <br/>\n              <Row>\n                <PerformTest\n                  distType={distType}\n                  shape={(popShape === '??Unknown??') ? _.sample(['Normal', 'Uniform', 'Mystery']) : popShape}\n                  sides={hypothesis.sides}\n                  mu0={+mu0}\n                  equality={hypothesis.type}\n                  testType={testType}\n                />\n              </Row>\n            </Container>\n          )}\n        </Container>\n      )}\n    </div>\n  )\n}\n","import SimulationIntro from '../SimulationIntro.js';\nimport HypothesisTesting from './HypothesisTesting.js';\n\nexport default function HypothesisTestingContainer() {\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Hypothesis Testing\"\n        text=\"When we conduct a test of hypotheses, we use the information provided by a sample to make a conclusion about population parameters that we cannot directly observe. We are able to make a connection between the sample and the population by using the rules that govern probability distributions. Due to the central limit theorem, we can make a variety of assertions about the probable location of points in a distribution, which allows us to make assertions about where population parameters might be located relative to the data we have collected from a sample. This allows us to test hypotheses.\"\n      />\n      <br/>\n      <HypothesisTesting/>\n    </div>\n  )\n}\n","import { Container, Row, Col, Alert } from 'react-bootstrap';\nimport ScatterPlot from '../ScatterPlot.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport _ from 'lodash';\nimport { dataObjectArrayType, olsSampleType } from '../../lib/types.js';\nimport PropTypes from 'prop-types';\nimport 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';\nimport { OLSE_VALUES } from '../../lib/constants.js';\nimport DataTable from '../DataTable.js';\n\nexport default function PopulationAndSampleCharts({ data, addSamples, selected, samples, selectSample, regressorType }) {\n  const sample = selected || { data: [] };\n\n  const tooltipFormat = (regressorType === 'Binary') ? {\n    headerFormat: '',\n    pointFormat: '<div><strong>{point.category}</strong><br/><strong>${point.y}</strong><br/></div>'\n  } : undefined;\n\n  const mainSeries = [\n    {\n      name: 'data',\n      data,\n      tooltip: tooltipFormat\n    },\n    {\n      name: 'sample',\n      data: sample.data,\n      tooltip: tooltipFormat\n    }\n  ];\n\n  const sampleSeries = [\n    {\n      name: 'best fit line',\n      type: 'line',\n      data: [{ x: 0 }, { x: OLSE_VALUES[regressorType].xMax }, ...sample.data].map((point) => (\n        { x: point.x, y: _.round((point.x * sample.slope) + sample.intercept, 2) }\n      )),\n      label: false,\n      marker: false,\n      showInLegend: sample.data.length > 0,\n      enableMouseTracking: false,\n      color: 'black',\n    },\n    {\n      name: 'sample',\n      data: sample.data,\n      color: 'orange',\n      marker: {\n        lineWidth: 1,\n        lineColor: 'orange'\n      },\n      tooltip: tooltipFormat\n    },\n\n    // add a new series for each 'grayed-out' line\n    // couldn't figure out how to add multiple lines to one series, so this makes it slower with more replications\n    ...samples.filter((sample) => sample !== selected).map(({ data, slope, intercept, id }) => ({\n      name: `Sample ${id}`,\n      type: 'line',\n      data: [{ x: 0 }, { x: OLSE_VALUES[regressorType].xMax }, ...data].map((point) => (\n        { x: point.x, y: (point.x * slope) + intercept }\n      )),\n      color: '#dddddd',\n      animation: false,\n      label: false,\n      marker: false,\n      showInLegend: false,\n      enableMouseTracking: false,\n      zIndex: -5,\n      states: {\n        hover: {\n          enabled: false\n        },\n        inactive: {\n          enabled: false\n        }\n      }\n    }))\n  ];\n\n  return (\n    <Container>\n      <Row>\n        <Col lg={{ span: 12, offset: 0 }} xl={{ span: 8, offset: 2 }}>\n          <ScatterPlot\n            series={mainSeries}\n            title=\"Population\"\n            xMin={OLSE_VALUES[regressorType].xMin}\n            xMax={OLSE_VALUES[regressorType].xMax}\n            yMin={OLSE_VALUES[regressorType].yMin}\n            yMax={OLSE_VALUES[regressorType].yMax}\n            xLabel={OLSE_VALUES[regressorType].xLabel}\n            yLabel={OLSE_VALUES[regressorType].yLabel}\n            height=\"75%\"\n            xCategories={OLSE_VALUES[regressorType].xCategories}\n            yTickInterval={OLSE_VALUES[regressorType].yTickInterval}\n          />\n        </Col>\n      </Row>\n      <br/>\n      <Row md={1} lg={2}>\n        <Col>\n          <Alert variant=\"primary\">\n            <p>Try drawing some samples and observe the line of best fit on the graph</p>\n            <SampleSizeInput maxSize={data.length} minSize={2} handleClick={addSamples} classname=\"sample-size-input\"/>\n          </Alert>\n          <DataTable\n            data={samples}\n            headers={{\n              'Sample': 'id',\n              'Size': 'size',\n              'Slope': 'slope',\n              'Intercept': 'intercept'\n            }}\n            setSelected={selectSample}\n            setRowColor={(object) => (selected && (object.id === selected.id)) ? '#747EF2' : undefined}\n          />\n        </Col>\n        <Col>\n          <div style={{ marginLeft: '20%' }}>\n            <BlockMath math={`\\\\widehat{${(regressorType === 'Continuous') ? 'Test\\\\ Score' : 'Earnings'}}_i = \\\\hat{\\\\beta}_0 + \\\\hat{\\\\beta}_1{${(regressorType === 'Continuous') ? 'Study\\\\ Hours' : 'Job\\\\ Corps'}_i}`}/>\n            {selected && (\n              <BlockMath math={`\\\\widehat{${(regressorType === 'Continuous') ? 'Test\\\\ Score' : 'Earnings'}}_i = ${selected.intercept} + ${selected.slope}{${(regressorType === 'Continuous') ? 'Study\\\\ Hours' : 'Job\\\\ Corps'}_i}`}/>\n            )}\n          </div>\n          <ScatterPlot\n            series={sampleSeries}\n            xMin={OLSE_VALUES[regressorType].xMin}\n            xMax={OLSE_VALUES[regressorType].xMax}\n            yMin={OLSE_VALUES[regressorType].yMin}\n            yMax={OLSE_VALUES[regressorType].yMax}\n            xLabel={OLSE_VALUES[regressorType].xLabel}\n            yLabel={OLSE_VALUES[regressorType].yLabel}\n            xCategories={OLSE_VALUES[regressorType].xCategories}\n            yTickInterval={OLSE_VALUES[regressorType].yTickInterval}\n          />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nPopulationAndSampleCharts.propTypes = {\n  data: dataObjectArrayType.isRequired,\n  addSamples: PropTypes.func.isRequired,\n  selected: olsSampleType,\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  selectSample: PropTypes.func.isRequired,\n  regressorType: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport { dataFromDistribution } from '../../lib/stats-utils';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types';\nimport { max } from 'mathjs';\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nexport default function StandardNormalOLS({ seriesName, data }) {\n  const [chart, setChart] = useState({});\n  const [population] = useState(dataFromDistribution('Normal', 2000, { mean: 0, standardDev: 1 }));\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        animation: false,\n      },\n      title: {\n        text: `Distribution of Sample ${seriesName}`\n      },\n      xAxis: {\n        title: {\n          text: 'Standard Deviations',\n        },\n        startOnTick: true,\n        endOnTick: true\n      },\n      yAxis: [{  // Primary yAxis\n        startOnTick: true,\n        endOnTick: true,\n        min: 0,\n        max: max(4, ...data.map(({ y }) => y)),\n        allowDecimals: false,\n        title: {\n          text: `Observation of Sample ${seriesName.slice(0, -1)}`\n        }\n      }, {  // Secondary yAxis for bell curve\n        visible: false\n      }],\n      series: [\n        {\n          name: 'Normal Distribution',\n          type: 'bellcurve',\n          baseSeries: 1,\n          zIndex: -1,\n          enableMouseTracking: false,\n          label: false,\n          showInLegend: false,\n          yAxis: 1\n        },\n        {\n          name: 'Data',\n          type: 'scatter',\n          data: population.map(({ x }) => x),\n          visible: false,\n          showInLegend: false\n        },\n        {\n          name: seriesName,\n          data,\n          showInLegend: false,\n          color: 'red',\n          marker: {\n            symbol: 'circle'\n          },\n          tooltip: {\n            pointFormat: `${seriesName}: <b>{point.x}</b><br/>`\n          },\n        }\n      ]\n    }\n    setChart(newChart);\n\n  }, [seriesName, data, population]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nStandardNormalOLS.propTypes = {\n  seriesName: PropTypes.string.isRequired,\n  data: dataObjectArrayType.isRequired\n}\n","import DotPlot from '../DotPlot.js';\nimport { max, min } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { olsSampleType } from '../../lib/types.js';\nimport { convertToStandardNormal, getCounts, populationMean, populationStandardDev } from '../../lib/stats-utils.js';\nimport { Form } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport { OLSE_VALUES } from '../../lib/constants.js';\nimport _ from 'lodash';\nimport StandardNormalOLS from './StandardNormalOLS.js';\n\nexport default function SlopeDistributionPlot({ samples, regressorType }) {\n  const [standardized, setStandardized] = useState(false);\n\n  useEffect(() => {\n    setStandardized(false)\n  }, [regressorType]);\n\n  const slopeMean = populationMean(samples, 'slope');\n  const slopeSD = populationStandardDev(samples, 'slope')\n  const standardizedData = standardized ? convertToStandardNormal(samples, slopeMean, slopeSD, 'slope') : samples;\n  const plotData = getCounts(standardizedData.map(({ slope }) => _.round(slope, 2)));\n\n  return (\n    <div>\n      {standardized ? (\n        <StandardNormalOLS seriesName=\"Slopes\" data={plotData}/>\n      ) : (\n        <DotPlot\n          series={[{ name: 'Slopes', data: plotData, showInLegend: false }]}\n          title=\"Distribution of Sample Slopes\"\n          xMin={min(OLSE_VALUES[regressorType].slopeMin, ...plotData.map(({ x }) => x))}\n          xMax={max(OLSE_VALUES[regressorType].slopeMax, ...plotData.map(({ x }) => x))}\n          yMax={max(4, ...plotData.map(({ y }) => y))}\n          xLabel=\"Slope\"\n          yLabel=\"Observations of Sample Slope\"\n        />\n      )}\n      <Form.Check\n        checked={standardized}\n        inline\n        className=\"form-switch\"\n        label=\"Convert to Standard Normal\"\n        onChange={() => setStandardized(!standardized)}\n      />\n    </div>\n  )\n}\n\nSlopeDistributionPlot.propTypes = {\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  regressorType: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import DotPlot from '../DotPlot.js';\nimport { max, min } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { olsSampleType } from '../../lib/types.js';\nimport { convertToStandardNormal, getCounts, populationMean, populationStandardDev } from '../../lib/stats-utils.js';\nimport { Form } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { OLSE_VALUES } from '../../lib/constants.js';\nimport _ from 'lodash';\nimport StandardNormalOLS from './StandardNormalOLS.js';\n\nexport default function InterceptDistributionPlot({ samples, regressorType }) {\n  const [standardized, setStandardized] = useState(false);\n\n  useEffect(() => {\n    setStandardized(false)\n  }, [regressorType]);\n\n  const interceptMean = populationMean(samples, 'intercept');\n  const interceptSD = populationStandardDev(samples, 'intercept')\n  const standardizedData = standardized ? convertToStandardNormal(samples, interceptMean, interceptSD, 'intercept') : samples;\n  const plotData = getCounts(standardizedData.map(({ intercept }) => _.round(intercept, 2)));\n\n  return (\n    <div>\n      {standardized ? (\n        <StandardNormalOLS seriesName=\"Intercepts\" data={plotData}/>\n      ) : (\n        <DotPlot\n          series={[{ name: 'Intercepts', data: plotData, showInLegend: false }]}\n          title=\"Distribution of Sample Intercepts\"\n          xMin={min(OLSE_VALUES[regressorType].interceptMin, ...plotData.map(({ x }) => x))}\n          xMax={max(OLSE_VALUES[regressorType].interceptMax, ...plotData.map(({ x }) => x))}\n          yMax={max(4, ...plotData.map(({ y }) => y))}\n          xLabel=\"Intercept\"\n          yLabel=\"Observations of Sample Intercept\"\n        />\n      )}\n      <Form.Check\n        checked={standardized}\n        inline\n        className=\"form-switch\"\n        label=\"Convert to Standard Normal\"\n        onChange={() => setStandardized(!standardized)}\n      />\n    </div>\n  )\n}\n\nInterceptDistributionPlot.propTypes = {\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  regressorType: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import { useEffect, useState } from 'react';\nimport { Button, Form, Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function MultipleSamplesInput({ populationSize, addSamples, minSize }) {\n  const [numberResamples, setNumberResamples] = useState('');\n  const [resampleSize, setResampleSize] = useState('');\n\n  useEffect(() => {\n    setResampleSize('');\n    setNumberResamples('');\n  }, [populationSize]);\n\n  return (\n    <div>\n      <Alert variant=\"primary\">\n        <p>Simulate drawing many many samples</p>\n        <span>Sample Size:</span>\n        <Form.Control\n          type=\"number\"\n          style={{ width: '50%', margin: 'auto' }}\n          placeholder=\"Sample Size:\"\n          min={minSize}\n          value={resampleSize}\n          onChange={(event) => setResampleSize(event.target.value)}\n        />\n        <br/>\n        <span>Number of Replications:</span>\n        <Form.Control\n          style={{ width: '50%', margin: 'auto' }}\n          min={1}\n          type=\"number\"\n          placeholder=\"Replications:\"\n          onChange={(event) => setNumberResamples(event.target.value)}\n          value={numberResamples}\n        />\n        <br/>\n        <Button\n          variant=\"secondary\"\n          onClick={() => addSamples(resampleSize, numberResamples, true)}\n          disabled={(resampleSize < minSize) || (resampleSize > populationSize) || (numberResamples < 1)}\n        >\n          Run\n        </Button>\n        <Button\n          variant=\"secondary\"\n          onClick={() => addSamples(0, 0, true)}\n        >\n          Clear\n        </Button>\n      </Alert>\n    </div>\n  );\n}\n\nMultipleSamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n  minSize: PropTypes.number.isRequired\n}\n","import Papa from 'papaparse';\n\nexport async function fetchCSV(path, callback) {\n  Papa.parse(path, {\n    download: true,\n    skipEmptyLines: true,\n    complete: results => {\n      callback(results.data.slice(1));  // remove headers\n    }\n  })\n}\n\n// source: https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side\nexport function exportToCsv(filename, rows) {\n  const processRow = function (row) {\n    let finalVal = '';\n    for (let j = 0; j < row.length; j++) {\n      let innerValue = row[j] === null ? '' : row[j].toString();\n      if (row[j] instanceof Date) {\n        innerValue = row[j].toLocaleString();\n      }\n      let result = innerValue.replace(/\"/g, '\"\"');\n      if (result.search(/(\"|,|\\n)/g) >= 0) {\n        result = `\"${  result  }\"`;\n      }\n      if (j > 0) {\n        finalVal += ',';\n      }\n      finalVal += result;\n    }\n    return `${finalVal  }\\n`;\n  };\n\n  let csvFile = '';\n  for (let i = 0; i < rows.length; i++) {\n    csvFile += processRow(rows[i]);\n  }\n\n  const blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n  if (navigator.msSaveBlob) { // IE 10+\n    navigator.msSaveBlob(blob, filename);\n  } else {\n    const link = document.createElement('a');\n    if (link.download !== undefined) { // feature detection\n      // Browsers that support HTML5 download attribute\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', filename);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n}\n","import { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport _ from 'lodash';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport PopulationAndSampleCharts from './PopulationAndSampleCharts.js';\nimport SlopeDistributionPlot from './SlopeDistributionPlot.js';\nimport InterceptDistributionPlot from './InterceptDistributionPlot.js';\nimport MultipleSamplesInput from './MultipleSamplesInput.js';\nimport PropTypes from 'prop-types';\nimport { generateScatter, linearRegression } from '../../lib/stats-utils.js';\nimport { fetchCSV } from '../../lib/data-utils.js';\n\nexport default function SampleDistributionOLSEstimators({ regressorType }) {\n  const [data, setData] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    if (regressorType === 'Continuous') {\n      setData(generateScatter(1000, 7, 2, 2.5, 6, -0.5))\n    } else if (regressorType === 'Binary') {\n      // use a pre-generated dataset\n      const parseData = (results) => {\n        setData(results.map(([x, y, category], id) => ({ x: +x, y: +y, category, id })));\n      }\n      fetchCSV(`${process.env.PUBLIC_URL}/data/Job_Corps_data.csv`, parseData);\n    }\n    setSamples([]);\n    setSelected();\n  }, [regressorType]);\n\n  const addSamples = (size, replications, clear) => {\n    const newSamples = [];\n    for (let i = 0; i < replications; i++) {\n      const sample = _.sampleSize(data, size);\n\n      // ensure that the sample data is spread between both x-categories\n      if ((regressorType === 'Binary') && (_.uniq(sample.map(({ x }) => x)).length === 1)) {\n        i -= 1;\n        continue;\n      }\n\n      const { slope, intercept } = linearRegression(sample, 1);\n      const sampleObject = {\n        data: sample,\n        size,\n        slope,\n        intercept,\n      }\n      newSamples.push(sampleObject);\n    }\n    const indexedSamples = (clear ? newSamples : [...samples, ...newSamples]).map((obj, index) => ({ ...obj, id: index }));\n    setSelected(indexedSamples[indexedSamples.length - 1]);\n    setSamples(indexedSamples);\n  }\n\n  return (\n    <Collapsable>\n      <Container>\n        <PopulationAndSampleCharts\n          data={data}\n          addSamples={addSamples}\n          selected={selected}\n          samples={samples}\n          selectSample={setSelected}\n          regressorType={regressorType}\n        />\n        <br/>\n        <Row>\n          <Col xs={{ span: 8, offset: 2 }}>\n            <MultipleSamplesInput populationSize={data.length} addSamples={addSamples} minSize={2}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <SlopeDistributionPlot samples={samples} regressorType={regressorType}/>\n          </Col>\n          <Col>\n            <InterceptDistributionPlot samples={samples} regressorType={regressorType}/>\n          </Col>\n        </Row>\n      </Container>\n    </Collapsable>\n  );\n}\n\nSampleDistributionOLSEstimators.propTypes = {\n  regressorType: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import { Button, Modal } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nexport default function JobCorpsDataModal({ showButton }) {\n  const [showDataInfo, setShowDataInfo] = useState(false);\n\n  return (\n    <>\n      {showButton && (\n        <>\n          <Button size=\"sm\" variant=\"outline-success\" onClick={() => setShowDataInfo(!showDataInfo)}>\n            More about this dataset\n          </Button>\n          <Modal show={showDataInfo} onHide={() => setShowDataInfo(false)}>\n            <Modal.Header>\n              <Modal.Title>More about this dataset:</Modal.Title>\n              <Button variant=\"light\" className=\"btn-close\" onClick={() => setShowDataInfo(false)}/>\n            </Modal.Header>\n            <Modal.Body>\n              The Department of Labor commissioned a multi-year study of Job Corps, the nation’s largest education and job training program for disadvantaged youth. The study randomly assigned applicants into two groups: 1) Job Corp group (participated in the program), and 2) Control group (did not participate in the program). Information on earnings for both groups was collected in the following years. This randomized control trial (RCT) found that four years after random assignment, Job Corps participants had weekly earnings $16 per month ($211 vs $195) higher than individuals in the control group representing an 8% increase in earnings. We created a synthetic population dataset to match this finding.\n            </Modal.Body>\n            <Modal.Footer>\n              <cite>Schochet, Peter Z, John Burghard, and Sheena McConnell. 2006. “National Job Corps Study and Longer-Term Follow-Up Study: Impact and Benefit-Cost Findings Using Survey and Summary Earnings Records Data.” Mathematica Policy Research, Inc.</cite>\n            </Modal.Footer>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nJobCorpsDataModal.propTypes = {\n  showButton: PropTypes.bool.isRequired\n}\n","import SampleDistributionOLSEstimators from './SampleDistributionOLSEstimators.js';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\nimport { useState } from 'react';\nimport { InlineMath } from 'react-katex';\nimport SimulationIntro from '../SimulationIntro.js';\nimport JobCorpsDataModal from '../JobCorpsDataModal.js';\n\nexport default function SampleDistributionOLSEstimatorsContainer() {\n  const [regressorType, setRegressorType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Sample Distribution of OLS Estimators\"\n        text={<>Like the sample mean, the OLS estimated slope and intercept are random variables with sampling distributions. The Central Limit theorem states that the distribution of the sample average is approximately normal when the sample size is large. This incredibly useful attribute of the sample average also holds for our OLS estimators <InlineMath math=\"\\hat{\\beta}_0\"/> and <InlineMath math=\"\\hat{\\beta}_1\"/>!</>}\n      />\n      <br/>\n      <p>Select a regressor type:</p>\n      <SelectorButtonGroup options={['Continuous', 'Binary']} select={setRegressorType} selected={regressorType}/>\n      <br/>\n      <br/>\n      <JobCorpsDataModal showButton={regressorType === 'Binary'}/>\n      <br/>\n      <br/>\n      {regressorType && <SampleDistributionOLSEstimators regressorType={regressorType}/>}\n    </div>\n  );\n}\n","import { Fragment, useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport _ from 'lodash';\nimport { column, inv, matrix, max, min, multiply, transpose } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { MULTIPLE_REGRESSION_VALUES } from '../../lib/constants';\nimport { Col, Form, Row, Button } from 'react-bootstrap';\nimport { linearRegression } from '../../lib/stats-utils';\n\nexport default function Scatter3D({ x, y, z, dataSet }) {\n  const [display, setDisplay] = useState('3D');\n  const [showBestFit, setShowBestFit] = useState(false);\n\n  const values = MULTIPLE_REGRESSION_VALUES[dataSet][display];\n\n  // list of objects for the data to be displayed in the plot\n  const plotData = [\n    {\n      x: (display === 'YZ') ? y : x,\n      y: ((display === 'XY') || (display === '3D')) ? y : z,\n      z,\n      type: (display === '3D') ? 'scatter3d' : 'scatter',\n      mode: 'markers',\n      marker: {\n        size: (display === '3D') ? 8 : 12,\n        color: 'red',\n        line: {\n          color: 'black',\n          width: (display === '3D') ? 1 : 0.5\n        }\n      },\n      hovertemplate: `${values.xAbbr}: %{x}<br>${values.yAbbr}: %{y}<br>${(display === '3D') ? `${values.zAbbr}: %{z}` : ''}<extra></extra>`\n    }\n  ];\n\n  let title = '';\n\n  if (display === '3D' && showBestFit) {\n    // matrix math to generate a best-fit plane\n    const A = matrix(_.zip(_.range(0, x.length).map(() => 1), x, y));\n\n    const theta = multiply(inv(multiply(transpose(A), A)), multiply(transpose(A), matrix(z)));\n\n    title = `${values.zAbbr}ᵢ = ${_.round(column([theta], 0), 2)} + ${_.round(column([theta], 1), 2)} * ${values.xAbbr}ᵢ + ${_.round(column([theta], 2), 2)} * ${values.yAbbr}ᵢ + uᵢ`;\n\n    const equation = (x, y) => {\n      return column([theta], 0) + column([theta], 1) * x + column([theta], 2) * y\n    }\n\n    /*\n      surface plot must be of the form:\n      [\n        [z, z, z, z, z, ...],  <-- x\n        [z, z, z, z, z, ...],\n        ...\n      ]\n          ^y\n    */\n\n    // fill from 0 to min(y) with lists of undefined so the surface isn't displayed in this space\n    const bestFitPlane = _.range(0, _.floor(min(y))).map(() => _.range(0, _.ceil(max(x))).map(() => undefined));\n\n    for (let yi = _.floor(min(y)); yi <= _.ceil(max(y)); yi++) {\n      // fill from 0 to min(x) with undefined so the surface isn't displayed in this space\n      const temp = _.range(0, _.floor(min(x))).map(() => undefined)\n      for (let xi = _.floor(min(x)); xi <= _.ceil(max(x)); xi++) {\n        temp.push(equation(xi, yi));\n      }\n      bestFitPlane.push(temp)\n    }\n\n    plotData.push({\n      z: bestFitPlane,\n      type: 'surface',\n      showscale: false,\n      opacity: 0.5,\n      hoverinfo: 'x+y+z',\n      colorscale: [[0, 'rgb(0,0,0)'], [1, 'rgb(0,0,0)']],\n      visible: (display === '3D'),\n      hovertemplate: `${values.xAbbr}: %{x}<br>${values.yAbbr}: %{y}<br>${(display === '3D') ? `${values.zAbbr}: %{z}` : ''}<extra></extra>`\n    });\n\n  } else if (showBestFit) {\n    const displayPointsMap = {\n      'XY': _.zip(x, y),\n      'YZ': _.zip(y, z),\n      'XZ': _.zip(x, z)\n    }\n\n    const { slope, intercept } = linearRegression(displayPointsMap[display]);\n    const [lineX, lineY] = _.unzip(displayPointsMap[display].map((point) => ([point[0], (point[0] * slope) + intercept ])));\n    title = `${values.yAbbr}ᵢ = ${intercept} + ${slope} * ${values.xAbbr}ᵢ + uᵢ`;\n\n    plotData.push({\n      x: lineX,\n      y: lineY,\n      mode: 'lines',\n      marker: {color: 'black'},\n      hovertemplate: '(%{x}, %{y})<extra></extra>'\n    });\n  }\n\n  return (\n    <Row>\n      <Col style={{border: '1px solid black', height: 702, width: 802, padding: 0}}>\n        <Plot\n          data={plotData}\n          layout={{\n            title: {\n              text: title,\n              y: 0.95,\n              yanchor: 'top',\n            },\n            width: 800,\n            height: 700,\n            margin: {\n              l: (display === '3D') ? 0 : 80,\n              r: (display === '3D') ? 0 : 80,\n              t: (display === '3D') ? 0 : 80,\n              b: (display === '3D') ? 0 : 80\n            },\n            showlegend: false,\n            xaxis: {\n              title: values.xLabel,\n              range: values.xRange,\n              tickvals: values.xtickvals,\n              ticktext: values.xticktext\n            },\n            yaxis: {\n              title: values.yLabel,\n              range: values.yRange,\n              tickvals: values.ytickvals,\n              ticktext: values.yticktext\n            },\n            scene: {\n              xaxis: {\n                title: {\n                  text: values.xLabel\n                },\n                range: values.xRange,\n                tickvals: values.xtickvals,\n                ticktext: values.xticktext\n              },\n              yaxis: {\n                title: {\n                  text: values.yLabel\n                },\n                range: values.yRange,\n                tickvals: values.ytickvals,\n                ticktext: values.yticktext\n              },\n              zaxis: {\n                title: {\n                  text: values.zLabel\n                },\n                range: values.zRange\n              },\n              camera: {\n                eye: {\n                  x: 1.6,\n                  y: 1.6,\n                  z: 1.6\n                }\n              }\n            }\n          }}\n          config={{\n            scrollZoom: true,\n            displayModeBar: true,\n            modeBarButtonsToRemove: ['toImage', 'resetCameraLastSave3d', 'select2d', 'lasso2d', 'autoScale2d'],\n          }}\n        />\n        <p>{MULTIPLE_REGRESSION_VALUES[dataSet].citation}</p>\n      </Col>\n      <Col style={{margin: 'auto', paddingLeft: 50}}>\n        <Form>\n          {['3D', 'XY', 'YZ', 'XZ'].map((axes) => (\n            <Fragment key={axes}>\n              <Form.Check\n                checked={display === axes}\n                type=\"radio\"\n                label={MULTIPLE_REGRESSION_VALUES[dataSet][axes].buttonLabel}\n                onChange={() => setDisplay(axes)}\n              />\n              <hr/>\n            </Fragment>\n          ))}\n          <Button\n            onClick={() => setShowBestFit(!showBestFit)}\n            variant=\"outline-primary\"\n            active={showBestFit}\n          >\n            {showBestFit ? 'Hide' : 'Show'} Best Fit {(display === '3D') ? 'Plane' : 'Line'}\n          </Button>\n        </Form>\n      </Col>\n    </Row>\n  )\n}\n\nScatter3D.propTypes = {\n  x: PropTypes.arrayOf(PropTypes.number).isRequired,\n  y: PropTypes.arrayOf(PropTypes.number).isRequired,\n  z: PropTypes.arrayOf(PropTypes.number).isRequired,\n  dataSet: PropTypes.oneOf(['California Schools Data', 'CPS Earnings Data', 'CPS Log Earnings Data']).isRequired\n}\n","import { useEffect, useState } from 'react';\nimport Scatter3D from './Scatter3D';\nimport _ from 'lodash';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\nimport { fetchCSV } from '../../lib/data-utils';\nimport { MULTIPLE_REGRESSION_VALUES } from '../../lib/constants';\n\nexport default function MultipleRegression() {\n  const [data, setData] = useState([]);\n  const [dataSet, setDataSet] = useState('California Schools Data');\n\n  useEffect(() => {\n    const parseData = (results) => {\n      setData(results.map((object) => _.values(object).map((val) => +val)));\n    }\n\n    fetchCSV(`${process.env.PUBLIC_URL}/data/${MULTIPLE_REGRESSION_VALUES[dataSet].path}`, parseData);\n  }, [dataSet]);\n\n  const [z, x, y] = _.unzip(data);\n\n  return (\n    <>\n      <SelectorButtonGroup\n        options={['California Schools Data', 'CPS Earnings Data', 'CPS Log Earnings Data']}\n        select={setDataSet}\n        selected={dataSet}\n      />\n      <br/>\n      <br/>\n      <Scatter3D x={x || []} y={y || []} z={z || []} dataSet={dataSet}/>\n    </>\n  )\n}\n","import SimulationIntro from '../SimulationIntro';\nimport MultipleRegression from './MultipleRegression';\n\nexport default function MultipleRegressionContainer() {\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"Multiple Regression\"\n        text=\"Unlike single variable regression, multiple regression is hard to sketch on paper. This demonstration helps visualize multiple regression when we have two regressors.\"\n      />\n      <br/>\n      <MultipleRegression/>\n    </div>\n  );\n}\n","import { dataObjectArrayType, olsAssumptionType, olsSampleType } from '../../lib/types';\nimport ScatterPlot from '../ScatterPlot';\nimport PropTypes from 'prop-types';\nimport { Alert, Form } from 'react-bootstrap';\nimport { OLS_ASSUMPTIONS_TEXTS } from '../../lib/constants';\n\nexport default function PopulationPlot({ data, selected, assumption, showViolation, setShowViolation }) {\n\n  const tooltipFormat = {\n    headerFormat: '',\n    pointFormat: '<div><strong>{point.category}</strong><br/><strong>${point.y}</strong><br/></div>'\n  }\n\n  const sampleData = selected ? selected.data : [];\n\n  const series = [\n    {\n      name: 'data',\n      data,\n      tooltip: tooltipFormat\n    },\n    {\n      name: 'sample',\n      data: sampleData.filter((obj) => !obj.altered),\n      tooltip: tooltipFormat\n    },\n    {\n      name: `${showViolation ? '' : 'without '}violation`,\n      data: sampleData.filter((obj) => obj.altered).map((obj) => (\n        {\n          ...obj,\n          x: showViolation ? obj.x : obj.originalX,\n          y: showViolation ? obj.y : obj.originalY\n        }\n      )),\n      tooltip: tooltipFormat,\n      color: showViolation ? 'red' : '#00ff15',\n      marker: {\n        symbol: 'diamond',\n        lineWidth: 1,\n        lineColor: showViolation ? 'black' : '#00ff15'\n      },\n    },\n  ];\n\n  return (\n    <>\n      <ScatterPlot\n        series={series}\n        title=\"Population\"\n        xMin={0}\n        xMax={1}\n        yLabel=\"Weekly Earnings\"\n        height=\"75%\"\n        xCategories={['Control Group', 'Job Corps']}\n      />\n      {((assumption !== 'OLS Assumptions Hold') && selected && selected.data) && (\n        <Alert variant=\"danger\">\n          <p>{OLS_ASSUMPTIONS_TEXTS[assumption]}</p>\n          {((assumption === 'Large Outliers') || (assumption === 'E(u|x) != 0')) && (\n            <Form.Check\n              checked={showViolation}\n              inline\n              className=\"form-switch\"\n              label={`Turn Violation ${showViolation ? 'OFF' : 'ON'}`}\n              onChange={() => setShowViolation(!showViolation)}\n            />\n            )}\n        </Alert>\n      )}\n    </>\n  )\n}\n\nPopulationPlot.propTypes = {\n  data: dataObjectArrayType.isRequired,\n  selected: olsSampleType,\n  assumption: olsAssumptionType.isRequired,\n  showViolation: PropTypes.bool.isRequired,\n  setShowViolation: PropTypes.func.isRequired\n}\n","import { Alert } from 'react-bootstrap';\nimport SampleSizeInput from '../SampleSizeInput';\nimport PropTypes from 'prop-types';\nimport { olsSampleType } from '../../lib/types';\nimport DataTable from '../DataTable';\n\nexport default function SampleInput({ maxSize, addSample, samples, selected, setSelected, showMessage }) {\n\n  return (\n    <>\n      <Alert variant=\"primary\">\n        <p>Try drawing some samples and observe the line of best fit on the graph</p>\n        <SampleSizeInput maxSize={maxSize} minSize={2} handleClick={addSample}/>\n        {showMessage && <p style={{color: 'red'}}>Given this random sample, none of those failing to follow the protocol were selected.</p>}\n      </Alert>\n      <DataTable\n        data={samples}\n        headers={{\n          'Sample': 'id',\n          'Size': 'size',\n          'Slope': 'slope',\n          'Intercept': 'intercept'\n        }}\n        setSelected={setSelected}\n        setRowColor={(object) => (selected && (object.id === selected.id)) ? '#747EF2' : undefined}\n      />\n    </>\n  )\n}\n\nSampleInput.propTypes = {\n  maxSize: PropTypes.number.isRequired,\n  addSample: PropTypes.func.isRequired,\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  selected: olsSampleType,\n  setSelected: PropTypes.func.isRequired,\n  showMessage: PropTypes.bool.isRequired\n}\n","import { BlockMath } from 'react-katex';\nimport ScatterPlot from '../ScatterPlot';\nimport { olsSampleType } from '../../lib/types';\nimport PropTypes from 'prop-types';\nexport default function SamplePlot({ sample, showViolation }) {\n\n  const sampleData = sample ? sample.data : [];\n\n  const lineData = sample ? [\n    {\n      x: 0,\n      y: showViolation ? sample.intercept : sample.originalIntercept\n    },\n    {\n      x: 1,\n      y: (showViolation ? sample.slope : sample.originalSlope) + (showViolation ? sample.intercept : sample.originalIntercept)\n    }\n  ] : [];\n\n  const sampleSeries = [\n    {\n      name: 'best fit line',\n      type: 'line',\n      data: lineData,\n      label: false,\n      marker: false,\n      showInLegend: false,\n      enableMouseTracking: false,\n      color: 'black',\n    },\n    {\n      name: 'sample',\n      data: sampleData.filter((obj) => !obj.altered),\n      color: 'orange',\n      marker: {\n        lineWidth: 1,\n        lineColor: 'orange'\n      },\n      tooltip: {\n        headerFormat: '',\n        pointFormat: '<div><strong>{point.category}</strong><br/><strong>${point.y}</strong><br/></div>'\n      }\n    },\n    {\n      name: `${showViolation ? '' : 'without '}violation`,\n      data: sampleData.filter((obj) => obj.altered).map((obj) => (\n        {\n          ...obj,\n          x: showViolation ? obj.x : obj.originalX,\n          y: showViolation ? obj.y : obj.originalY\n        }\n      )),\n      tooltip: {\n        headerFormat: '',\n        pointFormat: '<div><strong>{point.category}</strong><br/><strong>${point.y}</strong><br/></div>'\n      },\n      marker: {\n        symbol: 'diamond',\n        lineWidth: 1,\n        lineColor: showViolation ? 'black' : '#00ff15'\n      },\n      color: showViolation ? 'red' : '#00ff15'\n    },\n  ];\n\n\n  return (\n    <>\n      <div style={{ marginLeft: '20%' }}>\n        <BlockMath math={'\\\\widehat{Earnings}_i = \\\\hat{\\\\beta}_0 + \\\\hat{\\\\beta}_1{Job\\\\ Corps}_i'}/>\n        {sample && (\n          <BlockMath math={`\\\\widehat{Earnings}_i = ${(showViolation ? sample.intercept : sample.originalIntercept)} + ${(showViolation ? sample.slope : sample.originalSlope)}{Job\\\\ Corps}_i`}/>\n        )}\n      </div>\n      <ScatterPlot\n        series={sampleSeries}\n        xMin={0}\n        xMax={1}\n        yLabel=\"Weekly Earnings\"\n        xCategories={['Control Group', 'Job Corps']}\n      />\n    </>\n  )\n}\n\nSamplePlot.propTypes = {\n  sample: olsSampleType,\n  showViolation: PropTypes.bool.isRequired\n}\n","import { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport _ from 'lodash';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { linearRegression } from '../../lib/stats-utils.js';\nimport PopulationPlot from './PopulationPlot.js';\nimport SampleInput from './SampleInput.js';\nimport SamplePlot from './SamplePlot.js';\nimport SimulateSamples from '../SimulateSamples.js';\nimport { InlineMath } from 'react-katex';\nimport randomNormal from 'random-normal';\nimport { median } from 'mathjs';\nimport { olsAssumptionType } from '../../lib/types.js';\nimport { OLS_ASSUMPTIONS_OPTIONS } from '../../lib/constants.js';\nimport { fetchCSV } from '../../lib/data-utils.js';\n\nexport default function OLSEstimatorsAreConsistent({ assumption }) {\n  const [data, setData] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n  const [showViolation, setShowViolation] = useState(true);\n  const [showMessage, setShowMessage] = useState(false);\n\n  useEffect(() => {\n    // use a pre-generated dataset\n    const parseData = (results) => {\n      setData(results.map(([x, y, category], id) => ({ x: +x, y: +y, category, id })));\n    }\n\n    fetchCSV(`${process.env.PUBLIC_URL}/data/Job_Corps_data.csv`, parseData);\n  }, []);\n\n  useEffect(() => {\n    setSamples([]);\n    setSelected();\n    setShowViolation(true);\n  }, [assumption]);\n\n  useEffect(() => {\n    if (selected && assumption === 'E(u|x) != 0') {\n      // display a message if no violation occurs\n      setShowMessage(selected.data.every((obj) => !obj.altered))\n    }\n  }, [selected, assumption]);\n\n  // takes a sample of 'size' from 'population' - the sample is altered based on 'assumption'\n  const samplingFunction = (population, size) => {\n    const medianValue = median(population.map(({ y }) => y));\n\n    if (assumption === 'OLS Assumptions Hold') {\n      // take a normal sample\n      return _.sampleSize(population, size);\n\n    } else if (assumption === 'Non-Random Sample') {\n      // only sample from observations below the median value\n      const belowMedian = population.filter(({ y }) => y < medianValue);\n      const belowMedianSample = _.sampleSize(belowMedian, size);\n      // if the sample size is too big, resample from below the median\n      const belowMedianResample = _.sampleSize(belowMedian, size - belowMedian.length);\n      return [...belowMedianSample, ...belowMedianResample];\n\n    } else if (assumption === 'Large Outliers') {\n      // take a normal sample, then multiply the income by 2 of 20% of the sampled jobCorps observations\n      const sample = _.sampleSize(population, size);\n      const sampleJobCorps = sample.filter(({ category }) => category === 'Job Corps');\n      const randomIndices = _.sampleSize(_.range(0, sampleJobCorps.length), _.round(sampleJobCorps.length * 0.2));\n      const alteredJobCorps = sampleJobCorps.map((obj, idx) => (\n        {\n          ...obj,\n          y: (randomIndices.includes(idx) ? obj.y * 2 : obj.y),\n          // store the original y-value and mark that the sample was modified\n          originalY: obj.y,\n          altered: randomIndices.includes(idx)\n        }\n      ));\n      const remainingSample = sample.filter(({ id }) => !alteredJobCorps.some((obj) => obj.id === id));\n      return [...remainingSample, ...alteredJobCorps];\n\n    } else if (assumption === 'E(u|x) != 0') {\n      // take a normal sample, then increase 20% of the top sampled control observations by ~16 and move them to the Job Corps\n      const sample = _.sampleSize(population, size);\n      const sampleControl = sample.filter(({ category }) => category === 'Control');\n      const sampleControlAboveMedian = sampleControl.filter(({ y }) => y >= medianValue);\n      const protocolBreakers = _.sampleSize(sampleControlAboveMedian, _.round(size * 0.2)).map((obj) => (\n        {\n          ...obj,\n          x: 1,\n          // store the original x-value\n          originalX: 0,\n          y: obj.y + randomNormal({mean: 16, dev: 5}),\n          // store the original y-value\n          originalY: obj.y,\n          // mark that the sample was modified\n          altered: true\n        }\n      ));\n      const remainingSample = sample.filter(({ id }) => !protocolBreakers.some((obj) => obj.id === id));\n      return [...remainingSample, ...protocolBreakers];\n    }\n  }\n\n  const addSample = (size) => {\n    let sample;\n    do {\n      sample = samplingFunction(data, size);\n      // ensures that the sample has points in both of the x-categories\n    } while (_.uniq(sample.map(({ category }) => category)).length === 1);\n\n    const { slope: violationSlope, intercept: violationIntercept } = linearRegression(sample, 1);\n    const { slope: originalSlope, intercept: originalIntercept } = linearRegression(sample.map(\n      ({ x, y, originalY, altered }) => [x, (altered ? originalY : y)]\n    ), 1);\n\n    // store the slope/intercept from both the altered and non-altered samples\n    const sampleObject = {\n      data: sample,\n      size: sample.length,\n      slope: violationSlope,\n      intercept: violationIntercept,\n      originalSlope,\n      originalIntercept\n    }\n    const newSamples = [...samples, sampleObject].map((obj, index) => ({ ...obj, id: index }));\n    setSelected(newSamples[newSamples.length - 1]);\n    setSamples(newSamples);\n  }\n\n  const getBestFitSlope = (sample) => {\n    const { slope } = linearRegression(sample, 2);\n    return slope;\n  }\n\n  const getBestFitIntercept = (sample) => {\n    const { intercept } = linearRegression(sample, 2);\n    return intercept;\n  }\n\n  return (\n    <Collapsable>\n      <Container>\n        <Row>\n          <Col lg={{ span: 12, offset: 0 }} xl={{ span: 8, offset: 2 }}>\n            <PopulationPlot\n              data={data}\n              selected={selected}\n              assumption={assumption}\n              showViolation={showViolation}\n              setShowViolation={setShowViolation}\n            />\n          </Col>\n        </Row>\n        <br/>\n        <Row md={1} lg={2}>\n          <Col>\n            <SampleInput\n              maxSize={data.length}\n              addSample={addSample}\n              samples={samples}\n              selected={selected}\n              setSelected={setSelected}\n              showMessage={showMessage}\n            />\n          </Col>\n          <Col>\n            <SamplePlot sample={selected} showViolation={showViolation}/>\n          </Col>\n        </Row>\n        <br/>\n        <Row>\n          <SimulateSamples\n            mathTitle={\n              <p>\n                Population vs Sample Slope\n                <br/>\n                {OLS_ASSUMPTIONS_OPTIONS[assumption]}\n                <br/>\n                <InlineMath math=\"\\hat{\\beta_1}\\ vs\\ \\beta_1\"/>\n              </p>\n            }\n            popArray={data}\n            popValSeriesName={`Population Slope ($${getBestFitSlope(data).toFixed(2)})`}\n            sampleSeriesName=\"Estimated Slope\"\n            yLabel=\"Slope\"\n            sampleFn={samplingFunction}\n            yFn={getBestFitSlope}\n          />\n        </Row>\n        <br/>\n        <Row>\n          <SimulateSamples\n            mathTitle={\n              <p>\n                Population vs Sample Intercept\n                <br/>\n                {OLS_ASSUMPTIONS_OPTIONS[assumption]}\n                <br/>\n                <InlineMath math=\"\\hat{\\beta_0}\\ vs\\ \\beta_0\"/>\n              </p>\n            }\n            popArray={data}\n            popValSeriesName={`Population Intercept ($${getBestFitIntercept(data).toFixed(2)})`}\n            sampleSeriesName=\"Estimated Intercept\"\n            yLabel=\"Intercept\"\n            sampleFn={samplingFunction}\n            yFn={getBestFitIntercept}\n          />\n        </Row>\n      </Container>\n    </Collapsable>\n  );\n}\n\nOLSEstimatorsAreConsistent.propTypes = {\n  assumption: olsAssumptionType.isRequired\n}\n","import OLSEstimatorsAreConsistent from './OLSEstimatorsAreConsistent.js';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\nimport { useState } from 'react';\nimport { OLS_ASSUMPTIONS_OPTIONS } from '../../lib/constants.js';\nimport SimulationIntro from '../SimulationIntro.js';\nimport _ from 'lodash';\nimport { InlineMath } from 'react-katex';\nimport JobCorpsDataModal from '../JobCorpsDataModal.js';\n\nexport default function OLSEstimatorsAreConsistentContainer() {\n  const [assumption, setAssumption] = useState('');\n\n  const assumptionAsString = _.isObject(assumption) ? _.invert(OLS_ASSUMPTIONS_OPTIONS)[assumption] : assumption;\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"OLS Estimators are Consistent\"\n        text={\n          <>\n            The Least Squares Assumptions:\n            <br/>\n            <br/>\n            <InlineMath math=\"Y_i = \\beta_0 + \\beta_1X_i + u_i, i = 1, \\dotsc , n,\"/> where\n            <br/>\n            <br/>\n            <ol style={{textAlign: 'left'}}>\n              <li style={{margin: 5}}>The error term <InlineMath math=\"u_i\"/> has conditional mean zero given <InlineMath math=\"X_i: E(u_i|X_i)=0\"/>;</li>\n              <li style={{margin: 5}}><InlineMath math=\"(X_i,Y_i), i=1, \\dotsc , n,\"/> are independent and identically distributed (i.i.d.) draws from their joint distribution; and</li>\n              <li style={{margin: 5}}>Large outliers are unlikely: <InlineMath math=\"X_i\"/> and <InlineMath math=\"Y_i\"/> have nonzero finite fourth moments.</li>\n            </ol>\n            <br/>\n            Stock, James H., and Mark W. Watson. 2019. <cite>Introduction to econometrics, 4th Edition.</cite> Boston: Pearson/Addison Wesley.\n          </>\n        }\n      />\n      <br/>\n      <SelectorButtonGroup\n        options={_.values(OLS_ASSUMPTIONS_OPTIONS)}\n        select={setAssumption}\n        selected={assumption}\n      />\n      <br/>\n      <br/>\n      <JobCorpsDataModal showButton/>\n      <br/>\n      <br/>\n      {assumption && <OLSEstimatorsAreConsistent assumption={assumptionAsString}/>}\n    </div>\n  );\n}\n","import { Table } from 'react-bootstrap';\nimport _ from 'lodash';\nimport { BlockMath } from 'react-katex';\nimport { mean, std, sum } from 'mathjs';\nimport { jStat } from 'jstat';\nimport PropTypes from 'prop-types';\nimport { anovaPopulationObjectType } from '../../lib/types';\n\nexport default function FTest({ populations, samples }) {\n  // calculate F-statistic and p-value\n  const overallSampleMean = (_.flatten(samples).length > 0) ? mean(_.flatten(samples)) : undefined;\n  const SSTR = sum(samples.map((sample) => sample.length * (((sample.length > 0) ? mean(sample) : 0) - overallSampleMean) ** 2));\n  const MSTR = SSTR / (populations.length - 1);\n  const SSE = sum(samples.map((sample) => (sample.length - 1) * ((sample.length > 0) ? std(sample) : 0) ** 2));\n  const MSE = SSE / (sum(samples.map((sample) => sample.length)) - populations.length);\n  const F = MSTR / MSE;\n  const pValue = jStat.anovaftest(...samples);\n\n  return (\n    <Table borderless style={{marginTop: 20}}>\n      <thead>\n        <tr>\n          <th/>\n          <th><BlockMath math={`\\\\bar{\\\\bar{x}} = ${_.round(overallSampleMean, 2)}`}/></th>\n          <th/>\n          <th/>\n        </tr>\n        <tr>\n          <th/>\n          <th>Sum of Squares</th>\n          <th>df</th>\n          <th>Mean Sum of Squares</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Due to Treatment</td>\n          <td>{_.round(SSTR, 2)}</td>\n          <td>{populations.length - 1}</td>\n          <td>{_.round(MSTR, 2)}</td>\n        </tr>\n        <tr>\n          <td>Due to Error</td>\n          <td>{_.round(SSE, 2)}</td>\n          <td>{_.flatten(samples).length - populations.length}</td>\n          <td>{_.round(MSE, 2)}</td>\n        </tr>\n        <tr>\n          <td/>\n          <td/>\n          <td><BlockMath math={`F = ${F.toPrecision(3)}`}/></td>\n          <td><BlockMath math={`p-value \\\\approx ${pValue.toPrecision(3)}`}/></td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nFTest.propTypes = {\n  populations: PropTypes.arrayOf(anovaPopulationObjectType).isRequired,\n  samples: PropTypes.arrayOf(PropTypes.number).isRequired\n}\n","import { Col, Row } from 'react-bootstrap';\nimport { getCounts, populationMean, populationStandardDev } from '../../lib/stats-utils';\nimport DotPlot from '../DotPlot';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types';\nimport { max } from 'mathjs';\n\nexport default function PopulationRow({ data, sample, id }) {\n\n  const popSeries = [\n    {\n      name: 'Population Observations',\n      data\n    },\n    {\n      name: 'Sampled Observations',\n      data: sample\n    }\n  ];\n\n  const sampleMean = populationMean(sample);\n  const sampleSD = populationStandardDev(sample);\n\n  // determine max height for the sample mean line\n  const yMax = (sample.length > 0) && max(getCounts(sample.map(({ x }) => x)).map(({ y }) => y)) + 1;\n\n  const sampleSeries = [\n    {\n      name: 'Sampled Observations',\n      data: getCounts(sample.map(({ x }) => x)),\n      color: 'orange',\n      marker: {\n        lineWidth: 1,\n        lineColor: 'orange',\n        symbol: 'diamond'\n      },\n    },\n    {\n      type: 'line',\n      name: 'Sample Mean',\n      data: [{ x: sampleMean || 0, y: 0 }, { x: sampleMean || 0, y: yMax }],\n      color: 'black',\n      enableMouseTracking: false,\n      label: {\n        format: `<div>Sample Mean: ${sampleMean && sampleMean.toFixed(2)}<br/>Sample SD: ${sampleMean && sampleSD.toFixed(2)}</div>`\n      },\n      visible: (sample.length > 0),\n      showInLegend: (sample.length > 0)\n    }\n  ];\n\n  return (\n    <Row>\n      <Col xs=\"12\" sm={{span: 8, offset: 2}} md={{span: 4, offset: 2}}>\n        <DotPlot\n          series={popSeries}\n          title={`Population ${id}`}\n          xMin={-20}\n          xMax={20}\n          xLabel=\"value\"\n          yLabel=\"Observations\"\n        />\n      </Col>\n      <Col xs=\"12\" sm={{span: 8, offset: 2}} md={{span: 4, offset: 0}}>\n        <DotPlot\n          series={sampleSeries}\n          title={`Sample ${id}`}\n          xMin={-20}\n          xMax={20}\n          xLabel=\"value\"\n          yLabel=\"Observations\"\n        />\n      </Col>\n    </Row>\n  )\n}\n\nPopulationRow.propTypes = {\n  data: dataObjectArrayType.isRequired,\n  sample: dataObjectArrayType.isRequired,\n  id: PropTypes.number.isRequired\n}\n","import { Form, Col, Row } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nexport default function LabeledSelector({ min, max, label, value, setValue }) {\n  return (\n    <Form>\n      <Form.Group as={Row} className=\"justify-content-md-center\">\n        <Form.Label column sm=\"6\" md=\"auto\">{label}</Form.Label>\n        <Col sm=\"auto\">\n          <select className=\"form-select\" value={value} onChange={(event) => setValue(+event.target.value)}>\n            {_.range(min, max + 1).map((i) => <option key={i} value={i}>{i}</option>)}\n          </select>\n        </Col>\n      </Form.Group>\n    </Form>\n  )\n}\n\nLabeledSelector.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  setValue: PropTypes.func.isRequired\n}\n","import LabeledSelector from '../LabeledSelector';\nimport PropTypes from 'prop-types';\n\nexport default function PopulationMeanInput({ mean, setMean, id }) {\n\n  const setValue = (value) => {\n    setMean(id, 'mean', +value)\n  }\n\n  return (\n    <LabeledSelector min={-5} max={5} label={`Set mean for Population ${id}: `} value={mean} setValue={setValue}/>\n  )\n}\n\nPopulationMeanInput.propTypes = {\n  mean: PropTypes.number.isRequired,\n  setMean: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired\n}\n","import { Form, Col, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { optionalLaTeXType, stringOrNumberType } from '../lib/types';\n\nexport default function LabeledInput({ min, max, step, label, value, setValue }) {\n  return (\n    <Form>\n      <Form.Group as={Row} className=\"justify-content-md-center\">\n        <Form.Label column sm=\"6\" md=\"auto\">{label}</Form.Label>\n        <Col sm=\"auto\">\n          <Form.Control\n            style={{padding: 6}}\n            type=\"number\"\n            min={min}\n            max={max}\n            step={step || 1}\n            value={value}\n            onChange={(event) => setValue(event.target.value)}\n          />\n        </Col>\n      </Form.Group>\n    </Form>\n  )\n}\n\nLabeledInput.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number,\n  label: optionalLaTeXType.isRequired,\n  value: stringOrNumberType.isRequired,\n  setValue: PropTypes.func.isRequired\n}\n","import PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../../lib/types';\nimport LabeledInput from '../LabeledInput';\n\nexport default function PopulationSampleSizeInput({ sampleSize, setSampleSize, id }) {\n\n  const setValue = (value) => {\n    setSampleSize(id, 'sampleSize', value)\n  }\n\n  return (\n    <LabeledInput min={1} max={500} label={`Set sample size for Population ${id}: `} value={sampleSize} setValue={setValue}/>\n  )\n}\n\nPopulationSampleSizeInput.propTypes = {\n  sampleSize: stringOrNumberType.isRequired,\n  setSampleSize: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired\n}\n","import _ from 'lodash';\nimport { useState } from 'react'\nimport LabeledSelector from '../LabeledSelector';\nimport PopulationMeanInput from './PopulationMeanInput';\nimport { Button, ButtonGroup, Col, Row } from 'react-bootstrap';\nimport { generateNormal, getCounts } from '../../lib/stats-utils';\nimport PropTypes from 'prop-types';\nimport PopulationSampleSizeInput from './PopulationSampleSizeInput';\nimport { anovaPopulationObjectType } from '../../lib/types.js';\nimport { randomInt } from 'mathjs';\n\nexport default function PopulationSettings({ populations, setPopulations }) {\n  const [stdDev, setStdDev] = useState(3);\n\n  const resetPopulations = () => {\n    const newPops = populations.map((pop) => ({ ...pop, data: [], sample: [] }));\n    setPopulations(newPops);\n  }\n\n  const setNumPops = (numPops) => {\n    if (numPops <= populations.length) {\n      // keep only a slice of the population array but reset the data and the sample\n      const newPops = populations.slice(0, numPops).map((pop) => (\n        {\n          ...pop,\n          data: [],\n          sample: []\n        }\n      ));\n      setPopulations(newPops);\n    } else {\n      const newPops = [\n        // add new populations with randomized mean and sample size of 30 and reset all data and samples\n        ...populations.map((pop) => ({...pop, data: [], sample: []})),\n        ..._.range(populations.length, numPops).map((i) => (\n          {\n            id: i+1,\n            mean: randomInt(-5, 6),\n            sampleSize: 30,\n            data: [],\n            sample: []\n          }\n        ))\n      ];\n      setPopulations(newPops);\n    }\n  };\n\n  const setPopulationAttr = (id, attr, value) => {\n    const newPopulations = populations.map((pop) => {\n      if (pop.id === id) {\n        return {\n          ...pop,\n          [attr]: value,\n          data: (attr === 'mean') ? [] : pop.data,\n          sample: (attr === 'mean') ? [] : pop.sample\n        }\n      } else {\n        return pop\n      }\n    });\n    setPopulations(newPopulations);\n  }\n\n  const generatePopulations = () => {\n    setPopulations(populations.map((pop) => {\n      const data = getCounts(generateNormal(500, pop.mean, stdDev, 1));\n      return { ...pop, data, sample: [] }\n    }));\n  }\n\n  const generateSamples = () => {\n    setPopulations(populations.map((pop) => {\n      const sample = _.sampleSize(pop.data, pop.sampleSize);\n      return { ...pop, sample }\n    }));\n  }\n\n  const changeSTD = (val) => {\n    setStdDev(val);\n    resetPopulations();\n  }\n\n  return (\n    <>\n      <LabeledSelector min={2} max={20} label=\"Set the number of populations:\" value={populations.length} setValue={setNumPops}/>\n      {(populations.length > 0) && (\n        <>\n          <br/>\n          <LabeledSelector min={1} max={4} label=\"Set the standard deviations:\" value={stdDev} setValue={changeSTD}/>\n          <br/>\n        </>\n      )}\n      {populations.map(({ sampleSize, mean, id }) => (\n        <Row key={id}>\n          <Col xl={{span: 4, offset: 2}} xs=\"6\">\n            <PopulationMeanInput mean={mean} setMean={setPopulationAttr} id={id}/>\n          </Col>\n          <Col xl=\"4\" xs=\"6\">\n            <PopulationSampleSizeInput sampleSize={sampleSize} setSampleSize={setPopulationAttr} id={id}/>\n          </Col>\n        </Row>\n      ))}\n      <br/>\n      <ButtonGroup>\n        <Button variant=\"outline-primary\" onClick={() => generatePopulations()}>Generate Populations</Button>\n        <Button\n          variant=\"outline-primary\"\n          disabled={populations.some(({ data }) => data.length === 0)}\n          onClick={() => generateSamples()}\n        >\n          Take Samples\n        </Button>\n      </ButtonGroup>\n    </>\n  )\n}\n\nPopulationSettings.propTypes = {\n  populations: PropTypes.arrayOf(anovaPopulationObjectType).isRequired,\n  setPopulations: PropTypes.func.isRequired\n}\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { anovaPopulationObjectType, stringOrNumberType } from '../../lib/types';\nimport { Alert, Button, Form, InputGroup } from 'react-bootstrap';\nimport _ from 'lodash';\nimport { mean, std, sum } from 'mathjs';\nimport { jStat } from 'jstat';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport { InlineMath } from 'react-katex';\n\nexport default function DistributionOfFStatistic({ populations, alpha }) {\n  const [numSamples, setNumSamples] = useState('');\n  const [accepts, setAccepts] = useState([]);\n  const [rejects, setRejects] = useState([]);\n\n  const runSimulation = () => {\n    const fStats = [];\n    for (let i = 0; i < numSamples; i++) {\n      // calculate F-statistic and p-value\n      const sampleObjects = populations.map(({ data, sampleSize }) => _.sampleSize(data, sampleSize));\n      const samples = sampleObjects.map((sample) => sample.map(({ x }) => x));\n      const overallSampleMean = (_.flatten(samples).length > 0) ? mean(_.flatten(samples)) : undefined;\n      const SSTR = sum(samples.map((sample) => sample.length * (mean(sample) - overallSampleMean) ** 2));\n      const MSTR = SSTR / (populations.length - 1);\n      const SSE = sum(samples.map((sample) => (sample.length - 1) * std(sample) ** 2));\n      const MSE = SSE / (sum(samples.map((sample) => sample.length)) - populations.length);\n      const F = MSTR / MSE;\n      const pValue = jStat.anovaftest(...samples);\n      // round slightly differently below 1 so there are no f-stats = 0\n      fStats.push({ F: (F < 1) ? +F.toPrecision(2) : _.round(F, 2), pValue, reject: pValue < +alpha });\n    }\n    const fCounts = {};\n    const newRejects = [];\n    const newAccepts = [];\n    // separate F-stats into two arrays for rejecting/failing to reject\n    fStats.forEach(({ F, pValue, reject }) => {\n      fCounts[F] = _.defaultTo(fCounts[F] + 1, 1);\n      const fObject = {\n        x: +F,\n        y: fCounts[F],\n        F,\n        pValue: pValue.toPrecision(3),\n        reject,\n      }\n      if (reject) {\n        newRejects.push(fObject)\n      } else {\n        newAccepts.push(fObject)\n      }\n    });\n    setAccepts(newAccepts);\n    setRejects(newRejects);\n  }\n\n  const chart = {\n    chart: {\n      zoomType: 'xy',\n      animation: false,\n      type: 'scatter'\n    },\n    title: {\n      text: ''\n    },\n    xAxis: {\n      title: {\n        text: 'F-Statistic',\n      },\n      min: 0,\n      startOnTick: true,\n      endOnTick: true\n    },\n    yAxis: {\n      allowDecimals: false,\n      startOnTick: true,\n      endOnTick: true,\n      min: 0,\n      title: {\n        text: 'Observations of F-Statistic'\n      }\n    },\n    tooltip: {\n      pointFormat: 'F-Statistic: <b>{point.F}</b><br/>p-value: <b>{point.pValue}</b><br/>reject H_0: <b>{point.reject}</b></br>'\n    },\n    // fail to reject and reject are in two different series so they can be colored differently\n    // I can't figure out how to color points within one series differently so this is the best option\n    series: [\n      {\n        name: 'Fail to Reject H_0',\n        type: 'scatter',\n        data: accepts,\n        color: '#03fc0b',\n        marker: {\n          symbol: 'diamond',\n          radius: 4,\n          lineColor: 'green',\n          lineWidth: 1\n        }\n      },\n      {\n        name: 'Reject H_0',\n        type: 'scatter',\n        data: rejects,\n        color: 'red',\n        marker: {\n          symbol: 'diamond',\n          radius: 4,\n          lineColor: '#800000',\n          lineWidth: 1\n        }\n      }\n    ]\n  }\n\n  return (\n    <>\n      <Alert variant=\"secondary\">\n        <p>Let's plot the distribution of the F-Statistic:</p>\n        <InputGroup className=\"sample-size-input\">\n          <Form.Control\n            align=\"right\"\n            type=\"number\"\n            placeholder=\"Number of Replications:\"\n            min={1}\n            value={numSamples}\n            onChange={(event) => setNumSamples(event.target.value)}\n          />\n          <Button\n            variant=\"secondary\"\n            disabled={!numSamples || numSamples < 1} onClick={() => runSimulation()}\n          >\n            Simulate\n          </Button>\n        </InputGroup>\n      {([...accepts, ...rejects].length > 0) && (\n        <>\n          <p>\n            <strong>Distribution of F-Statistic </strong>\n            (<InlineMath math={`df_{num} = ${populations.length - 1}, df_{den} = ${sum(populations.map(({ sampleSize }) => sampleSize)) - populations.length}`}/>)\n          </p>\n          <HighchartsReact highcharts={Highcharts} options={chart}/>\n        </>\n      )}\n      </Alert>\n      {([...accepts, ...rejects].length > 0) && (\n        <Alert variant=\"primary\">\n          {`We rejected the null hypothesis in ${100 * rejects.length / (rejects.length + accepts.length)}% of replications.`}\n        </Alert>\n      )}\n    </>\n  )\n}\n\nDistributionOfFStatistic.propTypes = {\n  populations: PropTypes.arrayOf(anovaPopulationObjectType).isRequired,\n  alpha: stringOrNumberType.isRequired\n}\n","import { min } from 'mathjs';\nimport { Col, Row } from 'react-bootstrap';\nimport DotPlot from '../DotPlot';\nimport PropTypes from 'prop-types';\nimport { anovaPopulationObjectType } from '../../lib/types';\n\nexport default function SimulationPopulationsDisplay({ populations }) {\n  return (\n    <Row xs={1} sm={2} md={min(populations.length, 4)}>\n      {populations.map(({ id, data }) => (\n        <Col key={id}>\n          <DotPlot\n            series={[{ name: 'Population Observations', data, showInLegend: false }]}\n            title={`Population ${id}`}\n            xMin={-20}\n            xMax={20}\n            xLabel=\"Value\"\n            yLabel=\"Observations\"\n          />\n        </Col>\n      ))}\n    </Row>\n  )\n}\n\nSimulationPopulationsDisplay.propTypes = {\n  populations: PropTypes.arrayOf(anovaPopulationObjectType).isRequired\n}\n","import _ from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { InlineMath } from 'react-katex';\nimport { generateNormal, getCounts } from '../../lib/stats-utils';\nimport LabeledInput from '../LabeledInput';\nimport LabeledSelector from '../LabeledSelector';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../../lib/types';\n\nexport default function SimulationPopulationSettings({ setPopulations, alpha, setAlpha }) {\n  const [numPops, setNumPops] = useState(2);\n  const [mean, setMean] = useState(0);\n  const [stdDev, setStdDev] = useState(3);\n\n  useEffect(() => {\n    setPopulations([]);\n  }, [numPops, alpha, mean, stdDev, setPopulations]);\n\n  const generatePopulations = () => {\n    const newPopulations = _.range(1, numPops + 1).map((id) => ({\n      data: getCounts(generateNormal(500, mean, stdDev, 1)),\n      id,\n      sampleSize: 30\n    }));\n    setPopulations(newPopulations);\n  }\n\n  return (\n    <>\n      <LabeledSelector min={2} max={20} label=\"Number of populations:\" value={numPops} setValue={setNumPops}/>\n      <br/>\n      <LabeledInput\n        min={0}\n        max={1}\n        step={0.01}\n        label={<>Tolerance <InlineMath math=\"\\alpha\"/>:</>}\n        value={alpha}\n        setValue={setAlpha}\n      />\n      <br/>\n      <p>\n        The null hypothesis <InlineMath math=\"H_0\"/> is that <InlineMath math={`\\\\mu_1 = \\\\mu_2 ${(numPops > 3) ? '= \\\\dotsc' : ''} ${(numPops > 2) ? `= \\\\mu_{${numPops}}` : ''}`}/>.\n      </p>\n      <LabeledSelector min={-5} max={5} label=\"Set mean of all populations:\" value={mean} setValue={setMean}/>\n      <br/>\n      <LabeledSelector min={1} max={4} label=\"Set the standard deviations:\" value={stdDev} setValue={setStdDev}/>\n      <br/>\n      <Button\n        variant=\"outline-primary\"\n        onClick={() => generatePopulations()}\n      >\n        Generate Populations\n      </Button>\n    </>\n  )\n}\n\nSimulationPopulationSettings.propTypes = {\n  setPopulations: PropTypes.func.isRequired,\n  alpha: stringOrNumberType.isRequired,\n  setAlpha: PropTypes.func.isRequired\n}\n","import PropTypes from 'prop-types';\nimport { Row } from 'react-bootstrap';\nimport { anovaPopulationObjectType } from '../../lib/types';\nimport LabeledInput from '../LabeledInput';\n\nexport default function SimulationSampleSettings({ populations, setPopulations }) {\n  const setSampleSize = (id, value) => {\n    const newPopulations = populations.map((pop) => ({\n      ...pop,\n      sampleSize: (pop.id === id) ? value : pop.sampleSize\n    }));\n    setPopulations(newPopulations);\n  }\n\n  return (\n    <>\n      {populations.map(({ sampleSize, id }) => (\n        <Row key={id}>\n          <LabeledInput\n            min={1}\n            max={500}\n            label={`Set sample size for Population ${id}: `}\n            value={sampleSize}\n            setValue={(val) => setSampleSize(id, val)}/>\n        </Row>\n      ))}\n    </>\n  )\n}\n\nSimulationSampleSettings.propTypes = {\n  populations: PropTypes.arrayOf(anovaPopulationObjectType).isRequired,\n  setPopulations: PropTypes.func.isRequired\n}\n","import { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport DistributionOfFStatistic from './DistributionOfFStatistic';\nimport SimulationPopulationsDisplay from './SimulationPopulationsDisplay';\nimport SimulationPopulationSettings from './SimulationPopulationSettings';\nimport SimulationSampleSettings from './SimulationSampleSettings';\n\nexport default function SimulateType1Error() {\n  const [showSim, setShowSim] = useState(false);\n  const [populations, setPopulations] = useState([]);\n  const [alpha, setAlpha] = useState(0.05);\n\n  return (\n    <>\n      <Button\n        active={showSim}\n        variant=\"outline-primary\"\n        onClick={() => setShowSim(true)}\n      >\n        Simulate Type I Error for ANOVA\n      </Button>\n      <br/>\n      <br/>\n      {showSim && (\n        <>\n          <SimulationPopulationSettings\n            setPopulations={setPopulations}\n            alpha={alpha}\n            setAlpha={setAlpha}\n          />\n          <br/>\n          <br/>\n          {(populations.length > 0) && (\n            <>\n              <SimulationPopulationsDisplay populations={populations}/>\n              <br/>\n              <SimulationSampleSettings populations={populations} setPopulations={setPopulations}/>\n              <br/>\n              <DistributionOfFStatistic populations={populations} alpha={alpha}/>\n            </>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n","import { randomInt } from 'mathjs';\nimport { useState, Fragment, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport FTest from './FTest';\nimport PopulationRow from './PopulationRow';\nimport PopulationSettings from './PopulationSettings';\nimport SimulateType1Error from './SimulateType1Error';\n\nexport default function ANOVA() {\n  const [showResults, setShowResults] = useState(false);\n  const [populations, setPopulations] = useState([\n    {\n      id: 1,\n      mean: randomInt(-5, 6),\n      sampleSize: 30,\n      data: [],\n      sample: []\n    },\n    {\n      id: 2,\n      mean: randomInt(-5, 6),\n      sampleSize: 30,\n      data: [],\n      sample: []\n    }\n  ]);\n\n  useEffect(() => {\n    setShowResults(false)\n  }, [populations]);\n\n  const samples = populations.map(({ sample }) => sample.map(({ x }) => x));\n\n  return (\n    <>\n      <PopulationSettings populations={populations} setPopulations={setPopulations}/>\n      {populations.every(({ data }) => data.length !== 0) && (\n        <>\n          {populations.map(({ id, data, sample, sampleSize }) => (\n            <Fragment key={id}>\n              <hr/>\n              <PopulationRow data={data} sample={sample} id={id} sampleSize={sampleSize}/>\n            </Fragment>\n          ))}\n          <hr/>\n          <Button\n            variant=\"outline-primary\"\n            active={showResults}\n            onClick={() => setShowResults(true)}\n            disabled={samples.some((sample) => sample.length === 0)}\n          >\n            Run F-Test\n          </Button>\n          {showResults && (\n            <>\n              <FTest populations={populations} samples={samples}/>\n              <hr/>\n              <SimulateType1Error/>\n            </>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n","import { InlineMath } from 'react-katex';\nimport SimulationIntro from '../SimulationIntro';\nimport ANOVA from './ANOVA';\n\nexport default function ANOVAContainer() {\n\n  return (\n    <div className=\"module-container\">\n      <SimulationIntro\n        name=\"ANOVA\"\n        text={<>The module presents a simple version of ANOVA (Analysis of Variance), in which we test the null hypothesis that the means of two or more populations are equal. We have to make two assumptions to begin: (1) all population groups are normally distributed, and (2) the population standard deviations of all groups are equal. After we take samples, we compose a test statistic (<InlineMath math=\"F\"/>) that compares the variation across groups to the variation within groups.</>}\n      />\n      <br/>\n      <ANOVA/>\n    </div>\n  );\n}\n","import LawOfLargeNumbersContainer from './LawOfLargeNumbers/LawOfLargeNumbersContainer.js';\nimport CentralLimitTheoremContainer from './CentralLimitTheorem/CentralLimitTheoremContainer.js';\nimport JointDistributionsContainer from './JointDistributions/JointDistributionsContainer.js';\nimport LeastSquaresContainer from './LeastSquares/LeastSquaresContainer.js';\nimport OmittedVariableBiasContainer from './OmittedVariableBias/OmittedVariableBiasContainer.js';\nimport ConfidenceIntervalsContainer from './ConfidenceIntervals/ConfidenceIntervalsContainer.js';\nimport HypothesisTestingContainer from './HypothesisTesting/HypothesisTestingContainer.js';\nimport SampleDistributionOLSEstimatorsContainer from './SampleDistributionOLSEstimators/SampleDistributionOLSEstimatorsContainer.js';\nimport MultipleRegressionContainer from './MultipleRegression/MultipleRegressionContainer.js';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { MODULES } from '../lib/constants.js';\nimport OLSEstimatorsAreConsistentContainer from './OLSEstimatorsAreConsistent/OLSEstimatorsAreConsistentContainer.js';\nimport ANOVAContainer from './ANOVA/ANOVAContainer.js';\n\n\nexport default function SimulationContainer({ mode, setMode }) {\n  return (\n    <div data-testid=\"sim-container\" style={{paddingBottom: 25}}>\n      <Button className=\"home-button\" variant=\"outline-danger\" id=\"Menu\" onClick={() => setMode('Home')}>MENU</Button>\n      <div className=\"mini-logo\"/>\n      {mode === 'Law of Large Numbers' && <LawOfLargeNumbersContainer/>}\n      {mode === 'Central Limit Theorem' && <CentralLimitTheoremContainer/>}\n      {mode === 'Joint Distributions' && <JointDistributionsContainer/>}\n      {mode === 'Least Squares' && <LeastSquaresContainer/>}\n      {mode === 'Omitted Variable Bias' && <OmittedVariableBiasContainer/>}\n      {mode === 'Confidence Intervals' && <ConfidenceIntervalsContainer/>}\n      {mode === 'Hypothesis Testing' && <HypothesisTestingContainer/>}\n      {mode === 'Sample Distribution of OLS Estimators' && <SampleDistributionOLSEstimatorsContainer/>}\n      {mode === 'Multiple Regression' && <MultipleRegressionContainer/>}\n      {mode === 'The OLS Estimators are Consistent' && <OLSEstimatorsAreConsistentContainer/>}\n      {mode === 'ANOVA' && <ANOVAContainer/>}\n    </div>\n  )\n}\n\nSimulationContainer.propTypes = {\n  setMode: PropTypes.func.isRequired,\n  mode: PropTypes.oneOf(MODULES.map((obj) => obj.name)).isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport SimBar from './SimBar.js';\nimport StartHere from './StartHere';\nimport { Fade } from 'react-bootstrap';\nimport SimulationContainer from './SimulationContainer.js';\n\nexport default function SimulationMenu() {\n  const [mode, setMode] = useState('Home');\n  const [start, setStart] = useState(true);\n  const [logo, setLogo] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLogo(false);\n    }, 3500);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const teachingMaterialsLink = (\n    <p>\n      <a\n        href=\"https://amandagreggeconomics.com/statistics-simulations-project/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        View teaching materials\n      </a>\n    </p>\n  );\n\n  return (\n    start ? (\n      <div>\n        <div className=\"intro-animation\"/>\n        {!logo && (\n          <>\n            <StartHere start={start} showApp={() => setStart(false)}/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            {teachingMaterialsLink}\n          </>\n        )}\n      </div>\n    ) : (\n      <div>\n        {(mode === 'Home') ? (\n          <Fade in={(mode === 'Home')}>\n            <>\n              <SimBar setSection={setMode}/>\n              {teachingMaterialsLink}\n            </>\n          </Fade>\n        ) : (\n          <SimulationContainer mode={mode} setMode={setMode}/>\n        )}\n      </div>\n    )\n  );\n}\n","import './styles/App.css';\nimport SimulationMenu from './components/SimulationMenu.js';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <SimulationMenu/>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl); //eslint-disable-line\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); //eslint-disable-line\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport { unregister } from './registerServiceWorker';\n\nunregister();\n\nReactDOM.render(<App />, document.getElementById(\"root\")); // eslint-disable-line\n// registerServiceWorker();\n"],"sourceRoot":""}