{"version":3,"sources":["components/SimBarOption.js","lib/constants.js","components/SimBar.js","components/StartHere.js","components/SelectorButtonGroup.js","lib/types.js","components/PopBar.js","components/Collapsable.js","components/DotPlot.js","components/PopTable.js","components/ChartContainer.js","components/SampleSizeInput.js","lib/stats-utils.js","components/LawOfLargeNumbers/SimulateSamples.js","components/LawOfLargeNumbers/LLNSimulation.js","components/LawOfLargeNumbers/LawOfLargeNumbers.js","components/CentralLimitTheorem/SampleMeanChart.js","components/CentralLimitTheorem/SampleMeansSimulator.js","components/CentralLimitTheorem/SampleMeansTable.js","components/CentralLimitTheorem/CLTSimulation.js","components/CentralLimitTheorem/CentralLimitTheorem.js","components/JointDistributions/MeanSDInput.js","components/JointDistributions/JointChart.js","components/JointDistributions/JDCharts.js","components/InputSlider.js","components/JointDistributions/JDSimulation.js","components/JointDistributions/JointDistributions.js","components/OmittedVariableBias/CoefficientInput.js","components/OmittedVariableBias/OmittedVariableChart.js","components/OmittedVariableBias/OVBSimulation.js","components/OmittedVariableBias/OmittedVariableBias.js","components/ConfidenceIntervals/ConfidenceInputs.js","components/ConfidenceIntervals/ConfidenceIntervalsChart.js","components/ConfidenceIntervals/ManySamplesInput.js","components/ConfidenceIntervals/SamplesTable.js","components/ConfidenceIntervals/PopulationChart.js","components/ConfidenceIntervals/CISimulation.js","components/ConfidenceIntervals/ConfidenceIntervals.js","components/HypothesisTesting/Conclusion.js","components/HypothesisTesting/PopulationChartReveal.js","components/HypothesisTesting/ResultsDisplay.js","components/HypothesisTesting/SampleSizeAlphaInput.js","components/HypothesisTesting/NormalCurve.js","components/HypothesisTesting/ManySamplesInput.js","components/HypothesisTesting/StdNormalCurve.js","components/HypothesisTesting/SimulateTypeOneError.js","components/HypothesisTesting/PerformTest.js","components/HypothesisTesting/TestInputs.js","components/HypothesisTesting/HypothesisSelector.js","components/HypothesisTesting/HTSimulation.js","components/HypothesisTesting/HypothesisTesting.js","components/ScatterPlot.js","components/SampleDistributionOLSEstimators/SamplesTable.js","components/SampleDistributionOLSEstimators/PopulationAndSampleCharts.js","components/SampleDistributionOLSEstimators/StandardNormalOLS.js","components/SampleDistributionOLSEstimators/SlopeDistributionPlot.js","components/SampleDistributionOLSEstimators/InterceptDistributionPlot.js","components/SampleDistributionOLSEstimators/MultipleSamplesInput.js","components/SampleDistributionOLSEstimators/SDOLSESimulation.js","components/SampleDistributionOLSEstimators/SampleDistributionOLSEstimators.js","components/LeastSquares/NewPointsInput.js","components/LeastSquares/LeastSquaresChart.js","components/LeastSquares/PlotLine.js","components/LeastSquares/LeastSquaresSimulation.js","components/LeastSquares/LeastSquares.js","components/SimulationContainer.js","components/SimulationMenu.js","App.js","registerServiceWorker.js","index.js"],"names":["SimBarOption","section","setSection","Card","border","className","Body","Text","description","Button","variant","onClick","name","style","width","VALUES","Normal","xmaxval","xminval","ymaxval","title","xLabel","tableCol","Uniform","Exponential","Mystery","VALUES_ALT","OLSE_VALUES","Continuous","xMin","xMax","yMin","yMax","yLabel","xCategories","slopeMin","slopeMax","interceptMin","interceptMax","yTickInterval","Binary","TEXTS","TEXTS_ALT","HYPOTHESIS_OPTIONS","oneSample","type","hypoText","nullH","alterH","sides","twoSample","MODULES","SimBar","sections","map","data-testid","StartHere","start","showApp","Fade","in","SelectorButtonGroup","options","select","selected","buttons","option","ButtonGroup","distributionType","PropTypes","oneOf","dataObjectArrayType","arrayOf","shape","x","number","isRequired","y","id","size","mean","string","data","color","enableMouseTracking","bool","showInLegend","visible","label","oneOfType","object","marker","animation","lowerConf","upperConf","confidenceLevel","distribution","reject","slope","intercept","PopBar","setPop","useState","setSelected","mode","Collapsable","children","margin","textAlign","backgroundColor","marginBottom","isOpened","springConfig","presets","gentle","height","padding","DotPlot","series","zoom","chart","setChart","useEffect","newChart","plotOptions","duration","easing","legend","symbolHeight","symbolWidth","symbolRadius","xAxis","min","max","enabled","text","startOnTick","endOnTick","yAxis","seriesObject","length","turboThreshold","tooltip","pointFormat","highcharts","Highcharts","Label","PopTable","popArray","sampleIDs","popShape","rows","includes","undefined","Table","striped","ChartContainer","popMean","sampled","sampleMean","format","toFixed","Container","fluid","Row","Alert","Col","lg","md","obj","_","round","SampleSizeInput","maxSize","minSize","handleClick","sampleSize","setSampleSize","InputGroup","Form","Control","align","placeholder","value","onChange","event","target","disabled","getCounts","counts","entries","countBy","forEach","amt","count","i","push","generateNormal","standardDev","precision","PD","rnorm","num","generateUniform","low","hi","runif","generateExponential","lambda","rexp","generateChiSquared","degreesOfFreedom","rchisq","generateMystery","mysteryMean1","mysteryMean2","mysterySD1","mysterySD2","normal1","normal2","dataFromDistribution","distType","getDistributionFunction","population","shuffle","index","populationMean","attr","p","populationStandardDev","std","calculateOneSampleTestStatistic","mu0","jStat","zscore","sqrt","tscore","calculateTwoSampleTestStatistic","sampleMean1","sampleMean2","standardDev1","standardDev2","sampleSize1","sampleSize2","calculatePValue","testStat","equality","pval","ztest","ttest","convertToStandardNormal","array","popSD","SimulateSamples","setSampled","meanLine","setMeanLine","setStart","states","hover","normal","inactive","timer","n","setInterval","newSamples","clearInterval","sample","currSampled","currMeanLine","body","LLNSimulation","stage","setStage","setPopArray","newPop","LawOfLargeNumbers","setPopType","SampleMeanChart","sampleMeans","sd","normalized","setNormalized","newSampleMeans","meanCounts","sampleMeansPoints","onlyValues","onlyCounts","Check","inline","SampleMeansSimulator","addSamples","numberResamples","setNumberResamples","resampleSize","setResampleSize","resample","samplePop","runSim","SampleMeansTable","tableBody","CLTSimulation","mainSampleSize","setSampleMeans","newMeans","means","CentralLimitTheorem","MeanSDInput","setMean","setSD","step","aria-label","JointChart","jointData","sharedOptions","nodeId","position","float","marginLeft","colors","node","yScale","yFormat","e","formattedX","formattedY","axisBottom","tickSize","legendPosition","legendOffset","axisLeft","JDCharts","parentData","childData","setNodeId","handleMouseMove","useCallback","handleMouseLeave","animate","top","right","bottom","left","xScale","blendMode","xFormat","nodeSize","useMemo","enableGridX","enableGridY","onMouseMove","onMouseLeave","marginRight","InputSlider","custom","JDSimulation","parentMean","setParentMean","childMean","setChildMean","parentSD","setParentSD","childSD","setChildSD","correlation","setCorrelation","parent","child","joint","allData","setAllData","xl","xs","covariance","abs","covMatrix","MultivariateNormal","jointSeries","parentHeight","childHeight","parentCounts","parentSeries","childCounts","childSeries","generate","JointWrapper","CoefficientInput","beta","setBeta","delta","setDelta","OmittedVariableChart","dataPoints","naiveLine","correctedLine","myChart","setMyChart","zoomtype","OVBSimulation","setSeries","showCorrect","setShowCorrect","points","OBS","generatePoints","int","epsilon","ones","colOne","colTwo","scores","scorePoint","studyScores","regression","linear","equation","naiveSlope","naiveInt","X","transpose","matrix","Y","inverse","inv","multiply","bHat","parseFloat","get","sm","covarianceMatrix","stdX","stdY","seriesArr","a","b","generateSeries","span","offset","active","OmittedVariableBias","ConfidenceInputs","setDistType","confLevel","setConfLevel","pct","slice","ConfidenceIntervalsChart","samples","containsMean","doesntContainMean","sampleObject","high","tooltipFormat","headerFormat","outside","borderColor","inverted","zoomType","events","selection","point","click","this","cursor","reversed","tickPixelInterval","tickInterval","centerInCategory","allowPointSelect","symbol","radius","zIndex","toString","ManySamplesInput","populationSize","SamplesTable","samplesTable","toUpperCase","reverse","overflow","marginTop","PopulationChart","CISimulation","setSamples","unselect","charts","generateSamples","replications","sampleObjects","ciFunction","normalci","tci","indexedSamples","filter","ConfidenceIntervals","Conclusion","result","relation","firstMean","secondMean","testType","PopulationChartReveal","popArr","popArr2","popMean2","console","log","popArrMax","popArr2Max","maxHeight","lineColor","lineWidth","ResultsDisplay","mean2","testStatistic","pValue","alpha","toPrecision","SampleSizeAlphaInputs","setAlpha","popSize","setSampleSize2","showSecondInput","More","NormalCurve","popStandardDev","setPopulation","labels","rejects","accepts","defaultTo","meanObject","baseSeries","StdNormalCurve","SimulateTypeOneError","sd1","sd2","population2","setPopulation2","standardized","setStandardized","random","dotPlotSeries","meansDiff","clear","sample2","PerformTest","setPopArr","setSample","originalPop","setOriginalPop","originalPopSample","setOriginalPopSample","originalPopSampleSize","setOriginalPopSampleSize","popMean1","sampleSD","populationSD","originalSampleMean","originalSampleSD","originalPopSD","twoSampleSD1","twoSampleSD2","TestInputs","setTestType","paddingBottom","BellCurve","HypothesisSelector","setHypothesis","setMu0","menuOptions","Dropdown","Item","DropdownButton","HTSimulation","setPopShape","hypothesis","HypothesisTesting","ScatterPlot","categories","PopulationAndSampleCharts","selectSample","populationShape","mainSeries","sampleSeries","math","StandardNormalOLS","seriesName","SlopeDistributionPlot","slopeMean","slopeSD","standardizedData","plotData","InterceptDistributionPlot","interceptMean","interceptSD","MultipleSamplesInput","SDOLSESimulation","setData","meanX","meanY","corr","clamp","generateScatter","mean1","std1","std2","control","category","jobCorps","generateBinary","uniq","SampleDistributionOLSEstimators","setPopulationShape","NewPointsInput","numPoints","setNumPoints","require","LeastSquaresChart","linePoints","setSquareAreas","plotBorderColor","plotBorderWidth","hideDelay","buildSquare","p1","p2","dist","lowestPt","pairs","areas","squares","dashStyle","fill","fillColor","annotations","draggable","shapes","PlotLine","squareAreas","generateBestLine","reduce","LeastSquaresSimulation","setPoints","setLinePoints","setSlope","setIntercept","linearPts","sort","paddingTop","newPoints","LeastSquares","SimulationContainer","setMode","SimulationMenu","logo","setLogo","setTimeout","clearTimeout","App","Annotations","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b550bef5.chunk.js","sourcesContent":["import { Button, Card } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function SimBarOption({ section, setSection }) {\n  return (\n    <Card border=\"primary\" className=\"sim-option\">\n      <Card.Body>\n        <Card.Text>{section.description}</Card.Text>\n        <Button variant=\"outline-primary\" onClick={() => setSection(section.name)} style={{width: '100%'}}>\n          {section.name}\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nSimBarOption.propTypes = {\n  setSection: PropTypes.func.isRequired,\n  section: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n}\n","export const SAMPLE_SIZE = 2000;\n\nexport const VALUES = {\n  Normal: { xmaxval: 75, xminval: 50, ymaxval: 40, title: 'Milk Production', xLabel: 'Gallons', tableCol: 'Cow' },\n  Uniform: { xmaxval: 10, xminval: -10, ymaxval: 25, title: 'Lottery Outcome', xLabel: 'Dollars', tableCol: 'Person' },\n  Exponential: { xmaxval: 500, xminval: 0, ymaxval: 10, title: 'Duration of Telemarketer Call', xLabel: 'Duration (seconds)', tableCol: 'Call' },\n  'Chi-Squared': { xmaxval: 30, xminval: 0, ymaxval: 40, title: 'Money Spent on Lunch', xLabel: 'Dollars', tableCol: 'Worker' },\n  Mystery: { xmaxval: 80, xminval: 50, ymaxval: 60, title: 'Alien Female Height', xLabel: 'Height (in)', tableCol: 'Alien' }\n}\n\nexport const VALUES_ALT = {\n  Normal: { xmaxval: 75, xminval: 50, title: 'Milk Production', xLabel: 'Gallons' },\n  Uniform: { xmaxval: 75, xminval: 55, title: 'Alien Female Height', xLabel: 'Height (in)' },\n  Exponential: { xmaxval: 500, xminval: 0, title: 'Duration of Telemarketer Call', xLabel: 'Duration (seconds)' },\n  'Chi-Squared': { xmaxval: 30, xminval: 0, title: 'Money Spent on Lunch', xLabel: 'Dollars' }\n}\n\nexport const OLSE_VALUES = {\n  Continuous: { xMin: 0, xMax: 15, yMin: 20, yMax: 100, xLabel: 'Study Hours', yLabel: 'Test Score', xCategories: null, slopeMin: -5, slopeMax: 5, interceptMin: 20, interceptMax: 100, yTickInterval: 20 },\n  Binary: { xMin: 0, xMax: 1, yMin: 50, yMax: 350, yLabel: 'Monthly Earnings', xCategories: ['Control Group', 'Job Corps'], title: 'Sample', slopeMin: -10, slopeMax: 30, interceptMin: 175, interceptMax: 225, yTickInterval: 50 }\n}\n\nexport const TEXTS = {\n  Normal: ['monthly Milk Production', 'cows', 'produced', ' gallons a month.'],\n  // Uniform: [\"the wait time\", \"people at the DMV in VT\", \"reported a total time of\", \" minutes.\"],\n  Exponential: ['duration', 'Telemarketer Calls', 'reported a duration of', ' seconds on a call.'],\n  'Chi-Squared': ['expenditure', 'workers on lunch', 'reported an expenditure of', ' dollars on lunch.'],\n  Mystery: ['the height', 'Alien Females from planet Stata', 'reported a height of', ' inches.'],\n}\n\nexport const TEXTS_ALT = {\n  Normal: ['monthly Milk Production', 'cows'],\n  Uniform: ['the height', 'Alien Females from planet Stata'],\n  Exponential: ['duration', 'Telemarketer Calls'],\n  'Chi-Squared': ['expenditure', 'workers on lunch']\n}\n\nexport const HYPOTHESIS_OPTIONS = {\n  oneSample: [\n    {\n      type: '>',\n      hypoText: 'Option 1: These cows produce more than ',\n      nullH: 'H_0: μ ≤  ',\n      alterH: 'H_a: μ >  ',\n      sides: 1\n    },\n    {\n      type: '<',\n      hypoText: 'Option 2: These cows produce less than ',\n      nullH: 'H_0: μ ≥  ',\n      alterH: 'H_a: μ <  ',\n      sides: 1\n    },\n    {\n      type: '!=',\n      hypoText: 'Option 3: These cows produce an amount not equal to ',\n      nullH: 'H_0: μ =  ',\n      alterH: 'H_a: μ ≠  ',\n      sides: 2\n    }\n  ],\n  twoSample: [\n    {\n      type: '<',\n      hypoText: 'Option 1: These cows produce more than they did before.',\n      nullH: 'H_0: μ_1 - μ_2 ≥ 0',\n      alterH: 'H_a: μ_1 - μ_2 < 0',\n      sides: 1\n    },\n    {\n      type: '>',\n      hypoText: 'Option 2: These cows produce less than they did before',\n      nullH: 'H_0: μ_1 - μ_2 ≤ 0',\n      alterH: 'H_a: μ_1 - μ_2 > 0',\n      sides: 1\n    },\n    {\n      type: '!=',\n      hypoText: 'Option 3: These cows produce a different amount now compared to before.',\n      nullH: 'H_0: μ_1 - μ_2 = 0',\n      alterH: 'H_a: μ_1 - μ_2 ≠ 0',\n      sides: 2\n    }\n  ]\n}\n\nexport const MODULES = [\n  {\n    name: 'Law of Large Numbers',\n    description: 'The Law of Large Numbers tells us that that the sample mean approaches the mean of the population as we increase the sample size. This simulation investigates the behavior of the sample mean as we change the sample size.',\n  },\n  {\n    name: 'Central Limit Theorem',\n    description: 'The Central Limit Theorem states that, for sufficiently large samples, the sample mean is approximately normally distributed, even if the underlying population is not normally distributed (or if we have no idea what the underlying population looks like). This simulation investigates how the distribution of the sample mean is affected by the sample size and the shape of the population distribution.',\n  },\n  {\n    name: 'Joint Distributions',\n    description: 'A joint probability distribution describes the simultaneous behavior of two random variables.',\n  },\n  {\n    name: 'Least Squares',\n    description: 'Ordinary least squares regression estimates the slope(s) and intercept of a line to best fit data for two (or more) variables by minimizing the sum of the squared distances from the data points to the line.',\n  },\n  {\n    name: 'Omitted Variable Bias',\n    description: 'Omitted variable bias (OVB) arises when a variable that is i) correlated with the outcome and ii) correlated with one on the included regressors is omitted from the regression model.',\n  },\n  {\n    name: 'Confidence Intervals',\n    description: 'A confidence interval provides a range of values for the likely location of the true population mean, based on information gathered from a sample.',\n  },\n  {\n    name: 'Hypothesis Testing',\n    description: 'Hypothesis testing is a procedure that allows us to form conclusions based on information derived from a sample.',\n  },\n  // {\n  //   name: 'Sample Distribution of OLS Estimators',\n  //   description: 'In Progress'\n  // }\n];\n","/*\n\n  Displays a menu with all the simulations and allows the user to click to start them\n\n*/\nimport SimBarOption from './SimBarOption';\nimport PropTypes from 'prop-types'\nimport { MODULES } from '../lib/constants';\n\nexport default function SimBar({ setSection }) {\n  const sections = MODULES.map((section) => (\n    <li key={section.name}>\n      <SimBarOption section={section} setSection={setSection}/>\n    </li>\n  ));\n\n  return (\n    <div className=\"menu\" data-testid=\"menu\">\n      <div className=\"mini-logo\"/>\n      <ul className=\"sim-bar-option-list\">{sections}</ul>\n    </div>\n  );\n}\n\nSimBar.propTypes = {\n  setSection: PropTypes.func.isRequired,\n}\n","import { Button, Fade } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function StartHere({ start, showApp }) {\n  return (\n    <Fade in={start}>\n      <div className=\"jumbotron\">\n        <p className=\"lead\">\n          This website is an interactive educational application developed to simulate and visualize various statistical concepts.\n        </p>\n        <p>\n          Project of Professor Tanya Byker and Professor Amanda Gregg at Middlebury College, with research assistants Kevin Serrao, Class of 2018, Dylan Mortimer, Class of 2019, Ammar Almahdy, Class of 2020, Jacqueline Palacios, Class of 2020, Siyuan Niu, Class of 2021, David Gikoshvili, Class of 2021, and Ethan Saxenian, Class of 2022\n        </p>\n        <Button variant=\"outline-danger\" onClick={() => showApp()}>Start!</Button>\n      </div>\n    </Fade>\n  );\n}\n\nStartHere.propTypes = {\n  start: PropTypes.bool.isRequired,\n  showApp: PropTypes.func.isRequired,\n}\n","import { ButtonGroup, Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function SelectorButtonGroup({ options, select, selected }) {\n  const buttons = options.map((option) => (\n    <Button\n      variant={(selected === option) ? 'selected' : 'unselected'}\n      onClick={() => select(option)}\n      key={`${option}`}\n    >\n      {option}\n    </Button>\n  ));\n\n  return (\n    <ButtonGroup>\n      {buttons}\n    </ButtonGroup>\n  )\n}\n\nSelectorButtonGroup.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  select: PropTypes.func.isRequired,\n  selected: PropTypes.string\n}\n","import PropTypes from 'prop-types';\n\nexport const popShapeType = PropTypes.oneOf([\n  'Normal',\n  'Uniform',\n  'Exponential',\n  'Chi-Squared',\n  'Mystery'\n]);\n\nexport const distributionType = PropTypes.oneOf(['Z', 'T']);\n\nexport const dataObjectArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    id: PropTypes.number\n  })\n);\n\nexport const sampleMeanArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    size: PropTypes.number,\n    mean: PropTypes.number,\n    id: PropTypes.number\n  })\n);\n\nexport const highchartsSeriesType = PropTypes.arrayOf(\n  PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    data: dataObjectArrayType.isRequired,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    enableMouseTracking: PropTypes.bool,\n    showInLegend: PropTypes.bool,\n    visible: PropTypes.bool,\n    label: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    marker: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n  })\n);\n\nexport const confidenceIntervalsSampleType = PropTypes.shape({\n  data: dataObjectArrayType.isRequired,\n  size: PropTypes.number.isRequired,\n  mean: PropTypes.number.isRequired,\n  lowerConf: PropTypes.number.isRequired,\n  upperConf: PropTypes.number.isRequired,\n  confidenceLevel: PropTypes.number.isRequired,\n  distribution: distributionType.isRequired,\n  label: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired\n});\n\nexport const stringOrNumberType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n\nexport const hypothesisTestingSampleArrayType = PropTypes.arrayOf(\n  PropTypes.shape({\n    mean: PropTypes.number.isRequired,\n    reject: PropTypes.bool.isRequired\n  })\n);\n\nexport const testTypeType = PropTypes.oneOf(['oneSample', 'twoSample']);\n\nexport const olsSampleType = PropTypes.shape({\n  data: dataObjectArrayType.isRequired,\n  slope: PropTypes.number.isRequired,\n  intercept: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired\n});\n\nexport const hypothesisEqualityType = PropTypes.oneOf(['<', '>', '!=']);\n","/*\n  Allows the user to select simulation variations\n\n  Used by Law of Large Numbers and Central Limit Theorem\n*/\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SelectorButtonGroup from './SelectorButtonGroup';\nimport { popShapeType } from '../lib/types';\n\nexport default function PopBar({ options, setPop }) {\n  const [selected, setSelected] = useState();\n\n  const onClick = (mode) => {\n    setPop(mode);\n    setSelected(mode);\n  }\n\n  return (\n    <div className=\"button-group\">\n      <p>Pick a Population Distribution: </p>\n      <SelectorButtonGroup options={options} select={onClick} selected={selected}/>\n    </div>\n  );\n}\n\nPopBar.propTypes = {\n  options: PropTypes.arrayOf(popShapeType).isRequired,\n  setPop: PropTypes.func.isRequired,\n}\n","/*\n\n  Uses the Collapse element to create a variable-size div for its contents\n\n*/\nimport Collapse from 'react-collapse';\nimport { presets } from 'react-motion';\nimport '../styles/MarzEg.css';\nimport PropTypes from 'prop-types';\n\nexport default function Collapsable({ children }) {\n  return (\n    <div>\n      <Collapse\n        style={{\n          margin: 'auto',\n          width: '100%',\n          textAlign: 'center',\n          backgroundColor: 'rgba(255,255,255,0.4)',\n          marginBottom: '1em'\n        }}\n        isOpened\n        springConfig={{ ...presets.gentle }}\n      >\n        <div style={{ height: '100%', padding: '2em' }}>\n          <div style={{ padding: '2em' }}>\n            {children}\n          </div>\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n\nCollapsable.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport Label from 'highcharts/modules/series-label';\nimport PropTypes from 'prop-types';\nimport { highchartsSeriesType } from '../lib/types';\nimport '../styles/dark-unica.css';\n\nLabel(Highcharts);\n\nexport default function DotPlot({ series, title, xMin, xMax, yMax, xLabel, yLabel, animation, zoom }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        animation: !!animation\n      },\n      plotOptions: {\n        series: {\n          animation: {\n            duration: 100,\n            easing: 'easeOutBounce'\n          },\n        }\n      },\n      legend: {\n        symbolHeight: 12,\n        symbolWidth: 12,\n        symbolRadius: 6\n      },\n      xAxis: {\n        min: xMin,\n        max: xMax,\n        title: {\n          enabled: true,\n          text: xLabel\n        },\n        startOnTick: true,\n        endOnTick: true\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        min: 0,\n        max: yMax,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: yLabel || 'Count'\n        }\n      },\n      series: series.map((seriesObject) => (\n        {\n          showInLegend: seriesObject.data.length > 0,\n          turboThreshold: 0,\n          ...seriesObject,\n          data: seriesObject.data.map(({ x, y }) => ({ x, y })), // don't want any other attributes\n          tooltip: {\n            pointFormat: `${xLabel}: <b>{point.x}</b><br />`\n          }\n        })\n      )\n    }\n    setChart(newChart);\n  }, [series, title, xMin, xMax, yMax, xLabel, yLabel, animation, zoom]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nDotPlot.propTypes = {\n  series: highchartsSeriesType.isRequired,\n  title: PropTypes.string,\n  xMin: PropTypes.number,\n  xMax: PropTypes.number,\n  yMax: PropTypes.number,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n  animation: PropTypes.bool,\n  zoom: PropTypes.bool\n}\n","import { Table } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../lib/types';\nimport { VALUES } from '../lib/constants.js';\n\nexport default function PopTable({ popArray, sampleIDs, popShape }) {\n  const rows = popArray.map(({ x, id }) => (\n    <tr key={id} style={{ backgroundColor: sampleIDs.includes(id) ? '#747EF2' : undefined }}>\n      <td>{popArray.length - id}</td>\n      <td>{x}</td>\n    </tr>\n  ));\n\n  return (\n    <Table striped className=\"pop-table\">\n      <thead>\n        <tr>\n          <th>{VALUES[popShape].tableCol}</th>\n          <th>{VALUES[popShape].xLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  );\n}\n\nPopTable.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  sampleIDs: PropTypes.arrayOf(PropTypes.number).isRequired,\n  popShape: PropTypes.string.isRequired\n}\n","/*\n\n  Displays a table of values and a corresponding HighCharts plot\n\n  Used by Law of Large Numbers and Central Limit Theorem\n\n*/\nimport DotPlot from './DotPlot';\nimport { Alert, Container, Col, Row } from 'react-bootstrap';\nimport PopTable from './PopTable.js'\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../lib/types';\nimport { TEXTS, VALUES } from '../lib/constants';\n\nexport default function ChartContainer({ popArray, popMean, sampled, sampleMean, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES[popShape];\n\n  const series = [\n    {\n      name: 'Population Observations',\n      data: popArray\n    },\n    {\n      name: 'Sampled Observations',\n      data: sampled\n    },\n    {\n      type: 'line',\n      name: 'Sample Mean',\n      data: [{ x: sampleMean || 0, y: 0 }, { x: sampleMean || 0, y: ymaxval }],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: (sampleMean !== undefined) && (sampled.length > 0),\n      label: {\n        format: `<div>Sample Mean: ${sampleMean.toFixed(2)}</div>`\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Alert variant=\"secondary\">\n            {(popShape !== 'Uniform') ? (\n              <p>\n                We queried the {TEXTS[popShape][0]} of {popArray.length} {TEXTS[popShape][1]} and plotted the results on the following chart.\n              </p>\n            ) : (\n              <p>\n                Behavioral economists studying loss aversion design a lottery among 2000 participants where each amount between -10 and +10 is equally likely.  We plotted the winnings and losses below.\n              </p>\n            )}\n          </Alert>\n        </Row>\n        <Row>\n          <Col lg={2} md={12}>\n            <PopTable\n              popArray={popArray}\n              sampleIDs={sampled.map((obj) => obj.id)}\n              popShape={popShape}\n            />\n          </Col>\n          <Col lg={10}>\n            <DotPlot\n              series={series}\n              title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n              xMin={xminval}\n              xMax={xmaxval}\n              yMax={ymaxval}\n              xLabel={xLabel}\n              animation={false}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nChartContainer.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  sampled: dataObjectArrayType.isRequired,\n  sampleMean: PropTypes.number,\n  popShape: popShapeType.isRequired,\n}\n","/*\n\n  Displays an input and a button for the user to enter a sample size\n\n  Used by Law of Large Numbers and Central Limit Theorem\n\n*/\nimport { useState } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types'\n\nexport default function SampleSizeInput({ maxSize, minSize, handleClick }) {\n  const [sampleSize, setSampleSize] = useState('');\n\n  return (\n    <InputGroup className=\"sample-size-input\">\n      <Form.Control\n        align=\"right\"\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        min={minSize || 1}\n        value={sampleSize}\n        max={maxSize}\n        onChange={(event) => setSampleSize(event.target.value)}\n      />\n      <Button\n        variant=\"secondary\"\n        disabled={!sampleSize || sampleSize > maxSize || sampleSize < 1} onClick={() => handleClick(+sampleSize, 1, false)}\n      >\n        Sample\n      </Button>\n    </InputGroup>\n  );\n}\n\nSampleSizeInput.propTypes = {\n  maxSize: PropTypes.number.isRequired,\n  minSize: PropTypes.number,\n  handleClick: PropTypes.func.isRequired,\n}\n","import { mean, std, sqrt } from 'mathjs';\nimport PD from 'probability-distributions';\nimport _ from 'lodash';\nimport { jStat } from 'jstat';\nimport MultivariateNormal from 'multivariate-normal';\n\nexport const getCounts = (data) => {\n  const counts = [];\n  _.entries(_.countBy(data)).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      counts.push({ x: +amt, y: i })\n    }\n  });\n  return counts\n}\n\n// returns an array of values with a normal distribution\nexport const generateNormal = (sampleSize, mean, standardDev, precision = 5) => {\n  return PD.rnorm(sampleSize, mean, standardDev).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with a uniform distribution\nexport const generateUniform = (sampleSize, low, hi, precision = 5) => {\n  return PD.runif(sampleSize, low, hi).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with an exponential distribution\nexport const generateExponential = (sampleSize, lambda, precision = 5) => {\n  return PD.rexp(sampleSize, lambda).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with a chi-squared distribution\nexport const generateChiSquared = (sampleSize, degreesOfFreedom, precision = 5) => {\n  return PD.rchisq(sampleSize, degreesOfFreedom).map((num) => _.round(num, precision))\n}\n\n// returns an array of values with a 'mystery' distribution (really points sampled randomly from two normal distributions)\nexport const generateMystery = (sampleSize, mysteryMean1, mysteryMean2, mysterySD1, mysterySD2, precision = 5) => {\n  const normal1 = PD.rnorm(sampleSize, mysteryMean1, mysterySD1).map((num) => _.round(num, precision));\n  const normal2 = PD.rnorm(sampleSize, mysteryMean2, mysterySD2).map((num) => _.round(num, precision));\n  return _.sampleSize([...normal1, ...normal2], 2000);\n}\n\n// returns the data set from the function corresponding with distType\n// objects in array are of shape {x, y, id}\nexport const dataFromDistribution = (\n  distType,\n  sampleSize,\n  {\n    mean = 64,\n    standardDev = 3,\n    low = -10,\n    hi = 10,\n    lambda = 1 / 64,\n    degreesOfFreedom = 8,\n    mysteryMean1 = 58,\n    mysteryMean2 = 70,\n    mysterySD1 = 1,\n    mysterySD2 = 3,\n    precision = 1\n  } = {}\n) => {\n  const getDistributionFunction = {\n    Normal: () => generateNormal(sampleSize, mean, standardDev, precision),\n    Uniform: () => generateUniform(sampleSize, low, hi, precision),\n    Exponential: () => generateExponential(sampleSize, lambda, precision),\n    'Chi-Squared': () => generateChiSquared(sampleSize, degreesOfFreedom, precision),\n    Mystery: () => generateMystery(sampleSize, mysteryMean1, mysteryMean2, mysterySD1, mysterySD2, precision)\n  }\n\n  const population = getDistributionFunction[distType]();\n\n  return _.shuffle(getCounts(population)).map((obj, index) => ({ ...obj, id: index }));\n}\n\n// returns the mean of popArray\nexport const populationMean = (popArray, attr = 'x') => {\n  return (popArray.length > 0) ? mean(popArray.map((p) => p[attr])) : undefined\n}\n\n// returns the std of popArray\nexport const populationStandardDev = (popArray, attr = 'x') => {\n  return (popArray.length > 0) ? std(popArray.map((p) => p[attr])) : undefined\n}\n\nexport const calculateOneSampleTestStatistic = (distType, sampleMean, mu0, standardDev, sampleSize) => ((distType === 'Z')\n  ? jStat.zscore(sampleMean, mu0, standardDev / sqrt(sampleSize))\n  : jStat.tscore(sampleMean, mu0, standardDev, sampleSize))\n\nexport const calculateTwoSampleTestStatistic = (\n  sampleMean1,\n  sampleMean2,\n  standardDev1,\n  standardDev2,\n  sampleSize1,\n  sampleSize2\n) => (sampleMean1 - sampleMean2) / sqrt(standardDev1 ** 2 / sampleSize1 + standardDev2 ** 2 / sampleSize2);\n\nexport const calculatePValue = (distType, testStat, equality, sampleSize, sides) => {\n  const pval = (distType === 'Z') ? jStat.ztest(testStat, sides) : jStat.ttest(testStat, sampleSize - 1, sides)\n  if (((equality === '>') && (testStat < 0)) || ((equality === '<') && (testStat >= 0))) {\n    return 1 - pval\n  } else {\n    return pval\n  }\n}\n\nexport const generateScatter = (size, meanX, meanY, stdX, stdY, corr) => {\n  const covarianceMatrix = [\n    [stdX * stdX, corr * stdX * stdY],\n    [corr * stdX * stdY, stdY * stdY]\n  ];\n  const distribution = MultivariateNormal([meanX, meanY], covarianceMatrix);\n  return PD.rnorm(size, 0, 5).map((epsilon) => {\n    const [x, y] = distribution.sample();\n    const scorePoint = 40 + 3 * x + 2.5 * y + epsilon;\n    return ({\n      x: _.clamp(_.round(x, 2), 0, 15),\n      y: _.clamp(_.round(scorePoint, 2), 0, 100)\n    });\n  });\n}\n\nexport const generateBinary = (size, mean1, mean2, std1, std2, precision = 2) => {\n  const control = generateNormal(size, mean1, std1, precision).map((num) => ({ x: 0, y: num, category: 'Control' }));\n  const jobCorps = generateNormal(size, mean2, std2, precision).map((num) => ({ x: 1, y: num, category: 'Job Corps' }));\n  return [...control, ...jobCorps];\n}\n\nexport const convertToStandardNormal = (array, popMean, popSD, attr) => {\n  return array.map((p) => ({...p, [attr]: (p[attr] - popMean) / popSD}));\n}\n","import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Card, Button } from 'react-bootstrap';\nimport '../../styles/dark-unica.css';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils';\n\nexport default function SimulateSamples({ type, popArray, popMean }) {\n  const [sampled, setSampled] = useState([]);\n  const [meanLine, setMeanLine] = useState([]);\n  const [chart, setChart] = useState({});\n  const [start, setStart] = useState(false);\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'line',\n        animation: false\n      },\n      plotOptions: {\n        series: {\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false\n            },\n            normal: {\n              animation: false\n            },\n            inactive: {\n              enabled: false\n            }\n          }\n        }\n      },\n      title: {\n        text: `Population vs Sample Means <br /> (${type})`,\n      },\n      xAxis: {\n        title: {\n          text: 'Sample Size'\n        },\n        min: 0\n      },\n      yAxis: {\n        title: {\n          text: 'Mean'\n        }\n      },\n      tooltip: {\n        enabled: false\n      },\n      series: [\n        {\n          name: `Population Mean (${popMean.toFixed(2)})`,\n          data: meanLine,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          color: 'red'\n        },\n        {\n          name: 'Sampled Means',\n          data: sampled,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          color: 'black'\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [sampled, meanLine, type, popArray, popMean]);\n\n  useEffect(() => {\n    setSampled([]);\n    setMeanLine([]);\n    let timer;\n    if (start) {\n      let n = 0;\n      timer = setInterval(() => {\n        const newSamples = [];\n        for (let i = 0; i < (n >= 600 ? 4 : (n >= 300 ? 2 : 1)); i++) {\n          n += 1;\n          if (n >= 1000) {\n            clearInterval(timer)\n            break;\n          }\n          const sample = _.sampleSize(popArray, n);\n          newSamples.push({ y: _.round(populationMean(sample), 2) });\n        }\n        setSampled((currSampled) => [...currSampled, ...newSamples]);\n        setMeanLine((currMeanLine) => [...currMeanLine, { x: n, y: popMean }]);\n      }, n);\n    }\n\n    return () => clearInterval(timer);\n  }, [start, popArray, popMean]);\n\n  return (\n    <Card body>\n      <HighchartsReact highcharts={Highcharts} options={chart}/>\n      <Button variant=\"success\" onClick={() => setStart(true)}>Start Simulation</Button>\n    </Card>\n  );\n}\n\nSimulateSamples.propTypes = {\n  type: popShapeType.isRequired,\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays one of the LLN simulations\n\n*/\nimport { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ChartContainer from '../ChartContainer.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport SimulateSamples from './SimulateSamples.js';\nimport { Alert } from 'react-bootstrap';\nimport { populationMean, dataFromDistribution } from '../../lib/stats-utils.js';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { popShapeType } from '../../lib/types.js';\n\nexport default function LLNSimulation({ popShape, sampleSize }) {\n  const [sampled, setSampled] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [popArray, setPopArray] = useState([]);\n\n  useEffect(() => {\n    setStage(1);\n    const newPop = dataFromDistribution(popShape, sampleSize);\n    setPopArray(newPop);\n    setSampled([]);\n  }, [popShape, sampleSize]);\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    setStage(2);\n  }\n\n  const popMean = populationMean(popArray) || 0;\n  const sampleMean = populationMean(sampled) || 0;\n\n  return (\n    <Collapsable>\n      <div data-testid=\"lln-sim\">\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} sampleMean={sampleMean} popShape={popShape}/>\n        <p>Try a few different sample sizes and compare sample mean to population mean</p>\n        <SampleSizeInput maxSize={popArray.length} handleClick={handleClick}/>\n        {(stage >= 2) && (\n          <div>\n            <Alert variant=\"success\">\n              Sample Mean: {_.round(sampleMean, 2) || ''}\n              <br/>\n              Difference of Means: {_.round(popMean - sampleMean, 2)}\n            </Alert>\n            <Alert variant=\"info\">\n              According to the law, the average of the results obtained from a large enough sample should be close to the total average of the population, and will tend to become closer the larger the sample is. Make sure to pick several samples, or see below for a simulation to see the law in action.\n            </Alert>\n            <SimulateSamples type={popShape} popArray={popArray} popMean={_.round(popMean, 2)}/>\n          </div>\n        )}\n      </div>\n    </Collapsable>\n  );\n}\n\nLLNSimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays the description for the LLN simulation, a menu bar to choose the different variations, and the simulation component itself\n\n*/\nimport { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'react-bootstrap';\nimport LLNSimulation from './LLNSimulation.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\n\nexport default function LawOfLargeNumbers() {\n  const [popShape, setPopType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <Alert className=\"sim-description\" variant=\"primary\">Law Of Large Numbers</Alert>\n      <Alert className=\"sim-description\" variant=\"primary\">\n        The Law of Large Numbers (LLN) is a statement about the relationship between a population and a random sample drawn from that population. Let 𝜇 denote the true mean of a variable when calculated using the entire population, let 𝜎 denote the true standard deviation of that variable when calculated using the entire population, let 𝑥̅ denote the mean calculated from a sample drawn from that population, and let 𝑠 denote the standard deviation calculated from that sample. We would like to use information from the sample to make conclusions about the population. The LLN is helpful in this endeavor, because it states that as the sample size gets larger, the sample mean approaches the true population mean. This simulation’s goal is to demonstrate this handy property.\n      </Alert>\n      <PopBar options={['Normal', 'Uniform', 'Exponential', 'Chi-Squared']} setPop={setPopType}/>\n      {popShape && <LLNSimulation popShape={popShape} sampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DotPlot from '../DotPlot.js';\nimport { VALUES } from '../../lib/constants.js';\nimport { max, min, sqrt } from 'mathjs';\nimport { popShapeType } from '../../lib/types.js';\nimport _ from 'lodash';\nimport { Form } from 'react-bootstrap';\n\nexport default function SampleMeanChart({ sampleMeans, popMean, sd, popShape }) {\n  const [normalized, setNormalized] = useState(false);\n\n  const newSampleMeans = normalized ? sampleMeans.map(({ size, mean }) => ((mean - popMean) / (sd / sqrt(size)))) : sampleMeans.map(({ mean }) => mean);\n\n  const meanCounts = _.countBy(newSampleMeans.map((mean) => _.round(mean, 2)));\n  const sampleMeansPoints = [];\n  _.entries(meanCounts).forEach(([amt, count]) => {\n    for (let i = 1; i <= count; i++) {\n      sampleMeansPoints.push({ x: +amt, y: i })\n    }\n  });\n\n  const onlyValues = sampleMeansPoints.map((obj) => obj.x);\n  const onlyCounts = sampleMeansPoints.map((obj) => obj.y);\n\n  return (\n    <div>\n      <DotPlot\n        series={[{ name: 'Sample Means', data: sampleMeansPoints }]}\n        title=\"Sample Mean Distribution\"\n        xMin={normalized ? min(-3, ...onlyValues) : VALUES[popShape].xminval}\n        xMax={normalized ? max(3, ...onlyValues) : VALUES[popShape].xmaxval}\n        yMax={normalized ? max(8, ...onlyCounts) : max([30, ...onlyCounts])}\n        xLabel={normalized ? 'Standard Deviations' : VALUES[popShape].xLabel}\n        yLabel=\"Observations of Sample Mean\"\n      />\n      <Form.Check\n        inline\n        type=\"checkbox\"\n        label=\"Convert to Standard Normal\"\n        onClick={() => setNormalized(!normalized)}\n      />\n    </div>\n  )\n}\n\nSampleMeanChart.propTypes = {\n  sampleMeans: PropTypes.arrayOf(PropTypes.number).isRequired,\n  popMean: PropTypes.number,\n  sd: PropTypes.number,\n  popShape: popShapeType.isRequired\n}\n","/*\n\n  Displays inputs to allow the user to run a large number of resamples\n\n*/\nimport { useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils.js';\n\nexport default function SampleMeansSimulator({ population, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  const resample = () => {\n    const samplePop = _.sampleSize(population, resampleSize);\n    const sampleMean = populationMean(samplePop);\n    return { size: +resampleSize, mean: sampleMean };\n  }\n\n  const runSim = () => {\n    const newSamples = [];\n    for (let i = 0; i < numberResamples; i++) {\n      newSamples.push(resample())\n    }\n    addSamples(newSamples);\n  }\n\n  return (\n    <div>\n      <span> Sample Size: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => setResampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        variant=\"secondary\"\n        onClick={() => runSim()} disabled={(resampleSize < 1) || (resampleSize > population.length) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button variant=\"secondary\" onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nSampleMeansSimulator.propTypes = {\n  population: dataObjectArrayType.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a table of sample means\n\n*/\nimport { Table } from 'react-bootstrap';\nimport { sampleMeanArrayType } from '../../lib/types.js';\nimport _ from 'lodash';\n\nexport default function SampleMeansTable({ sampleMeans }) {\n  const tableBody = sampleMeans.map(({ size, mean, id }) => (\n    <tr key={id}>\n      <td>{id + 1}</td>\n      <td>{size}</td>\n      <td>{_.round(mean, 2)}</td>\n    </tr>\n  )\n  );\n\n  return (\n    <Table hover className=\"pop-table\">\n      <thead>\n        <tr>\n          <th>Sample</th>\n          <th>Size</th>\n          <th>Mean</th>\n        </tr>\n      </thead>\n      <tbody>\n        {sampleMeans && tableBody}\n      </tbody>\n    </Table>\n  );\n}\n\nSampleMeansTable.propTypes = {\n  sampleMeans: sampleMeanArrayType.isRequired,\n}\n","/*\n\n  Displays one of the CLT simulations\n\n*/\nimport { useState, useEffect } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ChartContainer from '../ChartContainer.js';\nimport SampleMeanChart from './SampleMeanChart.js'\nimport SampleMeansSimulator from './SampleMeansSimulator.js'\nimport { Alert, Button, Col, Row } from 'react-bootstrap';\nimport { populationMean, dataFromDistribution, populationStandardDev } from '../../lib/stats-utils.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport SampleMeansTable from './SampleMeansTable.js';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { popShapeType } from '../../lib/types.js';\n\nexport default function CLTSimulation({ popShape, mainSampleSize }) {\n  const [sampleMeans, setSampleMeans] = useState([]);\n  const [sampled, setSampled] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [popArray, setPopArray] = useState([]);\n\n  useEffect(() => {\n    setStage(1);\n    const newPop = dataFromDistribution(popShape, mainSampleSize);\n    setPopArray(newPop);\n    setSampled([]);\n    setSampleMeans([]);\n  }, [popShape, mainSampleSize]);\n\n  const addSampleMeans = (means) => {\n    if (!means) { // calling addSampleMeans with no arguments clears the data\n      setSampleMeans([])\n    } else {\n      const newSampleMeans = means.map((mean, index) => ({ ...mean, id: index }));\n      setSampleMeans(newSampleMeans);\n    }\n  }\n\n  const handleClick = (size) => {\n    const sample = _.sampleSize(popArray, size);\n    setSampled(sample);\n    const newMeans = [...sampleMeans, { size, mean: populationMean(sample) }];\n    setSampleMeans(newMeans.map((mean, index) => ({ ...mean, id: index })));\n  }\n\n  const popMean = populationMean(popArray) || 0;\n\n  return (\n    <Collapsable>\n      <div>\n        <ChartContainer popArray={popArray} popMean={popMean} sampled={sampled} popShape={popShape}/>\n        <Button variant=\"success\" onClick={() => setStage(2)}>Continue</Button>\n        {(stage >= 2) && (\n          <div>\n            <Row>\n              <p style={{ margin: 15 }}>Try drawing some samples and calculating means</p>\n              <SampleSizeInput maxSize={popArray.length} handleClick={handleClick}/>\n            </Row>\n            <Row>\n              <Col lg=\"8\">\n                <SampleMeanChart\n                  sampleMeans={sampleMeans}\n                  popMean={popMean}\n                  sd={populationStandardDev(popArray)}\n                  popShape={popShape}\n                />\n              </Col>\n              <Col lg=\"4\">\n                <SampleMeansTable sampleMeans={sampleMeans}/>\n              </Col>\n            </Row>\n            <Row>\n              <div>\n                <br/>\n                <Alert variant=\"primary\" style={{ width: '50%', margin: 'auto' }}>\n                  Simulate drawing many many samples\n                </Alert>\n                <br/>\n                <SampleMeansSimulator\n                  population={popArray}\n                  addSamples={addSampleMeans}\n                />\n              </div>\n            </Row>\n          </div>\n        )}\n\n      </div>\n    </Collapsable>\n  );\n}\n\nCLTSimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  mainSampleSize: PropTypes.number.isRequired,\n}\n","/*\n\n  Displays the description for the CLT simulation, a menu bar to choose the different variations, and the simulation component itself\n\n*/\nimport { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'react-bootstrap';\nimport CLTSimulation from './CLTSimulation.js';\n\nconst SAMPLE_SIZE = 2000;\n\nexport default function CentralLimitTheorem() {\n  const [popShape, setPopType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <Alert className=\"sim-description\" variant=\"primary\">Central Limit Theorem</Alert>\n      <Alert className=\"sim-description\" variant=\"primary\">\n        This simulation demonstrates the shape of the sampling distribution of the sample mean. Suppose I draw a large number of samples, each of size 𝑛, from some population. For each sample, I calculate a sample mean 𝑥̅. I now plot a histogram of those sample means. For a sufficiently large sample size, the shape of that histogram will look like a beautiful bell-shaped curve, no matter what shape the underlying population had.\n      </Alert>\n      <PopBar options={['Normal', 'Uniform', 'Exponential', 'Chi-Squared', 'Mystery']} setPop={setPopType}/>\n      {popShape && <CLTSimulation popShape={popShape} mainSampleSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","/*\n\n  Displays sliders for the user to adjust the mean and standard deviation\n\n*/\nimport { Form, InputGroup, } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../../lib/types.js';\n\nexport default function MeanSDInput({ title, mean, setMean, sd, setSD }) {\n  return (\n    <div>\n      <p> Choose the Mean and Standard Deviation for {title} Height </p>\n      <InputGroup>\n        <InputGroup.Text>{title} Height Mean:</InputGroup.Text>\n        <Form.Control type=\"number\" min={60} max={80} step={1} value={mean} onChange={(event) => setMean(event.target.value)}/>\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroup.Text>{title} Height SD:</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          min={1}\n          max={7}\n          value={sd}\n          onChange={(event) => setSD(event.target.value)}\n          aria-label={`${title}-SD`}\n        />\n      </InputGroup>\n    </div>\n  );\n}\n\nMeanSDInput.propTypes = {\n  title: PropTypes.string.isRequired,\n  mean: stringOrNumberType.isRequired,\n  setMean: PropTypes.func.isRequired,\n  sd: stringOrNumberType.isRequired,\n  setSD: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a Nivo scatterplot for the joint distribution data\n\n*/\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function JointChart({ jointData, sharedOptions, nodeId }) {\n  return (\n    <div style={{ height: 368, width: 366, position: 'inline-block', float: 'right', marginLeft: '0px', }} aria-label=\"plot\">\n      <ResponsiveScatterPlot\n        {...sharedOptions}\n        colors={(node) => ((nodeId && (node.id === nodeId)) ? '#0053a1' : '#00b3ff')}\n        data={[{ id: 'data', data: jointData }]}\n        yScale={{ type: 'linear', min: 40, max: 100 }}\n        yFormat={(e) => `${e} in.`}\n        tooltip={({ node }) => (\n          <div>\n            Parent Height: <strong>{node.data.formattedX}</strong>\n            <br/>\n            Child Height: <strong>{node.data.formattedY}</strong>\n          </div>\n        )}\n        axisBottom={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: 46,\n          legend: 'Parent Height (inches)'\n        }}\n        axisLeft={{\n          tickSize: 10,\n          legendPosition: 'middle',\n          legendOffset: -38,\n          legend: 'Child Height (inches)'\n        }}\n      />\n    </div>\n  );\n}\n\nJointChart.propTypes = {\n  jointData: dataObjectArrayType.isRequired,\n  sharedOptions: PropTypes.objectOf(PropTypes.any).isRequired,\n  nodeId: PropTypes.string,\n}\n","/*\n\n  A container component to hold the three charts for the Joint Distribution simulation\n  Note that Nivo is used for these plots instead of HighCharts - easier to synchronize\n\n*/\nimport { useState, useCallback, useMemo } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport JointChart from './JointChart.js';\nimport { ResponsiveScatterPlotCanvas } from '@nivo/scatterplot';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function JDCharts({ parentData, childData, jointData }) {\n  // these functions synchronize the plots - all three corresponding data points increase in size on mouse over\n  const [nodeId, setNodeId] = useState();\n  const handleMouseMove = useCallback((node) => setNodeId(node.id), [setNodeId]);\n  const handleMouseLeave = useCallback(() => setNodeId(), [setNodeId]);\n  const getNodeSize = useMemo(() => (node) => ((nodeId && (nodeId === node.id)) ? 15 : 5), [nodeId]);\n\n  // options common to all three plots\n  const sharedOptions = {\n    animate: false,\n    margin: { top: 60, right: 10, bottom: 70, left: 70 },\n    xScale: { type: 'linear', min: 40, max: 100 },\n    blendMode: 'darken',\n    xFormat: (e) => `${e} in.`,\n    nodeSize: getNodeSize,\n    enableGridX: false,\n    enableGridY: false,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    axisBottom: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: 46\n    },\n    axisLeft: {\n      tickSize: 10,\n      legendPosition: 'middle',\n      legendOffset: -30\n    }\n  }\n\n  return (\n    <Row>\n      <Col style={{ padding: '5px 0px 5px 0px', marginRight: '0px', marginLeft: '-60px' }}>\n        <div style={{ height: 368, width: 366, float: 'left', position: 'inline-block', }} aria-label=\"plot\">\n          <ResponsiveScatterPlotCanvas\n            data={[{ id: 'data', data: parentData }]}\n            tooltip={({ node }) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => ((node.id === nodeId) ? '#910000' : '#ff0000')}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{ ...sharedOptions.axisBottom, legend: 'Parent Height (inches)' }}\n            axisLeft={{ ...sharedOptions.axisLeft, legend: 'Count' }}\n          />\n        </div>\n      </Col>\n      <Col style={{ padding: '5px 0px 5px 0px', marginLeft: '-55px', marginRight: '0px', width: 'fit-content' }}>\n        <div style={{ height: 368, width: 366, float: 'left', position: 'inline-block', marginLeft: '0px', }} aria-label=\"plot\">\n          <ResponsiveScatterPlotCanvas\n            data={[{ id: 'data', data: childData }]}\n            tooltip={({ node }) => <div><strong>{node.data.formattedX}</strong></div>}\n            colors={(node) => ((node.id === nodeId) ? '#006607' : '#00ba0c')}\n            {...sharedOptions}\n            yScale={{ type: 'linear', min: 0, max: 8 }}\n            axisBottom={{ ...sharedOptions.axisBottom, legend: 'Child Height (inches)' }}\n            axisLeft={{ ...sharedOptions.axisLeft, legend: 'Count' }}\n          />\n        </div>\n      </Col>\n      <Col style={{ padding: '5px 0px 5px 0px', marginLeft: '-50px', marginRight: '0px', width: 'fit-content' }}>\n        <JointChart\n          jointData={jointData}\n          sharedOptions={sharedOptions}\n          nodeId={nodeId}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nJDCharts.propTypes = {\n  parentData: dataObjectArrayType.isRequired,\n  childData: dataObjectArrayType.isRequired,\n  jointData: dataObjectArrayType.isRequired,\n}\n","import { Form, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { stringOrNumberType } from '../lib/types';\n\nexport default function InputSlider({ value, min, max, step, onChange }) {\n  return (\n    <InputGroup className=\"input-slider-group\">\n      <Form.Control\n        type=\"range\"\n        custom\n        className=\"custom-range\"\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={(event) => onChange(event.target.value)}\n      />\n      <Form.Control\n        type=\"number\"\n        className=\"input-group-append\"\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={(event) => onChange(event.target.value)}\n      />\n    </InputGroup>\n  );\n}\n\nInputSlider.propTypes = {\n  value: stringOrNumberType.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the Joint Distributions simulation\n\n*/\nimport { useEffect, useState } from 'react';\nimport MultivariateNormal from 'multivariate-normal';\nimport { Container, Row, Col, Button, InputGroup } from 'react-bootstrap';\nimport MeanSDInput from './MeanSDInput';\nimport JDCharts from './JDCharts';\nimport _ from 'lodash';\nimport InputSlider from '../InputSlider';\nimport { abs } from 'mathjs';\n\nexport default function JDSimulation() {\n  const [parentMean, setParentMean] = useState(70);\n  const [childMean, setChildMean] = useState(70);\n  const [parentSD, setParentSD] = useState(1);\n  const [childSD, setChildSD] = useState(1);\n  const [correlation, setCorrelation] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [allData, setAllData] = useState({ parent: [], child: [], joint: [] });\n\n  useEffect(() => {\n    if ((allData.parent.length > 0) && (allData.child.length > 0) && (allData.joint.length > 0)) {\n      setStage(2)\n    }\n  }, [allData]);\n\n  // generate datapoints for parent height and child height in a normal distribution\n  const generate = () => {\n    const newCorrelation = ((abs(+correlation) === 1) ? (0.999999 * correlation) : correlation);\n    const covariance = newCorrelation * parentSD * childSD;\n    const covMatrix = [[parentSD ** 2, covariance], [covariance, childSD ** 2]];\n    const distribution = MultivariateNormal([+parentMean, +childMean], covMatrix);\n\n    const jointSeries = [];\n    for (let i = 0; i < 500; i++) {\n      const [parentHeight, childHeight] = distribution.sample();\n      jointSeries.push({ x: _.round(parentHeight, 2), y: _.round(childHeight, 2) });\n    }\n\n    const parentCounts = {};\n    const parentSeries = [];\n    const childCounts = {};\n    const childSeries = [];\n\n    jointSeries.forEach(({ x, y }) => {\n      if (parentCounts[x]) {\n        parentCounts[x] += 1\n      } else {\n        parentCounts[x] = 1\n      }\n      parentSeries.push({ x, y: parentCounts[x] });\n      if (childCounts[y]) {\n        childCounts[y] += 1\n      } else {\n        childCounts[y] = 1\n      }\n      childSeries.push({ x: y, y: childCounts[y] });\n    });\n\n    const data = { parent: parentSeries, child: childSeries, joint: jointSeries }\n    setAllData(data);\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xl={4} md={6} xs={12} style={{ padding: 10 }}>\n          <MeanSDInput title=\"Parent\" mean={parentMean} setMean={setParentMean} sd={parentSD} setSD={setParentSD}/>\n        </Col>\n        <Col xl={4} md={6} xs={12} style={{ padding: 10 }}>\n          <MeanSDInput title=\"Child\" mean={childMean} setMean={setChildMean} sd={childSD} setSD={setChildSD}/>\n        </Col>\n        <Col xl={4} md={12} style={{ padding: 10 }}>\n          <p>Set the Correlation</p>\n          <InputSlider value={correlation} min={-1} max={1} step={0.1} onChange={(value) => setCorrelation(value)}/>\n          <p style={{ margin: '15px' }}>Covariance</p>\n          <InputGroup.Text aria-label=\"covariance\">{(correlation * parentSD * childSD).toFixed(2)}</InputGroup.Text>\n        </Col>\n      </Row>\n      <Row>\n        <Button\n          variant=\"primary\"\n          style={{ width: 'fit-content', margin: 'auto' }}\n          disabled={!parentMean || !parentSD || !childMean || !childSD}\n          onClick={() => generate()}\n        >\n          Generate!\n        </Button>\n      </Row>\n      {(stage === 2) && <JDCharts parentData={allData.parent} childData={allData.child} jointData={allData.joint}/>}\n    </Container>\n  );\n}\n","/*\n\n  A container component that holds the description and simulation for Joint Distribution\n\n*/\nimport { Alert } from 'react-bootstrap';\nimport JDSimulation from './JDSimulation.js';\n\nexport default function JointWrapper() {\n  return (\n    <div className=\"module-container\">\n      <Alert style={{ width: '50%', margin: 'auto' }} variant=\"primary\">\n        Joint Distributions\n      </Alert>\n      <br/>\n      <JDSimulation/>\n    </div>\n  );\n}\n","import { Form, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function CoefficientInput({ beta, setBeta, delta, setDelta }) {\n  return (\n    <div>\n      <InputGroup>\n        <InputGroup.Text>β₁, the Coefficient on Study Hours:</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          step={0.1}\n          value={beta}\n          min={-4}\n          max={4}\n          onChange={(event) => setBeta(event.target.value)}\n        />\n      </InputGroup>\n      <br/>\n      <InputGroup>\n        <InputGroup.Text>𝛿, the Coefficient on Sleep Hours:</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          step={0.1}\n          value={delta}\n          min={-4}\n          max={4}\n          onChange={(event) => setDelta(event.target.value)}\n        />\n      </InputGroup>\n    </div>\n  );\n}\n\nCoefficientInput.propTypes = {\n  beta: PropTypes.number.isRequired,\n  setBeta: PropTypes.func.isRequired,\n  delta: PropTypes.number.isRequired,\n  setDelta: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js';\n\nexport default function OmittedVariableChart({ dataPoints, naiveLine, correctedLine }) {\n  const [myChart, setMyChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        zoomtype: 'xy'\n      },\n      title: {\n        text: 'Study Hours vs. Test Score'\n      },\n      xAxis: {\n        min: 0,\n        max: 10,\n        title: {\n          text: 'Study Hours'\n        }\n      },\n      yAxis: {\n        min: 20,\n        max: 100,\n        title: {\n          text: 'Test Score'\n        }\n      },\n      series: [\n        {\n          type: 'scatter',\n          data: dataPoints,\n          name: 'Test Score',\n          color: '#33A5FF'\n        },\n        {\n          type: 'line',\n          data: naiveLine,\n          name: 'Naive Regression',\n          color: '#E30404',\n          label: {\n            enabled: false\n          }\n        },\n        {\n          type: 'line',\n          data: correctedLine,\n          name: 'Corrected Regression',\n          color: '#2AC208',\n          label: {\n            enabled: false\n          }\n        }\n      ]\n    }\n\n    setMyChart(newChart);\n  }, [dataPoints, naiveLine, correctedLine]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nOmittedVariableChart.propTypes = {\n  dataPoints: dataObjectArrayType.isRequired,\n  naiveLine: PropTypes.arrayOf(PropTypes.number),\n  correctedLine: PropTypes.arrayOf(PropTypes.number)\n}\n","import { useState, useEffect } from 'react';\nimport { Row, Col, Button, InputGroup } from 'react-bootstrap';\nimport CoefficientInput from './CoefficientInput.js';\nimport MultivariateNormal from 'multivariate-normal';\nimport { round, transpose, matrix, multiply, inv } from 'mathjs';\nimport regression from 'regression';\nimport OmittedVariableChart from './OmittedVariableChart.js';\nimport PD from 'probability-distributions';\nimport _ from 'lodash';\nimport InputSlider from '../InputSlider.js';\n\nexport default function OVBSimulation() {\n  const [beta, setBeta] = useState(3);\n  const [delta, setDelta] = useState(3);\n  const [correlation, setCorrelation] = useState(0);\n  const [stage, setStage] = useState(1);\n  const [series, setSeries] = useState([]);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [allData, setAllData] = useState({ points: [], naiveLine: [], correctedLine: [] });\n\n  const stdX = 3;\n  const stdY = 6;\n  const OBS = 1000;\n\n  useEffect(() => {\n    const generatePoints = (slope, int) => {\n      const points = [];\n\n      for (let i = 0; i < 11; i++) {\n        points[i] = _.round(int + i * slope, 2);\n      }\n\n      return points;\n    }\n\n    if (series.length > 0) {\n      // TODO - simplify this\n\n      // generate epsilon\n      const epsilon = PD.rnorm(OBS, 0, 5);\n\n      // matrix data\n      const ones = [];\n      const colOne = [];\n      const colTwo = [];\n\n      // generate test score data\n      const scores = [];\n      for (let i = 0; i < OBS; i++) {\n        const scorePoint = 40 + beta * series[i][0] + delta * series[i][1] + epsilon[i];\n        scores.push(round(scorePoint * 100) / 100);\n        ones.push(1);\n        colOne.push(series[i][0]);\n        colTwo.push(series[i][1]);\n      }\n\n      // get series with study hours vs test scores\n      const studyScores = [];\n      for (let i = 0; i < OBS; i++) {\n        studyScores.push([series[i][0], scores[i]]);\n      }\n\n      // regress study hours with test scores\n      const [naiveSlope, naiveInt] = regression.linear(studyScores).equation;\n\n      // Corrected regression\n\n      // using matrices\n      const X = transpose(matrix([ones, colOne, colTwo]));\n      const Y = transpose(matrix([scores]));\n      const inverse = inv(multiply(transpose(X), X));\n      const bHat = multiply(multiply(inverse, transpose(X)), Y);\n\n      setAllData({\n        points: studyScores.map(([x, y]) => ({ x, y })),\n        naiveLine: generatePoints(naiveSlope, naiveInt),\n        correctedLine: generatePoints(parseFloat(bHat.get([1, 0])), parseFloat(bHat.get([0, 0])))\n      });\n      setShowCorrect(false);\n    }\n  }, [series]);  // eslint-disable-line\n\n  useEffect(() => {\n    if ((allData.points.length > 0) && (allData.naiveLine.length > 0)) {\n      setStage(2);\n    }\n  }, [allData]);\n\n  const generateSeries = () => {\n    // covariance between dimensions. This examples makes the first and third\n    // dimensions highly correlated, and the second dimension independent.\n    const covarianceMatrix = [\n      [stdX * stdX, correlation * stdX * stdY],\n      [correlation * stdX * stdY, stdY * stdY]\n    ];\n\n    // lets you sample from distribution\n    const distribution = MultivariateNormal([5, 2], covarianceMatrix);\n    const seriesArr = []\n\n    // samples 1000\n    for (let i = 0; i < OBS; i++) {\n      const [a, b] = distribution.sample()\n      seriesArr.push([_.round(a, 2), _.round(b, 2)]);\n    }\n\n    setSeries(seriesArr);\n  }\n\n  return (\n    <div>\n      <Row>\n        <p>Choose Population Parameters:</p>\n      </Row>\n      <br/>\n      <Row lg={2} sm={1}>\n        <Col style={{ margin: 'auto', padding: 10 }}>\n          <CoefficientInput beta={beta} setBeta={setBeta} delta={delta} setDelta={setDelta}/>\n        </Col>\n        <Col>\n          <div style={{ padding: 10 }}>Set the Correlation between Study Hours and Sleep Hours:</div>\n          <InputSlider value={correlation} min={-0.99} max={0.99} step={0.01} onChange={(value) => setCorrelation(value)}/>\n          <br/>\n          <InputGroup style={{ width: 'fit-content', margin: 'auto' }}>\n            <InputGroup.Text>Covariance between Study Hours and Sleep Hours:</InputGroup.Text>\n            <InputGroup.Text aria-label=\"covariance\">{(correlation * stdX * stdY).toFixed(2)}</InputGroup.Text>\n          </InputGroup>\n        </Col>\n      </Row>\n      <br/>\n      <Row>\n        <Col>\n          <p>Estimate Regression Using Test Score and Study Hours Data </p>\n          <Button variant=\"primary\" onClick={() => generateSeries()}>Generate!</Button>\n        </Col>\n      </Row>\n      <br/>\n      {(stage >= 2) && (\n        <div>\n          <Row>\n            <Col lg={{ span: 12, offset: 0 }} xl={{ span: 8, offset: 2 }}>\n              <OmittedVariableChart\n                dataPoints={allData.points}\n                naiveLine={allData.naiveLine}\n                correctedLine={showCorrect ? allData.correctedLine : []}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <p variant=\"primary\">Add Omitted Variable, Density, to Regression</p>\n              <Button\n                variant=\"outline-primary\"\n                onClick={() => setShowCorrect(!showCorrect)}\n                active={showCorrect}\n              >\n                Show Corrected Regression Line\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { Alert, Row } from 'react-bootstrap';\nimport OVBSimulation from './OVBSimulation';\n\nexport default function OmittedVariableBias() {\n  return (\n    <div className=\"module-container\">\n      <Alert style={{ width: '50%', margin: 'auto' }} variant=\"primary\">\n        Omitted Variable Bias\n      </Alert>\n      <br/>\n      <Row>\n        <p>We are studying the relationship between test score and study hours:</p>\n        <p>Test Score = β₀ + β₁Study Hoursᵢ + 𝛿Sleep Hoursᵢ + uᵢ</p>\n      </Row>\n      <br/>\n      <OVBSimulation/>\n      <br/>\n    </div>\n  );\n}\n","import { Row, Col } from 'react-bootstrap';\nimport InputSlider from '../InputSlider.js';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\nimport PropTypes from 'prop-types';\nimport { distributionType, stringOrNumberType } from '../../lib/types.js';\n\nexport default function ConfidenceInputs({ distType, setDistType, confLevel, setConfLevel }) {\n  return (\n    <div>\n      <Row>\n        <div>\n          1) Do you want to assume that you know σ? If yes, choose Z. If no, choose T: {' '}\n          <SelectorButtonGroup options={['Z', 'T']} select={setDistType} selected={distType}/>\n        </div>\n      </Row>\n      <br/>\n      <Row>\n        <div>\n          2) Confidence Level: {' '}\n          <SelectorButtonGroup\n            options={['90%', '95%', '99%']}\n            select={(pct) => setConfLevel(pct.slice(0, 2))}\n            selected={`${confLevel}%`}\n          />\n        </div>\n      </Row>\n      <br/>\n      <Row>\n        <Col sm=\"12\" md={{ span: 6, offset: 3 }}>\n          <div>\n            More Levels:\n            <InputSlider value={confLevel} min={1} max={99} step={1} onChange={setConfLevel}/>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nConfidenceInputs.propTypes = {\n  distType: distributionType.isRequired,\n  setDistType: PropTypes.func.isRequired,\n  confLevel: stringOrNumberType.isRequired,\n  setConfLevel: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Alert } from 'react-bootstrap';\nimport _ from 'lodash';\nimport More from 'highcharts/highcharts-more';\nimport { max } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType, popShapeType } from '../../lib/types.js';\nimport { VALUES_ALT } from '../../lib/constants.js';\n\nMore(Highcharts);\n\nexport default function ConfidenceIntervalsChart({ confidenceLevel, samples, popShape, popMean, selected, setSelected }) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const { xmaxval, xminval, title, xLabel } = VALUES_ALT[popShape];\n\n    const sampleMeans = [];\n    const containsMean = [];\n    const doesntContainMean = [];\n\n    samples.forEach((sampleObject) => {\n      sampleMeans.push({\n        ...sampleObject,\n        x: sampleObject.id,\n        y: sampleObject.mean\n      });\n      if (sampleObject.label) {\n        containsMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      } else {\n        doesntContainMean.push({\n          ...sampleObject,\n          low: sampleObject.lowerConf,\n          high: sampleObject.upperConf,\n          x: sampleObject.id\n        })\n      }\n    });\n\n    const tooltipFormat = {\n      headerFormat: '',\n      pointFormat: 'Sample Size: <b>{point.size}</b><br/>Sample Mean: <b>{point.mean}</b><br/>Lower Bound of CI: <b>{point.lowerConf}</b><br/>Upper Bound of CI: <b>{point.upperConf}</b><br/>Confidence Level: <b>{point.confidenceLevel}%</b><br/>Distribution: <b>{point.distribution}</b><br/>',\n      outside: true,\n      borderColor: 'gray',\n    }\n\n    const newChart = {\n      chart: {\n        type: 'columnrange',\n        inverted: true,\n        animation: false,\n        zoomType: 'xy',\n        events: {\n          // hack to allow zoom\n          selection: (event) => {\n            event.target.series.forEach((series) => {\n              series.data.forEach((point) => {\n                point.select(false, false)\n              })\n            })\n          }\n        }\n      },\n      plotOptions: {\n        series: {\n          point: {\n            events: {\n              click() {\n                setSelected(this);\n                this.select(false, false);\n              }\n            }\n          },\n          animation: {\n            duration: 0\n          },\n          cursor: 'pointer'\n        }\n      },\n      title: {\n        text: title\n      },\n      xAxis: {\n        reversed: false,\n        min: 1,\n        max: max(samples.length, 10),\n        startOnTick: true,\n        title: {\n          text: 'Sample Number'\n        },\n        tickPixelInterval: 1,\n        tickInterval: 1\n      },\n      yAxis: {\n        min: xminval,\n        max: xmaxval,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: xLabel\n        }\n      },\n      series: [\n        {\n          name: 'Confidence Interval',\n          data: containsMean,\n          color: 'rgba(0, 170, 0, 0.5)',\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: 'rgba(0, 170, 0, 1)'\n            },\n            inactive: {\n              color: 'rgba(0, 170, 0, 0.5)'\n            },\n            select: {\n              enabled: false,\n              color: 'rgba(0, 170, 0, 0.5)'\n            }\n          }\n        },\n        {\n          name: 'Confidence Interval',\n          data: doesntContainMean,\n          color: 'rgba(255, 0, 0, 0.5)',\n          centerInCategory: true,\n          showInLegend: false,\n          tooltip: tooltipFormat,\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              color: 'rgba(255, 0, 0, 1)'\n            },\n            inactive: {\n              color: 'rgba(255, 0, 0, 0.5)'\n            },\n            select: {\n              enabled: false,\n              color: 'rgba(255, 0, 0, 0.5)'\n            }\n          }\n        },\n        {\n          name: 'Sample Means',\n          type: 'scatter',\n          data: sampleMeans,\n          color: '#616161',\n          marker: {\n            enabled: true,\n            symbol: 'diamond',\n            radius: 1\n          },\n          allowPointSelect: true,\n          animation: {\n            duration: 0\n          },\n          states: {\n            hover: {\n              enabled: false\n            },\n            select: {\n              enabled: false,\n            }\n          },\n          tooltip: tooltipFormat,\n        },\n        {\n          type: 'line',\n          name: 'Population Mean',\n          data: [[0, popMean], [samples.length, popMean]],\n          color: 'gray',\n          enableMouseTracking: false,\n          showInLegend: false,\n          label: {\n            enabled: false\n          },\n          marker: {\n            enabled: false\n          },\n          zIndex: -5\n        }\n      ]\n    }\n    setChart(newChart);\n  }, [confidenceLevel, samples, popShape, popMean, setSelected]);\n\n  return (\n    <div>\n      {\n        selected ? (\n          <Alert variant={selected.label ? 'success' : 'danger'}>\n            Sample number {selected.id} has a mean of {selected.mean.toFixed(2)}, with {confidenceLevel}% CI ({_.round(selected.lowerConf, 2)}, {_.round(selected.upperConf, 2)}). CI contains the population mean? {selected.label.toString()}\n          </Alert>\n        ) : <div style={{ height: 80 }}/>\n      }\n      <HighchartsReact highcharts={Highcharts} options={chart}/>\n    </div>\n  );\n}\n\nConfidenceIntervalsChart.propTypes = {\n  confidenceLevel: PropTypes.number.isRequired,\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  popShape: popShapeType.isRequired,\n  popMean: PropTypes.number.isRequired,\n  selected: confidenceIntervalsSampleType,\n  setSelected: PropTypes.func.isRequired,\n}\n","import { useState } from 'react';\nimport { Button, Form, Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function ManySamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <Alert variant=\"primary\" style={{ width: '50%', margin: 'auto' }}>\n        Simulate drawing many many samples\n      </Alert>\n      <br/>\n      <span> Sample Size: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Sample Size:\"\n        onChange={(event) => setResampleSize(event.target.value)}\n        value={resampleSize}\n      />\n      <br/>\n      <span> Number of Replications: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        variant=\"secondary\"\n        onClick={() => addSamples(resampleSize, numberResamples)}\n        disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button variant=\"secondary\" onClick={() => addSamples()}>Clear</Button>\n    </div>\n  );\n}\n\nManySamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import { Table } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { confidenceIntervalsSampleType } from '../../lib/types.js';\n\nexport default function SamplesTable({ samples, setSelected }) {\n  const samplesTable = samples.map((sampleObject) => (\n    <tr\n      style={{ backgroundColor: sampleObject.label ? 'rgba(23, 161, 80, 0.233)' : 'rgba(161, 23, 23, 0.233)', cursor: 'pointer' }}\n      key={sampleObject.id}\n      onClick={() => setSelected(sampleObject)}\n    >\n      <td>{sampleObject.id}</td>\n      <td>{sampleObject.size}</td>\n      <td>{sampleObject.mean}</td>\n      <td>{sampleObject.lowerConf}</td>\n      <td>{sampleObject.upperConf}</td>\n      <td>{sampleObject.confidenceLevel}</td>\n      <td>{sampleObject.distribution.toUpperCase()}</td>\n    </tr>\n  )\n  );\n\n  samplesTable.reverse()\n\n  return (\n    <div style={{ height: 500, overflow: 'auto', marginTop: -50 }}>\n      <Table hover className=\"ci-table\">\n        <thead>\n          <tr>\n            <th>Sample</th>\n            <th>Size</th>\n            <th>Mean</th>\n            <th>Lower Bound for CI</th>\n            <th>Upper Bound for CI</th>\n            <th>Confidence Level</th>\n            <th>Distribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {samplesTable}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nSamplesTable.propTypes = {\n  samples: PropTypes.arrayOf(confidenceIntervalsSampleType).isRequired,\n  setSelected: PropTypes.func.isRequired,\n}\n","import DotPlot from '../DotPlot';\nimport { Alert, Container } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, popShapeType } from '../../lib/types.js';\nimport { TEXTS_ALT, VALUES_ALT } from '../../lib/constants.js';\n\nexport default function PopulationChart({ popArray, popMean, sampled, popShape }) {\n  const { xmaxval, xminval, ymaxval, title, xLabel } = VALUES_ALT[popShape];\n\n  const series = [\n    {\n      name: 'Population',\n      data: popArray\n    },\n    {\n      name: 'Samples',\n      data: sampled\n    }\n  ];\n\n  return (\n    <Container fluid>\n      <Alert variant=\"secondary\">\n        We queried the {TEXTS_ALT[popShape][0]} of {popArray.length} {TEXTS_ALT[popShape][1]} and plotted the results on the following chart.\n      </Alert>\n      <DotPlot\n        series={series}\n        title={`${title} <br /> Population Mean: ${_.round(popMean, 2)}`}\n        xMin={xminval}\n        xMax={xmaxval}\n        yMax={ymaxval}\n        xLabel={xLabel}\n      />\n    </Container>\n  );\n}\n\nPopulationChart.propTypes = {\n  popArray: dataObjectArrayType.isRequired,\n  popMean: PropTypes.number,\n  sampled: dataObjectArrayType.isRequired,\n  popShape: popShapeType.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport ConfidenceInputs from './ConfidenceInputs.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport ConfidenceIntervalsChart from './ConfidenceIntervalsChart.js';\nimport ManySamplesInput from './ManySamplesInput.js';\nimport SamplesTable from './SamplesTable.js';\nimport { dataFromDistribution, populationMean, populationStandardDev } from '../../lib/stats-utils.js';\nimport { Row, Col, Alert } from 'react-bootstrap';\nimport PopulationChart from './PopulationChart.js';\nimport _ from 'lodash';\nimport { jStat } from 'jstat';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts';\nimport { popShapeType } from '../../lib/types.js';\n\nexport default function CISimulation({ popShape, populationSize }) {\n  const [distType, setDistType] = useState('Z'); // can be \"Z\" or \"T\"\n  const [confLevel, setConfLevel] = useState(95);\n  const [popArray, setPopArray] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    const newPop = dataFromDistribution(popShape, populationSize, { low: 55, hi: 75 });\n    setPopArray(newPop);\n    setSamples([]);\n    setSelected();\n  }, [popShape, populationSize]);\n\n  // this is a hack to get around what I believe is a bug in highcharts\n  // where a point will sometimes turn gray when selected\n  const unselect = () => {\n    Highcharts.charts.forEach((chart) => {\n      if (chart) {\n        chart.series.forEach((series) => {\n          series.data.forEach((point) => {\n            point.select(false, false)\n          })\n        })\n      }\n    });\n  }\n\n  const generateSamples = (size, replications = 1) => {\n    unselect();\n    if (!size) { // calling generateSamples with no arguments clears the data\n      setSamples([]);\n      setSelected();\n    } else {\n      const sampleObjects = [];\n      for (let i = 0; i < replications; i++) {\n        const sample = _.sampleSize(popArray, size);\n        const mean = _.round(populationMean(sample), 2);\n        const popMean = _.round(populationMean(popArray), 2);\n        const standardDev = populationStandardDev((distType === 'Z') ? popArray : sample);\n        const ciFunction = (distType === 'Z') ? jStat.normalci : jStat.tci;\n        const [lowerConf, upperConf] = ciFunction(mean, 1 - (confLevel / 100), standardDev, size);\n        const sampleObject = {\n          data: sample,\n          size: +size,\n          mean,\n          lowerConf: _.round(lowerConf, 2),\n          upperConf: _.round(upperConf, 2),\n          confidenceLevel: confLevel,\n          distribution: distType,\n          label: (popMean >= _.round(lowerConf, 2)) && (popMean <= _.round(upperConf, 2)),\n        }\n        sampleObjects.push(sampleObject);\n      }\n      const newSamples = [...samples, ...sampleObjects];\n      const indexedSamples = newSamples.map((sample, index) => ({ ...sample, id: index + 1 }))\n      setSamples(indexedSamples);\n      setSelected(indexedSamples[indexedSamples.length - 1]);\n    }\n  }\n\n  const selectPoint = (point) => {\n    setSelected(point);\n    unselect();\n  }\n\n  return (\n    <Collapsable>\n      <div>\n        <Row>\n          <ConfidenceInputs\n            distType={distType}\n            setDistType={setDistType}\n            confLevel={confLevel}\n            setConfLevel={setConfLevel}\n          />\n        </Row>\n        <br/>\n        <Row md={1} lg={2}>\n          <Col>\n            <PopulationChart\n              popArray={popArray}\n              popMean={populationMean(popArray)}\n              sampled={selected ? selected.data : []} // most recent sample data\n              popShape={popShape}\n            />\n            <p>Try drawing some samples and calculating means</p>\n            <SampleSizeInput maxSize={popArray.length} handleClick={generateSamples}/>\n          </Col>\n          <Col>\n            <ConfidenceIntervalsChart\n              confidenceLevel={confLevel}\n              samples={samples}\n              popShape={popShape}\n              popMean={_.round(populationMean(popArray), 2)}\n              selected={selected}\n              setSelected={setSelected}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={12} xl={5}>\n            <ManySamplesInput\n              populationSize={popArray.length}\n              addSamples={generateSamples}\n            />\n          </Col>\n          <Col lg={12} xl={7}>\n            <SamplesTable samples={samples} setSelected={selectPoint}/>\n          </Col>\n        </Row>\n        <br/>\n        <Row>\n          {(samples.length > 0) && (\n            <Alert variant=\"info\">\n              {samples.filter(({ label }) => !label).length} intervals did not contain the population mean.\n              <br/>\n              {samples.filter(({ label }) => label).length} did ({_.round(100 * samples.filter(({ label }) => label).length / samples.length, 2)}%).\n            </Alert>\n          )}\n        </Row>\n      </div>\n    </Collapsable>\n  );\n}\n\nCISimulation.propTypes = {\n  popShape: popShapeType.isRequired,\n  populationSize: PropTypes.number.isRequired,\n}\n","import { useState } from 'react';\nimport PopBar from '../PopBar.js';\nimport { Alert } from 'react-bootstrap';\nimport CISimulation from './CISimulation.js';\nimport { SAMPLE_SIZE } from '../../lib/constants.js';\n\nexport default function ConfidenceIntervals() {\n  const [popShape, setPopType] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <Alert className=\"sim-description\" variant=\"primary\">\n        Confidence Intervals\n      </Alert>\n      <Alert className=\"sim-description\" variant=\"primary\">\n        This simulation demonstrates how confidence intervals provide an estimate for the location of the true population mean µ. In this exercise you will first choose 1) whether to assume that you know the true population standard deviation and 2) what confidence level to impose. Then, you will take random samples from the population, calculation a sample mean for each, and construct confidence intervals around those sample means. The proportion of confidence intervals that contain the true mean corresponds to the chosen confidence level!\n      </Alert>\n      <PopBar options={['Normal', 'Uniform', 'Exponential', 'Chi-Squared']} setPop={setPopType}/>\n      {popShape && <CISimulation popShape={popShape} populationSize={SAMPLE_SIZE}/>}\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { hypothesisEqualityType, testTypeType } from '../../lib/types';\n\nexport default function Conclusion({ firstMean, secondMean, equality, reject, testType }) {\n\n  let result;\n  let relation;\n  if ((testType === 'oneSample' && equality === '>') || (testType === 'twoSample' && equality === '<')) {\n    result = firstMean > secondMean;\n    relation = firstMean > secondMean ? 'greater than' : 'less than';\n  } else if ((testType === 'oneSample' && equality === '<') || (testType === 'twoSample' && equality === '>')) {\n    result = firstMean < secondMean;\n    relation = firstMean < secondMean ? 'less than' : 'greater than';\n  } else if (equality === '!=') {\n    result = firstMean != secondMean;\n    relation = firstMean != secondMean ? 'not equal to' : 'equal to';\n  }\n\n  return (\n    <p>\n      {(testType === 'oneSample') ? `The true mean is ${relation} μ_0.` : `The second population mean is ${relation} the first population mean.`} Therefore we should {(result) ? 'reject' : 'fail to reject'} the null hypothesis. Our conclusion above was {(result === reject) ? 'correct' : 'incorrect'}.\n    </p>\n  )\n}\n\nConclusion.propTypes = {\n  firstMean: PropTypes.number.isRequired,\n  secondMean: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  reject: PropTypes.bool.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { Container, Row, Alert } from 'react-bootstrap';\nimport DotPlot from '../DotPlot.js';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType, hypothesisEqualityType, testTypeType } from '../../lib/types.js';\nimport { populationMean } from '../../lib/stats-utils.js';\nimport { max } from 'mathjs';\nimport Conclusion from './Conclusion.js';\n\nexport default function PopulationChartReveal({ popArr, popArr2, mu0, equality, reject, testType }) {\n  const popMean = populationMean(popArr);\n  const popMean2 = populationMean(popArr2);\n  console.log(popMean, popMean2, mu0)\n  const popArrMax = (popArr.length > 0) ? max(popArr.map(({ y }) => y)) : 0;\n  const popArr2Max = (popArr2.length > 0) ? max(popArr2.map(({ y }) => y)) : 0;\n  const maxHeight = max(popArrMax, popArr2Max);\n\n  const series = [\n    {\n      name: `Population${(popArr2.length === 0) ? '' : ' 1'}`,\n      data: popArr\n    },\n    {\n      name: 'Population 2',\n      data: popArr2,\n      showInLegend: popArr2.length > 0,\n      visible: popArr2.length > 0,\n      color: '#903C3D',\n      marker: {\n        symbol: 'diamond',\n        radius: 4,\n        lineColor: '#5A2526',\n        lineWidth: 1\n      }\n    },\n    {\n      type: 'line',\n      name: (popArr2.length === 0) ? 'True Population Mean' : 'First Population Mean',\n      data: [{ x: popMean || 0, y: 0 }, { x: popMean || 0, y: maxHeight }],\n      color: 'blue',\n      enableMouseTracking: false,\n      showInLegend: false,\n      label: {\n        format: `<div>${(popArr2.length === 0) ? 'True Population Mean' : 'First Population Mean'}: ${popMean && popMean.toFixed(2)}</div>`\n      }\n    },\n    {\n      type: 'line',\n      name: 'Second Population Mean',\n      data: [{ x: popMean2 || 0, y: 0 }, { x: popMean2 || 0, y: maxHeight }],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: popArr2.length > 0,\n      label: {\n        format: `<div>Second Population Mean: ${popMean2 && popMean2.toFixed(2)}</div>`\n      }\n    },\n    {\n      type: 'line',\n      name: 'Mu_0',\n      data: [{ x: mu0 || 0, y: 0 }, { x: mu0 || 0, y: popArrMax }],\n      color: 'red',\n      enableMouseTracking: false,\n      showInLegend: false,\n      visible: popArr2.length === 0,\n      label: {\n        format: `<div>Mu_0: ${mu0}</div>`\n      }\n    }\n  ];\n\n  return (\n    <Container>\n      <Row>\n        <Container fluid>\n          <Row>\n            <Alert variant=\"secondary\">\n              We queried the monthly Milk Production of {(popArr2.length > 0) ? 'two populations of' : ''} {popArr.length} cows and plotted the results on the following chart.\n            </Alert>\n          </Row>\n          <Row>\n            <DotPlot\n              series={series}\n              title=\"Milk Production\"\n              xLabel=\"Gallons\"\n            />\n          </Row>\n        </Container>\n      </Row>\n      <Row>\n        <Conclusion\n          firstMean={(testType === 'oneSample') ? popMean : popMean2}\n          secondMean={(testType === 'oneSample') ? mu0 : popMean}\n          equality={equality}\n          reject={reject}\n          testType={testType}\n        />\n      </Row>\n    </Container>\n  )\n}\n\nPopulationChartReveal.propTypes = {\n  popArr: dataObjectArrayType.isRequired,\n  popArr2: dataObjectArrayType.isRequired,\n  mu0: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  reject: PropTypes.bool.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { hypothesisEqualityType, testTypeType } from '../../lib/types.js';\n\nexport default function ResultsDisplay({ testType, mean, mean2, standardDev, standardDev2, testStatistic, pValue, alpha, equality }) {\n  return (\n    <Alert variant=\"secondary\" >\n      <p>This sample yields the following data:</p>\n      {(testType === 'oneSample') ? (\n        <div>\n          <p>Sample Mean: {_.round(mean, 2)}</p>\n          <p>Sample Standard Deviation: {_.round(standardDev, 2)} </p>\n        </div>\n      ) : (\n        <div>\n          <p>First Sample Mean: {_.round(mean, 2)}</p>\n          <p>Second Sample Mean: {_.round(mean2, 2)}</p>\n          <p>First Sample Standard Deviation: {_.round(standardDev, 2)} </p>\n          <p>Second Sample Standard Deviation: {_.round(standardDev2, 2)} </p>\n        </div>\n      )}\n      <p>The test statistic is {_.round(testStatistic, 2)}</p>\n      <p>\n        This test statistic yields a p-value of P(Z {(equality === '!=') ? '>' : equality} {(equality === '!=') ? '|test stat|' : 'test stat'}) = {pValue.toPrecision(3)}.\n      </p>\n      <p>Therefore we {(pValue < alpha) ? 'reject' : 'fail to reject'} the null hypothesis. </p>\n    </Alert>\n  )\n}\n\nResultsDisplay.propTypes = {\n  testType: testTypeType.isRequired,\n  mean: PropTypes.number.isRequired,\n  mean2: PropTypes.number,\n  standardDev: PropTypes.number.isRequired,\n  standardDev2: PropTypes.number,\n  testStatistic: PropTypes.number.isRequired,\n  pValue: PropTypes.number.isRequired,\n  alpha: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired\n}\n","import PropTypes from 'prop-types';\nimport { Row, Col, InputGroup, Form } from 'react-bootstrap';\nimport { stringOrNumberType } from '../../lib/types';\n\nexport default function SampleSizeAlphaInputs({ sampleSize, setSampleSize, alpha, setAlpha, popSize, sampleSize2, setSampleSize2, showSecondInput }) {\n  return (\n    <Row sm=\"1\" md={showSecondInput ? 1 : 2} lg=\"2\">\n      <Col>\n        <InputGroup>\n          <InputGroup.Text>{showSecondInput ? 'First' : ''} Sample Size</InputGroup.Text>\n          <Form.Control\n            type=\"number\"\n            step={1}\n            value={sampleSize}\n            min={1}\n            max={popSize}\n            onChange={(event) => setSampleSize(event.target.value)}\n          />\n        </InputGroup>\n        {showSecondInput && (\n          <InputGroup>\n            <InputGroup.Text>Second Sample Size</InputGroup.Text>\n            <Form.Control\n              type=\"number\"\n              step={1}\n              value={sampleSize2}\n              min={1}\n              max={popSize}\n              onChange={(event) => setSampleSize2(event.target.value)}\n            />\n          </InputGroup>\n        )}\n      </Col>\n      <Col>\n        <InputGroup>\n          <InputGroup.Text>Alpha</InputGroup.Text>\n          <Form.Control\n            type=\"number\"\n            step={0.01}\n            value={alpha}\n            min={0}\n            max={1}\n            onChange={(event) => setAlpha(event.target.value)}\n          />\n        </InputGroup>\n      </Col>\n    </Row>\n  )\n}\n\nSampleSizeAlphaInputs.propTypes = {\n  sampleSize: stringOrNumberType.isRequired,\n  sampleSize2: stringOrNumberType.isRequired,\n  setSampleSize: PropTypes.func.isRequired,\n  setSampleSize2: PropTypes.func.isRequired,\n  alpha: stringOrNumberType.isRequired,\n  setAlpha: PropTypes.func.isRequired,\n  popSize: PropTypes.number.isRequired,\n  showSecondInput: PropTypes.bool.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport BellCurve from 'highcharts/modules/histogram-bellcurve';\nimport { distributionType, hypothesisTestingSampleArrayType, testTypeType } from '../../lib/types';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { dataFromDistribution } from '../../lib/stats-utils';\nimport { sqrt } from 'mathjs';\n\nBellCurve(Highcharts);\n\nexport default function NormalCurve({ means, mu0, popStandardDev, sampleSize, distType, testType }) {\n  const [population, setPopulation] = useState(\n    dataFromDistribution(\n      'Normal', 2000, { mean: (testType === 'oneSample') ? mu0 : 0, standardDev: popStandardDev / sqrt(sampleSize) }\n    )\n  );\n  const [chart, setChart] = useState({\n    chart: {\n      zoomType: 'xy'\n    },\n    plotOptions: {\n      series: {\n        animation: {\n          duration: 100,\n          easing: 'easeOutBounce'\n        },\n      }\n    },\n    title: {\n      text: 'Sample Means'\n    },\n    xAxis: {\n      title: {\n        text: 'Gallons',\n      },\n      startOnTick: true,\n      endOnTick: true\n    },\n    yAxis: {\n      labels: {\n        enabled: false\n      },\n      startOnTick: true,\n      endOnTick: true,\n      title: false\n    },\n    tooltip: {\n      pointFormat: `${(testType === 'oneSample') ? 'sample mean' : 'difference of means'}: <b>{point.mean}</b><br/>test statistic: <b>{point.testStatistic}</b><br/>reject H_0: <b>{point.reject}</b></br>`\n    }\n  });\n\n  useEffect(() => {\n    setPopulation(\n      dataFromDistribution(\n        'Normal', 2000, { mean: (testType === 'oneSample') ? mu0 : 0, standardDev: popStandardDev / sqrt(sampleSize) }\n      )\n    )\n  }, [mu0, popStandardDev, sampleSize, testType]);\n\n  useEffect(() => {\n    const meanCounts = {};\n    const rejects = [];\n    const accepts = [];\n    means.forEach(({ testStatistic, mean, reject }) => {\n      meanCounts[mean] = _.defaultTo(meanCounts[mean] + 1, 1);\n      const meanObject = {\n        x: mean,\n        y: meanCounts[mean] * ((distType === 'T') ? 1 : 0.005 * sqrt(sampleSize)),\n        testStatistic,\n        mean,\n        reject,\n      }\n      if (reject) {\n        rejects.push(meanObject)\n      } else {\n        accepts.push(meanObject)\n      }\n    });\n\n    const newChart = {\n      series: [\n        {\n          name: 'Normal Distribution',\n          type: 'bellcurve',\n          baseSeries: 1,\n          zIndex: -1,\n          enableMouseTracking: false,\n          label: false,\n          showInLegend: false,\n          visible: !(distType === 'T')\n        },\n        {\n          name: 'Data',\n          type: 'scatter',\n          data: population.map(({ x }) => x),\n          visible: false,\n          showInLegend: false\n        },\n        {\n          name: 'Fail to Reject H_0',\n          type: 'scatter',\n          data: accepts,\n          color: '#03fc0b',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: 'green',\n            lineWidth: 1\n          }\n        },\n        {\n          name: 'Reject H_0',\n          type: 'scatter',\n          data: rejects,\n          color: 'red',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: '#800000',\n            lineWidth: 1\n          }\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [means, population, sampleSize, distType]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nNormalCurve.propTypes = {\n  means: hypothesisTestingSampleArrayType.isRequired,\n  mu0: PropTypes.number.isRequired,\n  popStandardDev: PropTypes.number.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n  distType: distributionType.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { useState } from 'react';\nimport { Button, Form, Alert, InputGroup } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function ManySamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <Alert variant=\"primary\" style={{ width: '50%', margin: 'auto' }}>\n        Simulate drawing many many samples\n      </Alert>\n      <br/>\n      <span> Sample Size: </span>\n      <InputGroup className=\"sample-size-input\" style={{ width: '40%', margin: 'auto' }}>\n        <Form.Control\n          align=\"right\"\n          type=\"number\"\n          placeholder=\"Sample Size:\"\n          min={1}\n          value={resampleSize}\n          onChange={(event) => setResampleSize(event.target.value)}\n        />\n        <Button\n          variant=\"secondary\"\n          disabled={!resampleSize || resampleSize > populationSize || resampleSize < 1}\n          onClick={() => addSamples(+resampleSize, 1, false)}\n        >\n          Sample Once\n        </Button>\n      </InputGroup>\n      <br/>\n      <span> Number of Replications: </span>\n      <Form.Control\n        style={{ width: '40%', margin: 'auto' }}\n        min={1}\n        type=\"number\"\n        placeholder=\"Number of Replications:\"\n        onChange={(event) => setNumberResamples(event.target.value)}\n        value={numberResamples}\n      />\n      <br/>\n      <Button\n        variant=\"secondary\"\n        onClick={() => addSamples(resampleSize, numberResamples, true)}\n        disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n      >\n        Run\n      </Button>\n      <Button variant=\"secondary\" onClick={() => addSamples(0, 0, true)}>Clear</Button>\n    </div>\n  );\n}\n\nManySamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport BellCurve from 'highcharts/modules/histogram-bellcurve';\nimport { distributionType, hypothesisTestingSampleArrayType, testTypeType } from '../../lib/types';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { dataFromDistribution } from '../../lib/stats-utils';\nimport { sqrt } from 'mathjs';\n\nBellCurve(Highcharts);\n\nexport default function StdNormalCurve({ means, sampleSize, distType, testType }) {\n  const [population] = useState(\n    dataFromDistribution('Normal', 2000, { mean: 0, standardDev: 1 })\n  );\n  const [chart, setChart] = useState({\n    chart: {\n      zoomType: 'xy'\n    },\n    plotOptions: {\n      series: {\n        animation: {\n          duration: 100,\n          easing: 'easeOutBounce'\n        },\n      }\n    },\n    title: {\n      text: 'Sample Means'\n    },\n    xAxis: {\n      title: {\n        text: 'Test Statistic',\n      },\n      startOnTick: true,\n      endOnTick: true\n    },\n    yAxis: {\n      labels: {\n        enabled: false\n      },\n      startOnTick: true,\n      endOnTick: true,\n      title: false\n    },\n    tooltip: {\n      pointFormat: `test statistic: <b>{point.testStatistic}</b><br/>${(testType === 'oneSample') ? 'sample mean' : 'difference of means'}: <b>{point.mean}</b><br/>reject H_0: <b>{point.reject}</b></br>`\n    }\n  });\n\n  useEffect(() => {\n    const meanCounts = {};\n    const rejects = [];\n    const accepts = [];\n    means.forEach(({ testStatistic, mean, reject }) => {\n      meanCounts[mean] = _.defaultTo(meanCounts[mean] + 1, 1);\n      const meanObject = {\n        x: testStatistic,\n        y: meanCounts[mean] * ((distType === 'T') ? 1 : 0.005 * sqrt(sampleSize)),\n        testStatistic,\n        mean,\n        reject,\n      }\n      if (reject) {\n        rejects.push(meanObject)\n      } else {\n        accepts.push(meanObject)\n      }\n    });\n\n    const newChart = {\n      series: [\n        {\n          name: 'Normal Distribution',\n          type: 'bellcurve',\n          baseSeries: 1,\n          zIndex: -1,\n          enableMouseTracking: false,\n          label: false,\n          showInLegend: false,\n          visible: !(distType === 'T')\n        },\n        {\n          name: 'Data',\n          type: 'scatter',\n          data: population.map(({ x }) => x),\n          visible: false,\n          showInLegend: false\n        },\n        {\n          name: 'Fail to Reject H_0',\n          type: 'scatter',\n          data: accepts,\n          color: '#03fc0b',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: 'green',\n            lineWidth: 1\n          }\n        },\n        {\n          name: 'Reject H_0',\n          type: 'scatter',\n          data: rejects,\n          color: 'red',\n          marker: {\n            symbol: 'diamond',\n            radius: 4,\n            lineColor: '#800000',\n            lineWidth: 1\n          }\n        }\n      ]\n    }\n\n    setChart(newChart);\n  }, [means, population, sampleSize, distType]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nStdNormalCurve.propTypes = {\n  means: hypothesisTestingSampleArrayType.isRequired,\n  sampleSize: PropTypes.number.isRequired,\n  distType: distributionType.isRequired,\n  testType: testTypeType.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport DotPlot from '../DotPlot.js';\nimport NormalCurve from './NormalCurve.js';\nimport ManySamplesInput from './ManySamplesInput.js';\nimport { Container, Row, Col, Alert, Form } from 'react-bootstrap';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { distributionType, hypothesisEqualityType, popShapeType, testTypeType } from '../../lib/types.js';\nimport StdNormalCurve from './StdNormalCurve.js';\nimport { random } from 'mathjs';\nimport {\n  calculateOneSampleTestStatistic,\n  calculatePValue,\n  calculateTwoSampleTestStatistic,\n  dataFromDistribution,\n  populationMean,\n  populationStandardDev\n} from '../../lib/stats-utils';\n\nexport default function SimulateTypeOneError({ popShape, mu0, alpha, distType, sides, equality, testType, sd1, sd2 }) {\n  const [population, setPopulation] = useState([]);\n  const [population2, setPopulation2] = useState([]);\n  const [sampleMeans, setSampleMeans] = useState([]);\n  const [sampleSize, setSampleSize] = useState(0);\n  const [standardized, setStandardized] = useState(false);\n\n  useEffect(() => {\n    setPopulation(dataFromDistribution(\n      popShape,\n      2000,\n      {\n        mean: mu0,\n        standardDev: sd1,\n        low: mu0 - 10,\n        hi: mu0 + 10,\n        mysteryMean1: mu0 - 6,\n        mysteryMean2: mu0 + 6,\n        mysterySD1: random(1, 4),\n        mysterySD2: random(1, 4)\n      }\n    ))\n    if (testType === 'twoSample') {\n      setPopulation2(dataFromDistribution(\n        popShape,\n        2000,\n        {\n          mean: mu0,\n          standardDev: sd2,\n          low: mu0 - 10,\n          hi: mu0 + 10,\n          mysteryMean1: mu0 - 6,\n          mysteryMean2: mu0 + 6,\n          mysterySD1: random(1, 4),\n          mysterySD2: random(1, 4)\n        }\n      ))\n    }\n  }, [mu0, popShape, testType, sd1, sd2]);\n\n  const addSamples = (size, replications, clear) => {\n    const means = [];\n    for (let i = 0; i < replications; i++) {\n      const sample = _.sampleSize(population, size);\n      const sampleMean = populationMean(sample);\n      const sample2 = (testType === 'twoSample') ? _.sampleSize(population2, size) : [];\n      const sampleMean2 = populationMean(sample2);\n      const testStatistic = (testType === 'oneSample')\n        ? calculateOneSampleTestStatistic(\n          distType,\n          sampleMean,\n          mu0,\n          populationStandardDev((distType === 'Z') ? population : sample),\n          size\n        )\n        : calculateTwoSampleTestStatistic(\n          sampleMean,\n          sampleMean2,\n          populationStandardDev((distType === 'Z') ? population : sample),\n          populationStandardDev((distType === 'Z') ? population2 : sample2),\n          size,\n          size\n        );\n\n      const pValue = calculatePValue(distType, testStatistic, equality, size, sides);\n\n      const sampleObject = {\n        testStatistic: _.round(testStatistic, 2),\n        mean: testType === 'oneSample' ? _.round(sampleMean, 2) : _.round(sampleMean - sampleMean2, 2),\n        reject: !(((equality === '<') && (testStatistic > 0)) || ((equality === '>') && (testStatistic < 0))) && pValue <= alpha\n      };\n      means.push(sampleObject);\n    }\n    const newSampleMeans = clear ? means : [...sampleMeans, ...means];\n    setSampleMeans(newSampleMeans);\n    setSampleSize(size);\n  }\n\n  const dotPlotSeries = [\n    {\n      name: `Population${(testType === 'twoSample') ? ' 1' : ''}`,\n      data: population,\n    },\n    {\n      name: 'Population 2',\n      data: population2,\n      color: '#903C3D',\n      marker: {\n        symbol: 'diamond',\n        radius: 4,\n        lineColor: '#5A2526',\n        lineWidth: 1\n      }\n    }\n  ]\n\n  return (\n    <Container>\n      <Alert variant=\"primary\" style={{ marginTop: 50, marginBottom: 50 }}>\n        Now we simulate Type I error. In other words, if the true mean were actually {mu0.toPrecision(2)}, how often would we (incorrectly) reject the null hypothesis?\n      </Alert>\n      <Row>\n        <Col>\n          <DotPlot series={dotPlotSeries} title={`Population${(testType === 'twoSample') ? 's' : ''}`} xLabel=\"Gallons\"/>\n        </Col>\n        <Col>\n          {!standardized ? (\n            <NormalCurve\n              meansDiff={sampleMeans.mean}\n              means={sampleMeans}\n              mu0={mu0}\n              popStandardDev={_.defaultTo(populationStandardDev(population), 0)}\n              sampleSize={+sampleSize || 1}\n              distType={distType}\n              testType={testType}\n            />\n          ) : (\n            <StdNormalCurve\n              means={sampleMeans}\n              sampleSize={+sampleSize || 1}\n              distType={distType}\n              testType={testType}\n            />\n          )}\n          <Form.Check\n            inline\n            type=\"checkbox\"\n            label=\"Convert to Standard Normal\"\n            onClick={() => setStandardized(!standardized)}\n          />\n        </Col>\n      </Row>\n      <ManySamplesInput populationSize={population.length} addSamples={addSamples}/>\n      {(sampleMeans.length > 0) && (\n        <Alert variant=\"info\">\n          Out of {sampleMeans.length} samples, we rejected the null hypothesis {sampleMeans.filter(({ reject }) => reject).length} times ({_.round(100 * sampleMeans.filter(({ reject }) => reject).length / sampleMeans.length, 2)}%).\n        </Alert>\n      )}\n    </Container>\n  )\n}\n\nSimulateTypeOneError.propTypes = {\n  popShape: popShapeType.isRequired,\n  mu0: PropTypes.number.isRequired,\n  alpha: PropTypes.number.isRequired,\n  distType: distributionType.isRequired,\n  sides: PropTypes.oneOf([1, 2]).isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  testType: testTypeType.isRequired,\n  sd1: PropTypes.number.isRequired,\n  sd2: PropTypes.number\n}\n","import { useEffect, useState } from 'react';\nimport { random } from 'mathjs';\nimport { Button, Container, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport PopulationChartReveal from './PopulationChartReveal.js';\nimport _ from 'lodash';\nimport ResultsDisplay from './ResultsDisplay.js';\nimport SampleSizeAlphaInputs from './SampleSizeAlphaInput.js';\nimport SimulateTypeOneError from './SimulateTypeOneError.js';\nimport { hypothesisEqualityType, popShapeType, testTypeType } from '../../lib/types.js';\nimport {\n  calculateOneSampleTestStatistic,\n  calculatePValue,\n  calculateTwoSampleTestStatistic,\n  dataFromDistribution,\n  populationMean,\n  populationStandardDev\n} from '../../lib/stats-utils.js';\n\nexport default function PerformTest({ distType, shape, sides, mu0, equality, testType }) {\n  const [popArr, setPopArr] = useState([]);\n  const [sample, setSample] = useState([]);\n  const [sampleSize, setSampleSize] = useState(0);\n  const [alpha, setAlpha] = useState(0);\n  const [stage, setStage] = useState(0);\n  const [originalPop, setOriginalPop] = useState([]);\n  const [originalPopSample, setOriginalPopSample] = useState([]);\n  const [originalPopSampleSize, setOriginalPopSampleSize] = useState(0);\n\n  useEffect(() => {\n    if (stage === 3) {\n      setStage(2)\n    }\n  }, [mu0, equality]);  // eslint-disable-line\n\n  useEffect(() => {\n    const popMean1 = random(61, 66);\n    const sd1 = random(1, 4);\n    setPopArr(dataFromDistribution(\n      shape,\n      2000,\n      {\n        mean: popMean1,\n        standardDev: sd1,\n        low: popMean1 - 10,\n        hi: popMean1 + 10,\n        mysteryMean1: popMean1 - 6,\n        mysteryMean2: popMean1 + 6,\n        mysterySD1: sd1 - 1,\n        mysterySD2: sd1 + 1\n      }\n    ));\n    if (testType === 'twoSample') {\n      setOriginalPop(dataFromDistribution(shape, 2000, { low: 54, hi: 74 }));\n    } else {\n      setOriginalPop([]);\n    }\n  }, [shape, testType]);\n\n  const takeSample = () => {\n    setSample(_.sampleSize(popArr, sampleSize));\n    if (stage === 0) {\n      setStage(1);\n    }\n    if (testType === 'twoSample') {\n      setOriginalPopSample(_.sampleSize(originalPop, originalPopSampleSize))\n    }\n  }\n\n  const sampleMean = populationMean(sample);\n  const sampleSD = populationStandardDev(sample);\n  const populationSD = populationStandardDev(popArr);\n\n  // for two-sample\n  const originalSampleMean = populationMean(originalPopSample);\n  const originalSampleSD = populationStandardDev(originalPopSample);\n  const originalPopSD = populationStandardDev(originalPop);\n\n  const oneSampleSD = (distType === 'Z') ? populationSD : sampleSD;\n  const twoSampleSD1 = (distType === 'Z') ? originalPopSD : originalSampleSD;\n  const twoSampleSD2 = (distType === 'Z') ? originalPopSD : sampleSD;\n\n  const testStatistic = (testType === 'oneSample')\n    ? calculateOneSampleTestStatistic(distType, sampleMean, mu0, oneSampleSD, sampleSize)\n    : calculateTwoSampleTestStatistic(\n        originalSampleMean,\n        sampleMean,\n        twoSampleSD1,\n        twoSampleSD2,\n        originalPopSampleSize,\n        sampleSize\n      );\n\n  const pValue = calculatePValue(distType, testStatistic, equality, sampleSize, sides);\n\n  return (\n    <Container fluid>\n      <p>Let’s test your assertion by taking a sample and setting our tolerance for making a type-one error α!</p>\n      <SampleSizeAlphaInputs\n        sampleSize={sampleSize}\n        setSampleSize={setSampleSize}\n        alpha={alpha}\n        setAlpha={setAlpha}\n        popSize={popArr.length}\n        sampleSize2={originalPopSampleSize}\n        setSampleSize2={setOriginalPopSampleSize}\n        showSecondInput={testType === 'twoSample'}\n      />\n      <br/>\n      <Button\n        variant=\"outline-primary\"\n        active={stage >= 1}\n        disabled={\n          (sampleSize <= 0) ||\n          (sampleSize > popArr.length) ||\n          ((testType === 'twoSample') && ((originalPopSampleSize <= 0) || (originalPopSampleSize > originalPop.length)))\n        }\n        onClick={() => takeSample()}\n      >\n        Sample\n      </Button>\n      <br/>\n      <br/>\n      {(stage >= 1) && (\n        <Container>\n          <ResultsDisplay\n            testType={testType}\n            mean={(testType === 'twoSample') ? originalSampleMean : sampleMean}\n            mean2={sampleMean}\n            standardDev={(testType === 'twoSample') ? originalSampleSD : sampleSD}\n            standardDev2={sampleSD}\n            testStatistic={testStatistic}\n            pValue={pValue}\n            alpha={+alpha}\n            equality={equality}\n          />\n          <br/>\n          <Row>\n            <p>\n              Press here to reveal the true population distribution and mean.&nbsp;\n              <Button active={stage >= 2} variant=\"outline-primary\" onClick={() => setStage(2)}>Reveal</Button>\n            </p>\n          </Row>\n        </Container>\n      )}\n      <br/>\n      {(stage >= 2) && (\n        <div>\n          <PopulationChartReveal\n            popArr={(testType === 'twoSample') ? originalPop : popArr}\n            popArr2={(testType === 'twoSample') ? popArr : []}\n            mu0={+mu0}\n            equality={equality}\n            reject={pValue < alpha}\n            testType={testType}\n          />\n          <Button variant=\"outline-primary\" active={stage >= 3} onClick={() => setStage(3)}>Simulate Type I Error</Button>\n        </div>\n      )}\n      {(stage >= 3) && (\n        <SimulateTypeOneError\n          popShape={shape}\n          mu0={(testType === 'twoSample') ? populationMean(popArr) : +mu0}\n          alpha={+alpha}\n          distType={distType}\n          sides={sides}\n          equality={equality}\n          testType={testType}\n          sd1={(testType === 'twoSample') ? originalPopSD : populationSD}\n          sd2={populationSD}\n        />\n      )}\n    </Container>\n  )\n}\n\nPerformTest.propTypes = {\n  distType: PropTypes.string.isRequired,\n  shape: popShapeType.isRequired,\n  sides: PropTypes.oneOf([1, 2]).isRequired,\n  mu0: PropTypes.number.isRequired,\n  equality: hypothesisEqualityType.isRequired,\n  testType: testTypeType.isRequired\n}\n","import SelectorButtonGroup from '../SelectorButtonGroup';\nimport { Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { distributionType } from '../../lib/types.js';\n\nexport default function TestInputs({ setDistType, distType, testType, setTestType, popShape, setPopType }) {\n  return (\n    <div style={{ padding: 20 }}>\n      <Row style={{ padding: 10 }}>\n        <div>\n          Do you want to assume that you know σ? If yes, choose Z. If no, choose T: {' '}\n          <SelectorButtonGroup options={['Z', 'T']} select={setDistType} selected={distType}/>\n        </div>\n      </Row>\n      <Row style={{ padding: 10 }}>\n        <div>\n          Choose a kind of hypothesis test: {' '}\n          <SelectorButtonGroup options={['oneSample', 'twoSample']} select={setTestType} selected={testType}/>\n        </div>\n      </Row>\n      <Row style={{ padding: 10 }}>\n        <div>\n          <div style={{ paddingBottom: 10 }}>Choose a population distribution shape:</div>\n          <SelectorButtonGroup options={['Normal', 'Uniform', 'Mystery', '??Unknown??']} select={setPopType} selected={popShape}/>\n        </div>\n      </Row>\n    </div>\n  )\n}\n\nTestInputs.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setTestType: PropTypes.func.isRequired,\n  popShape: PropTypes.string.isRequired,\n  setPopType: PropTypes.func.isRequired,\n  setDistType: PropTypes.func.isRequired,\n  distType: distributionType.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownButton, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport { HYPOTHESIS_OPTIONS } from '../../lib/constants';\nimport { stringOrNumberType } from '../../lib/types';\n\nexport default function HypothesisSelector({ testType, setHypothesis, mu0, setMu0 }) {\n  const [selected, setSelected] = useState(HYPOTHESIS_OPTIONS[testType][0].hypoText);\n\n  useEffect(() => {\n    setSelected(HYPOTHESIS_OPTIONS[testType][0].hypoText)\n    setHypothesis(HYPOTHESIS_OPTIONS[testType][0])\n  }, [testType, setHypothesis])\n\n  const selectOption = (option) => {\n    setHypothesis(option);\n    setSelected(option.hypoText)\n  }\n\n  const menuOptions = HYPOTHESIS_OPTIONS[testType].map((obj) =>\n    <Dropdown.Item onClick={() => selectOption(obj)} key={obj.hypoText}>{obj.hypoText}</Dropdown.Item>\n  );\n\n  return (\n    <InputGroup>\n      <DropdownButton variant=\"secondary\" title={selected}>\n        {menuOptions}\n      </DropdownButton>\n      {(testType === 'oneSample') && (\n        <>\n          <Form.Control\n            type=\"number\"\n            value={mu0}\n            step={1}\n            min={1}\n            max={1000}\n            onChange={(event) => setMu0(event.target.value)}\n          />\n          <InputGroup.Text>gallons of milk per day.</InputGroup.Text>\n        </>\n      )}\n    </InputGroup>\n  )\n}\n\nHypothesisSelector.propTypes = {\n  testType: PropTypes.string.isRequired,\n  setHypothesis: PropTypes.func.isRequired,\n  mu0: stringOrNumberType.isRequired,\n  setMu0: PropTypes.func.isRequired\n}\n","import { useEffect, useState } from 'react';\nimport PerformTest from './PerformTest.js';\nimport { Alert, Container, Row, Button } from 'react-bootstrap';\nimport TestInputs from './TestInputs.js';\nimport HypothesisSelector from './HypothesisSelector.js';\nimport _ from 'lodash';\n\nexport default function HTSimulation() {\n  const [popShape, setPopShape] = useState('');\n  const [testType, setTestType] = useState('');\n  const [hypothesis, setHypothesis] = useState();\n  const [mu0, setMu0] = useState(64);\n  const [stage, setStage] = useState(1);\n  const [distType, setDistType] = useState('Z'); // can be \"Z\" or \"T\"\n\n  useEffect(() => {\n    if ((popShape !== '') && (testType !== '')) {\n      setStage(2)\n    }\n  }, [popShape, testType, distType]);\n\n  return (\n    <div className=\"module-container\">\n      <TestInputs\n        testType={testType}\n        setDistType={setDistType}\n        distType={distType}\n        setTestType={setTestType}\n        popShape={popShape}\n        setPopType={setPopShape}\n      />\n      {(stage >= 2) && (\n        <Container fluid>\n          <Row>\n            <Alert variant=\"secondary\">\n              <p>The true population distribution will be revealed at the end.</p>\n              {(testType === 'oneSample') ? (\n                <p>\n                  Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Choose an Option and specify a hypothesized amount. To help make an informed guess, note that the distribution of milk production before we changed the feed had a mean of about 64 gallons\n                </p>\n              ) : (\n                <p>\n                  Suppose that our farmer has changed the variety of feed the cows eat. It might be reasonable to think that the cows now produce more or less milk than they had before. As a researcher, what assertion would you like to make about these cows’ milk production now? Let Population 1 denote the cows before the feed change and Population 2 denote the cows after the change. Choose an Option below.\n                </p>\n              )}\n            </Alert>\n          </Row>\n          <br/>\n          <Row style={{ width: '95%', margin: 'auto' }}>\n            <HypothesisSelector testType={testType} setHypothesis={setHypothesis} mu0={mu0} setMu0={setMu0}/>\n          </Row>\n          <br/>\n          <Button\n            variant=\"outline-primary\"\n            onClick={() => setStage(3)}\n            active={stage >= 3}\n          >\n            Continue\n          </Button>\n          <br/>\n          <br/>\n          {(stage >= 3) && (\n            <Container>\n              <Row>\n                <Alert variant=\"secondary\" >\n                  <p>This means our null and alternative hypotheses are given by:</p>\n                  <p>{hypothesis.nullH} {(testType === 'oneSample') && mu0}</p>\n                  <p>{hypothesis.alterH} {(testType === 'oneSample') && mu0}</p>\n                </Alert>\n              </Row>\n              <br/>\n              <Row>\n                <PerformTest\n                  distType={distType}\n                  shape={(popShape === '??Unknown??') ? _.sample(['Normal', 'Uniform', 'Mystery']) : popShape}\n                  sides={hypothesis.sides}\n                  mu0={+mu0}\n                  equality={hypothesis.type}\n                  testType={testType}\n                />\n              </Row>\n            </Container>\n          )}\n        </Container>\n      )}\n    </div>\n  )\n}\n","import { Alert } from 'react-bootstrap';\nimport HTSimulation from './HTSimulation.js';\n\nexport default function HypothesisTesting() {\n  return (\n    <div className=\"module-container\">\n      <Alert className=\"sim-description\" variant=\"primary\">\n        Hypothesis Testing\n      </Alert>\n      <Alert className=\"sim-description\" variant=\"primary\">\n        When we conduct a test of hypotheses, we use the information provided by a sample to make a conclusion about population parameters that we cannot directly observe. We are able to make a connection between the sample and the population by using the rules that govern probability distributions. Due to the central limit theorem, we can make a variety of assertions about the probable location of points in a distribution, which allows us to make assertions about where population parameters might be located relative to the data we have collected from a sample. This allows us to test hypotheses.\n      </Alert>\n      <br/>\n      <HTSimulation/>\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport PropTypes from 'prop-types';\nimport { highchartsSeriesType, stringOrNumberType } from '../lib/types';\n\nexport default function ScatterPlot({\n  series,\n  title,\n  xMin,\n  xMax,\n  yMin,\n  yMax,\n  xLabel,\n  yLabel,\n  animation,\n  zoom,\n  height,\n  xCategories,\n  yTickInterval\n}) {\n  const [chart, setChart] = useState({});\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        animation: !!animation,\n        height,\n        zoomType: zoom ? 'xy' : ''\n      },\n      legend: {\n        symbolHeight: 12,\n        symbolWidth: 12,\n        symbolRadius: 6\n      },\n      xAxis: {\n        min: xMin,\n        max: xMax,\n        title: {\n          enabled: true,\n          text: xLabel\n        },\n        startOnTick: true,\n        endOnTick: true,\n        categories: xCategories\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        min: yMin,\n        max: yMax,\n        startOnTick: true,\n        endOnTick: true,\n        title: {\n          text: yLabel\n        },\n        tickInterval: yTickInterval\n      },\n      series: series.map((seriesObject) => (\n        {\n          showInLegend: seriesObject.data.length > 0,\n          turboThreshold: 0,\n          ...seriesObject,\n          data: seriesObject.data.map(({ x, y }) => ({ x, y })), // don\"t want any other attributes\n        })\n      )\n    }\n    setChart(newChart);\n  }, [series, title, xMin, xMax, yMin, yMax, xLabel, yLabel, animation, zoom, height, xCategories, yTickInterval]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nScatterPlot.propTypes = {\n  series: highchartsSeriesType.isRequired,\n  title: PropTypes.string,\n  xMin: PropTypes.number,\n  xMax: PropTypes.number,\n  yMin: PropTypes.number,\n  yMax: PropTypes.number,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n  animation: PropTypes.bool,\n  zoom: PropTypes.bool,\n  height: stringOrNumberType,\n  xCategories: PropTypes.arrayOf(PropTypes.string),\n  yTickInterval: PropTypes.number,\n}\n","import { Table } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { olsSampleType } from '../../lib/types';\n\nexport default function SamplesTable({ samples, setSelected, selected }) {\n  const samplesTable = samples.map((sampleObject) => (\n    <tr\n      style={{ backgroundColor: (selected && (sampleObject.id === selected.id)) ? '#747EF2' : undefined, cursor: 'pointer' }}\n      key={sampleObject.id}\n      onClick={() => setSelected(sampleObject)}\n    >\n      <td>{sampleObject.id}</td>\n      <td>{sampleObject.size}</td>\n      <td>{sampleObject.slope}</td>\n      <td>{sampleObject.intercept}</td>\n    </tr>\n  ));\n\n  samplesTable.reverse();\n\n  return (\n    <div style={{ height: 250, overflow: 'auto', margin: 'auto' }}>\n      <Table hover striped className=\"ci-table\">\n        <thead>\n          <tr>\n            <th>Sample</th>\n            <th>Size</th>\n            <th>Slope</th>\n            <th>Intercept</th>\n          </tr>\n        </thead>\n        <tbody>\n          {samplesTable}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nSamplesTable.propTypes = {\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  setSelected: PropTypes.func.isRequired,\n  selected: olsSampleType\n}\n","import { Container, Row, Col, Alert } from 'react-bootstrap';\nimport ScatterPlot from '../ScatterPlot.js';\nimport SampleSizeInput from '../SampleSizeInput.js';\nimport _ from 'lodash';\nimport { dataObjectArrayType, olsSampleType } from '../../lib/types.js';\nimport PropTypes from 'prop-types';\nimport SamplesTable from './SamplesTable.js';\nimport 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';\nimport { OLSE_VALUES } from '../../lib/constants.js';\nimport regression from 'regression';\n\nexport default function PopulationAndSampleCharts({ data, addSamples, selected, samples, selectSample, populationShape }) {\n  const sample = selected || { data: [] };\n\n  const tooltipFormat = (populationShape === 'Binary') ? {\n    headerFormat: '',\n    pointFormat: '<div><strong>{point.category}</strong><br/><strong>${point.y}</strong><br/></div>'\n  } : undefined;\n\n  const mainSeries = [{ name: 'data', data, tooltip: tooltipFormat }, { name: 'sample', data: sample.data, tooltip: tooltipFormat }];\n\n  if (populationShape === 'Binary') {\n    const { equation: [slope, intercept] } = regression.linear(data.map(({ x, y }) => [x, y]), { precision: 1 });\n    mainSeries.push({\n      name: 'best fit line',\n      type: 'line',\n      data: data.map((point) => ({ x: point.x, y: _.round((point.x * slope) + intercept, 2) })),\n      label: false,\n      marker: false,\n      showInLegend: false,\n      color: 'black',\n      enableMouseTracking: false,\n    });\n  }\n\n  const sampleSeries = [\n    {\n      name: 'best fit line',\n      type: 'line',\n      data: [{ x: 0 }, { x: OLSE_VALUES[populationShape].xMax }, ...sample.data].map((point) => (\n        { x: point.x, y: _.round((point.x * sample.slope) + sample.intercept, 2) }\n      )),\n      label: false,\n      marker: false,\n      showInLegend: sample.data.length > 0,\n      enableMouseTracking: false,\n      color: 'black',\n    },\n    {\n      name: 'sample',\n      data: sample.data,\n      color: 'orange',\n      marker: {\n        lineWidth: 1,\n        lineColor: 'orange'\n      },\n      tooltip: tooltipFormat\n    },\n    ...samples.filter((sample) => sample !== selected).map(({ data, slope, intercept, id }) => ({\n      name: `Sample ${id}`,\n      type: 'line',\n      data: [{ x: 0 }, { x: OLSE_VALUES[populationShape].xMax }, ...data].map((point) => (\n        { x: point.x, y: (point.x * slope) + intercept }\n      )),\n      color: '#dddddd',\n      animation: false,\n      label: false,\n      marker: false,\n      showInLegend: false,\n      enableMouseTracking: false,\n      zIndex: -5,\n      states: {\n        hover: {\n          enabled: false\n        },\n        inactive: {\n          enabled: false\n        }\n      }\n    }))\n  ];\n\n  return (\n    <Container>\n      <Row>\n        <Col lg={{ span: 12, offset: 0 }} xl={{ span: 8, offset: 2 }}>\n          <ScatterPlot\n            series={mainSeries}\n            title=\"Population\"\n            xMin={OLSE_VALUES[populationShape].xMin}\n            xMax={OLSE_VALUES[populationShape].xMax}\n            yMin={OLSE_VALUES[populationShape].yMin}\n            yMax={OLSE_VALUES[populationShape].yMax}\n            xLabel={OLSE_VALUES[populationShape].xLabel}\n            yLabel={OLSE_VALUES[populationShape].yLabel}\n            zoom\n            height=\"75%\"\n            xCategories={OLSE_VALUES[populationShape].xCategories}\n            yTickInterval={OLSE_VALUES[populationShape].yTickInterval}\n          />\n        </Col>\n      </Row>\n      <br/>\n      <Row md={1} lg={2}>\n        <Col>\n          <Alert variant=\"primary\">\n            <p>Try drawing some samples and observe the line of best fit on the graph</p>\n            <SampleSizeInput maxSize={data.length} minSize={2} handleClick={addSamples}/>\n          </Alert>\n          <SamplesTable samples={samples} setSelected={selectSample} selected={selected}/>\n        </Col>\n        <Col>\n          {(populationShape === 'Continuous') && (\n            <div style={{ marginLeft: '20%' }}>\n              <BlockMath math=\"\\widehat{Test\\ Score}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1{Study\\ Hours_i}\"/>\n              {selected && (\n                <BlockMath math={`\\\\widehat{Test\\\\ Score}_i = ${selected.intercept} + ${selected.slope}{Study\\\\ Hours_i}`}/>\n              )}\n            </div>\n          )}\n          <ScatterPlot\n            series={sampleSeries}\n            title={OLSE_VALUES[populationShape].title}\n            xMin={OLSE_VALUES[populationShape].xMin}\n            xMax={OLSE_VALUES[populationShape].xMax}\n            yMin={OLSE_VALUES[populationShape].yMin}\n            yMax={OLSE_VALUES[populationShape].yMax}\n            xLabel={OLSE_VALUES[populationShape].xLabel}\n            yLabel={OLSE_VALUES[populationShape].yLabel}\n            xCategories={OLSE_VALUES[populationShape].xCategories}\n            yTickInterval={OLSE_VALUES[populationShape].yTickInterval}\n          />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nPopulationAndSampleCharts.propTypes = {\n  data: dataObjectArrayType.isRequired,\n  addSamples: PropTypes.func.isRequired,\n  selected: olsSampleType,\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  selectSample: PropTypes.func.isRequired,\n  populationShape: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport { dataFromDistribution } from '../../lib/stats-utils';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types';\nrequire('highcharts/modules/histogram-bellcurve')(Highcharts);\n\nexport default function StandardNormalOLS({ seriesName, data }) {\n  const [chart, setChart] = useState({});\n  const [population] = useState(dataFromDistribution('Normal', 2000, { mean: 0, standardDev: 1 }));\n\n  useEffect(() => {\n    const newChart = {\n      chart: {\n        type: 'scatter',\n        animation: false,\n      },\n      title: {\n        text: `Distribution of Sample ${seriesName}`\n      },\n      xAxis: {\n        title: {\n          text: 'Standard Deviations',\n        },\n        startOnTick: true,\n        endOnTick: true\n      },\n      yAxis: {\n        startOnTick: true,\n        endOnTick: true,\n        title: false\n      },\n      series: [\n        {\n          name: 'Normal Distribution',\n          type: 'bellcurve',\n          baseSeries: 1,\n          zIndex: -1,\n          enableMouseTracking: false,\n          label: false,\n          showInLegend: false\n        },\n        {\n          name: 'Data',\n          type: 'scatter',\n          data: population.map(({ x }) => x),\n          visible: false,\n          showInLegend: false\n        },\n        {\n          name: seriesName,\n          data: data.map(({x, y}) => ({ x, y: y * 0.05 })),\n          showInLegend: false,\n          color: 'red',\n          marker: {\n            symbol: 'circle'\n          },\n          tooltip: {\n            pointFormat: `${seriesName}: <b>{point.x}</b><br/>`\n          },\n        }\n      ]\n    }\n    setChart(newChart);\n\n  }, [seriesName, data, population]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chart}/>\n}\n\nStandardNormalOLS.propTypes = {\n  seriesName: PropTypes.string.isRequired,\n  data: dataObjectArrayType.isRequired\n}\n","import DotPlot from '../DotPlot.js';\nimport { max, min } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { olsSampleType } from '../../lib/types.js';\nimport { convertToStandardNormal, getCounts, populationMean, populationStandardDev } from '../../lib/stats-utils.js';\nimport { Form } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { OLSE_VALUES } from '../../lib/constants.js';\nimport _ from 'lodash';\nimport StandardNormalOLS from './StandardNormalOLS.js';\n\nexport default function SlopeDistributionPlot({ samples, populationShape }) {\n  const [standardized, setStandardized] = useState(false);\n\n  const slopeMean = populationMean(samples, 'slope');\n  const slopeSD = populationStandardDev(samples, 'slope')\n  const standardizedData = standardized ? convertToStandardNormal(samples, slopeMean, slopeSD, 'slope') : samples;\n  const plotData = getCounts(standardizedData.map(({ slope }) => _.round(slope, 2)));\n\n  return (\n    <div>\n      {standardized ? (\n        <StandardNormalOLS seriesName=\"Slopes\" data={plotData}/>\n      ) : (\n        <DotPlot\n          series={[{ name: 'Slopes', data: plotData, showInLegend: false }]}\n          title=\"Distribution of Sample Slopes\"\n          xMin={min(OLSE_VALUES[populationShape].slopeMin, ...plotData.map(({ x }) => x))}\n          xMax={max(OLSE_VALUES[populationShape].slopeMax, ...plotData.map(({ x }) => x))}\n          yMax={max(4, ...plotData.map(({ y }) => y))}\n          xLabel=\"Slope\"\n        />\n      )}\n      <Form.Check\n        inline\n        type=\"checkbox\"\n        label=\"Convert to Standard Normal\"\n        onClick={() => setStandardized(!standardized)}\n      />\n    </div>\n  )\n}\n\nSlopeDistributionPlot.propTypes = {\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  populationShape: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import DotPlot from '../DotPlot.js';\nimport { max, min } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { olsSampleType } from '../../lib/types.js';\nimport { convertToStandardNormal, getCounts, populationMean, populationStandardDev } from '../../lib/stats-utils.js';\nimport { Form } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { OLSE_VALUES } from '../../lib/constants.js';\nimport _ from 'lodash';\nimport StandardNormalOLS from './StandardNormalOLS.js';\n\nexport default function InterceptDistributionPlot({ samples, populationShape }) {\n  const [standardized, setStandardized] = useState(false);\n\n  const interceptMean = populationMean(samples, 'intercept');\n  const interceptSD = populationStandardDev(samples, 'intercept')\n  const standardizedData = standardized ? convertToStandardNormal(samples, interceptMean, interceptSD, 'intercept') : samples;\n  const plotData = getCounts(standardizedData.map(({ intercept }) => _.round(intercept, 2)));\n\n  return (\n    <div>\n      {standardized ? (\n        <StandardNormalOLS seriesName=\"Intercepts\" data={plotData}/>\n      ) : (\n        <DotPlot\n          series={[{ name: 'Intercepts', data: plotData, showInLegend: false }]}\n          title=\"Distribution of Sample Intercepts\"\n          xMin={min(OLSE_VALUES[populationShape].interceptMin, ...plotData.map(({ x }) => x))}\n          xMax={max(OLSE_VALUES[populationShape].interceptMax, ...plotData.map(({ x }) => x))}\n          yMax={max(4, ...plotData.map(({ y }) => y))}\n          xLabel=\"Intercept\"\n        />\n      )}\n      <Form.Check\n        inline\n        type=\"checkbox\"\n        label=\"Convert to Standard Normal\"\n        onClick={() => setStandardized(!standardized)}\n      />\n    </div>\n  )\n}\n\nInterceptDistributionPlot.propTypes = {\n  samples: PropTypes.arrayOf(olsSampleType).isRequired,\n  populationShape: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import { useState } from 'react';\nimport { Button, Form, Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function MultipleSamplesInput({ populationSize, addSamples }) {\n  const [numberResamples, setNumberResamples] = useState(0);\n  const [resampleSize, setResampleSize] = useState(0);\n\n  return (\n    <div>\n      <Alert variant=\"primary\">\n        <p>Simulate drawing many many samples</p>\n        <span>Sample Size:</span>\n        <Form.Control\n          type=\"number\"\n          style={{ width: '50%', margin: 'auto' }}\n          placeholder=\"Sample Size:\"\n          min={1}\n          value={resampleSize}\n          onChange={(event) => setResampleSize(event.target.value)}\n        />\n        <br/>\n        <span>Number of Replications:</span>\n        <Form.Control\n          style={{ width: '50%', margin: 'auto' }}\n          min={1}\n          type=\"number\"\n          placeholder=\"Replications:\"\n          onChange={(event) => setNumberResamples(event.target.value)}\n          value={numberResamples}\n        />\n        <br/>\n        <Button\n          variant=\"secondary\"\n          onClick={() => addSamples(resampleSize, numberResamples, true)}\n          disabled={(resampleSize < 1) || (resampleSize > populationSize) || (numberResamples < 1)}\n        >\n          Run\n        </Button>\n        <Button\n          variant=\"secondary\"\n          onClick={() => addSamples(0, 0, true)}\n        >\n          Clear\n        </Button>\n      </Alert>\n    </div>\n  );\n}\n\nMultipleSamplesInput.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  addSamples: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport Collapsable from '../Collapsable.js';\nimport _ from 'lodash';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport PopulationAndSampleCharts from './PopulationAndSampleCharts.js';\nimport regression from 'regression';\nimport SlopeDistributionPlot from './SlopeDistributionPlot.js';\nimport InterceptDistributionPlot from './InterceptDistributionPlot.js';\nimport MultipleSamplesInput from './MultipleSamplesInput.js';\nimport PropTypes from 'prop-types';\nimport { generateBinary, generateScatter } from '../../lib/stats-utils.js';\n\nexport default function SDOLSESimulation({ populationShape }) {\n  const [data, setData] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    if (populationShape === 'Continuous') {\n      setData(generateScatter(1000, 7, 2, 2.5, 6, -0.5))\n    } else if (populationShape === 'Binary') {\n      setData(generateBinary(1000, 195, 211, 30, 30))\n    }\n    setSamples([]);\n    setSelected();\n  }, [populationShape]);\n\n  const addSamples = (size, replications, clear) => {\n    const newSamples = [];\n    for (let i = 0; i < replications; i++) {\n      const sample = _.sampleSize(data, size);\n      if ((populationShape === 'Binary') && (_.uniq(sample.map(({ x }) => x)).length === 1)) {\n        i -= 1;\n        continue;\n      }\n      const { equation } = regression.linear(sample.map(({ x, y }) => [x, y]), { precision: 1 });\n      const sampleObject = {\n        data: sample,\n        size,\n        slope: equation[0],\n        intercept: equation[1],\n      }\n      newSamples.push(sampleObject);\n    }\n    const indexedSamples = (clear ? newSamples : [...samples, ...newSamples]).map((obj, index) => ({ ...obj, id: index }));\n    setSelected(indexedSamples[indexedSamples.length - 1]);\n    setSamples(indexedSamples);\n  }\n\n  return (\n    <Collapsable>\n      <Container>\n        <PopulationAndSampleCharts\n          data={data}\n          addSamples={addSamples}\n          selected={selected}\n          samples={samples}\n          selectSample={setSelected}\n          populationShape={populationShape}\n        />\n        <br/>\n        <Row>\n          <Col xs={{ span: 8, offset: 2 }}>\n            <MultipleSamplesInput populationSize={data.length} addSamples={addSamples}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <SlopeDistributionPlot samples={samples} populationShape={populationShape}/>\n          </Col>\n          <Col>\n            <InterceptDistributionPlot samples={samples} populationShape={populationShape}/>\n          </Col>\n        </Row>\n      </Container>\n    </Collapsable>\n  );\n}\n\nSDOLSESimulation.propTypes = {\n  populationShape: PropTypes.oneOf(['Continuous', 'Binary']).isRequired\n}\n","import { Alert } from 'react-bootstrap';\nimport SDOLSESimulation from './SDOLSESimulation.js';\nimport SelectorButtonGroup from '../SelectorButtonGroup.js';\nimport { useState } from 'react';\n\nexport default function SampleDistributionOLSEstimators() {\n  const [populationShape, setPopulationShape] = useState('');\n\n  return (\n    <div className=\"module-container\">\n      <Alert style={{ width: '50%', margin: 'auto' }} variant=\"primary\">\n        Sample Distribution of OLS Estimators\n      </Alert>\n      <br/>\n      <p>Select a population shape:</p>\n      <SelectorButtonGroup options={['Continuous', 'Binary']} select={setPopulationShape} selected={populationShape}/>\n      <br/>\n      <br/>\n      {populationShape && <SDOLSESimulation populationShape={populationShape}/>}\n    </div>\n  );\n}\n","/*\n\n  Displays a slider for the user to choose a number of random points and a button to generate them\n\n*/\nimport { useState } from 'react';\nimport { Button, Form, InputGroup, } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function NewPointsInput({ generatePoints }) {\n  const [numPoints, setNumPoints] = useState(5);\n\n  return (\n    <InputGroup className=\"input-slider-group\">\n      <Form.Control\n        type=\"range\"\n        custom\n        className=\"custom-range\"\n        data-testid=\"new-points-slider\"\n        style={{ width: '50%' }}\n        min={4}\n        max={10}\n        value={numPoints}\n        onChange={(event) => setNumPoints(event.target.value)}\n      />\n      <InputGroup.Text>{numPoints}</InputGroup.Text>\n      <Button variant=\"outline-primary\" onClick={() => generatePoints(numPoints)}>New Points</Button>\n    </InputGroup>\n  );\n}\n\nNewPointsInput.propTypes = {\n  generatePoints: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays a HighCharts scatterplot for the Least Squares data points\n\n*/\nimport { useEffect, useState } from 'react';\nimport '../../styles/dark-unica.css';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport Annotations from 'highcharts/modules/annotations';\nimport { abs } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport { dataObjectArrayType } from '../../lib/types.js'\n\nAnnotations(Highcharts);\n\nexport default function LeastSquaresChart({ points, linePoints, setSquareAreas }) {\n  const [myChart, setMyChart] = useState({\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: false\n    },\n    chart: {\n      type: 'line',\n      plotBorderColor: '#000000',\n      plotBorderWidth: 1,\n      margin: [100, 100, 100, 100],\n      width: 600,\n      height: 600\n    },\n    tooltip: {\n      headerFormat: '',\n      pointFormat: 'x: {point.x:.2f}<br/>y: {point.y:.2f}',\n      hideDelay: 100\n    },\n    xAxis: {\n      title: {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    },\n    yAxis: {\n      title: {\n        enabled: false\n      },\n      min: 0,\n      max: 20,\n      tickInterval: 2\n    }\n  });\n\n  // returns an array of points to create a square shape in highcharts\n  const buildSquare = (p1, p2) => {\n    const dist = abs(p1.y - p2.y);\n    const lowestPt = p1.y < p2.y ? p1 : p2;\n    return [{\n      x: lowestPt.x,\n      y: lowestPt.y,\n      xAxis: 0,\n      yAxis: 0\n    }, {\n      x: lowestPt.x + dist,\n      y: lowestPt.y,\n      xAxis: 0,\n      yAxis: 0\n    }, {\n      x: lowestPt.x + dist,\n      y: lowestPt.y + dist,\n      xAxis: 0,\n      yAxis: 0\n    }, {\n      x: lowestPt.x,\n      y: lowestPt.y + dist,\n      xAxis: 0,\n      yAxis: 0\n    }, {\n      x: lowestPt.x,\n      y: lowestPt.y,\n      xAxis: 0,\n      yAxis: 0\n    }\n    ];\n  }\n\n  useEffect(() => {\n    // generate pairs for the corresponding points to create squares\n    const pairs = [];\n    linePoints.forEach((p1) => {\n      points.forEach((p2) => {\n        if (p1.x === p2.x) {\n          pairs.push({ p1, p2 })\n        }\n      });\n    });\n\n    const areas = pairs.map(({ p1, p2 }) => abs(p1.y - p2.y) ** 2);\n    setSquareAreas(areas);\n\n    // create the actual square objects for highcharts\n    const squares = pairs.map(({ p1, p2 }) => (\n      {\n        dashStyle: 'solid',\n        fill: 'rgba(255, 255, 255, 0)',\n        points: buildSquare(p1, p2),\n        type: 'path'\n      })\n    );\n\n    const newChart = {\n      series: [\n        {\n          type: 'scatter',\n          marker: {\n            radius: 5,\n          },\n          data: points,\n        },\n        {\n          type: 'line',\n          data: linePoints,\n          marker: {\n            enabled: true,\n            fillColor: 'orange'\n          },\n          label: {\n            enabled: false\n          }\n        }\n      ],\n      annotations: [{\n        draggable: '',\n        shapes: squares\n      }]\n    }\n\n    setMyChart(newChart);\n  }, [points, linePoints, setSquareAreas]);\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={myChart}/>\n  );\n}\n\nLeastSquaresChart.propTypes = {\n  points: dataObjectArrayType.isRequired,\n  linePoints: dataObjectArrayType.isRequired,\n  setSquareAreas: PropTypes.func.isRequired\n}\n","/*\n\n  Displays a button for the user to plot their guess or a button to generate the correct best fit line\n\n*/\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default function PlotLine({ stage, setStage, squareAreas, generateBestLine }) {\n  return (\n    (stage === 2) ? (\n      <Button variant=\"outline-primary\" onClick={() => setStage(3)}>Plot Your Guess</Button>\n    ) : (\n      <div>\n        <p>Sum Squares: {squareAreas.reduce((a, b) => a + b, 0).toFixed(2)}</p>\n        <Button variant=\"outline-info\" onClick={() => generateBestLine()}>Reveal the Least Squares Line</Button>\n      </div>\n    )\n  );\n}\n\nPlotLine.propTypes = {\n  stage: PropTypes.number.isRequired,\n  setStage: PropTypes.func.isRequired,\n  squareAreas: PropTypes.arrayOf(PropTypes.number).isRequired,\n  generateBestLine: PropTypes.func.isRequired,\n}\n","/*\n\n  Displays the Least Squares simulation\n\n*/\nimport { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport NewPointsInput from './NewPointsInput';\nimport LeastSquaresChart from './LeastSquaresChart.js';\nimport PlotLine from './PlotLine.js';\nimport regression from 'regression';\nimport InputSlider from '../InputSlider.js';\nimport { random } from 'mathjs';\n\nexport default function LeastSquaresSimulation() {\n  const [points, setPoints] = useState([]);\n  const [linePoints, setLinePoints] = useState([]);\n  const [stage, setStage] = useState(1);\n  const [squareAreas, setSquareAreas] = useState([]);\n  const [slope, setSlope] = useState(1);\n  const [intercept, setIntercept] = useState(1);\n\n  useEffect(() => {\n    if (stage === 2) {\n      setLinePoints([]);\n      setSquareAreas([]);\n      setSlope(1);\n      setIntercept(1);\n    }\n  }, [stage]);\n\n  useEffect(() => {\n    if (stage === 3) {\n      setSquareAreas([]);\n      const linearPts = [{ x: 0, y: 0 }, ...points].map((point) => ({ x: point.x, y: (point.x * +slope) + +intercept }));\n      linearPts.sort((a, b) => a.x - b.x);\n      setLinePoints(linearPts);\n    }\n  }, [stage, slope, intercept, points]);\n\n  const generatePoints = (num) => {\n    const newPoints = [];\n    for (let i = 0; i < num; i++) {\n      const x = random(2, 17);\n      const y = random(2, 17);\n      newPoints.push({ x: +x, y: +y });\n    }\n    setPoints(newPoints);\n    setStage(2);\n  }\n\n  const generateBestLine = () => {\n    const { equation } = regression.linear(points.map(({ x, y }) => [x, y]), { precision: 1 });\n    setSlope(equation[0]);\n    setIntercept(equation[1]);\n  }\n\n  return (\n    <Row className=\"least-squares-container\">\n      <Col xs=\"auto\">\n        <LeastSquaresChart points={points} linePoints={linePoints} setSquareAreas={setSquareAreas}/>\n      </Col>\n      <Col xs={{ span: 3, offset: 3 }} md={{ span: 3, offset: 0 }} style={{ paddingTop: '100px' }}>\n        <NewPointsInput generatePoints={generatePoints}/>\n        <br/>\n        {(stage === 2) && <p>Guess a Slope and Y-Intercept to fit the points</p>}\n        {(stage === 3) && <p>Want to try again? Guess a different slope and y-intercept to reduce the Sum of Squares!</p>}\n        {(stage >= 2) && (\n          <div>\n            <h4>Intercept</h4>\n            <InputSlider value={intercept} min={-20} max={20} step={0.1} onChange={(value) => setIntercept(value)}/>\n            <br/>\n            <h4>Slope</h4>\n            <InputSlider value={slope} min={-10} max={10} step={0.1} onChange={(value) => setSlope(value)}/>\n            <br/>\n            <PlotLine stage={stage} setStage={setStage} squareAreas={squareAreas} generateBestLine={generateBestLine}/>\n          </div>\n        )}\n      </Col>\n    </Row>\n  )\n}\n","/*\n\n  A container component that holds the description and simulation for Least Squares\n\n*/\nimport LeastSquaresSimulation from './LeastSquaresSimulation';\nimport { Alert } from 'react-bootstrap';\n\nexport default function LeastSquares() {\n  return (\n    <div className=\"module-container\">\n      <Alert style={{ width: '50%', margin: 'auto' }} variant=\"primary\">\n        Least Squares\n      </Alert>\n      <br/>\n      <LeastSquaresSimulation/>\n    </div>\n  );\n}\n","/*\n\n  A container component for the various simulations\n\n*/\nimport LawOfLargeNumbers from './LawOfLargeNumbers/LawOfLargeNumbers.js';\nimport CentralLimitTheorem from './CentralLimitTheorem/CentralLimitTheorem.js';\nimport JointDistributions from './JointDistributions/JointDistributions.js';\nimport OmittedVariableBias from './OmittedVariableBias/OmittedVariableBias.js';\nimport ConfidenceIntervals from './ConfidenceIntervals/ConfidenceIntervals.js';\nimport HypothesisTesting from './HypothesisTesting/HypothesisTesting.js';\nimport SampleDistributionOLSEstimators from './SampleDistributionOLSEstimators/SampleDistributionOLSEstimators.js';\nimport { Button } from 'react-bootstrap';\nimport LeastSquares from './LeastSquares/LeastSquares.js';\nimport PropTypes from 'prop-types';\n\nexport default function SimulationContainer({ mode, setMode }) {\n  return (\n    <div data-testid=\"sim-container\">\n      <Button className=\"home-button\" variant=\"outline-danger\" id=\"Menu\" onClick={() => setMode('Home')}>MENU</Button>\n      <div className=\"mini-logo\"/>\n      {mode === 'Law of Large Numbers' && <LawOfLargeNumbers/>}\n      {mode === 'Central Limit Theorem' && <CentralLimitTheorem/>}\n      {mode === 'Joint Distributions' && <JointDistributions/>}\n      {mode === 'Least Squares' && <LeastSquares/>}\n      {mode === 'Omitted Variable Bias' && <OmittedVariableBias/>}\n      {mode === 'Confidence Intervals' && <ConfidenceIntervals/>}\n      {mode === 'Hypothesis Testing' && <HypothesisTesting/>}\n      {mode === 'Sample Distribution of OLS Estimators' && <SampleDistributionOLSEstimators/>}\n    </div>\n  )\n}\n\nSimulationContainer.propTypes = {\n  setMode: PropTypes.func.isRequired,\n  mode: PropTypes.oneOf([\n    'Home',\n    'Law of Large Numbers',\n    'Central Limit Theorem',\n    'Joint Distributions',\n    'Least Squares',\n    'Omitted Variable Bias',\n    'Confidence Intervals',\n    'Hypothesis Testing',\n    'Sample Distribution of OLS Estimators'\n  ]).isRequired,\n}\n","/*\n\n  Displays the StartHere button and then the menu once the button is clicked\n\n*/\nimport { useEffect, useState } from 'react';\nimport SimBar from './SimBar.js';\nimport StartHere from './StartHere';\nimport { Fade } from 'react-bootstrap';\nimport SimulationContainer from './SimulationContainer.js';\n\nexport default function SimulationMenu() {\n  const [mode, setMode] = useState('Home');\n  const [start, setStart] = useState(true);\n  const [logo, setLogo] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLogo(false);\n    }, 3500);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    start ? (\n      <div>\n        <div className=\"intro-animation\"/>\n        {!logo && <StartHere start={start} showApp={() => setStart(false)}/>}\n      </div>\n    ) : (\n      <div>\n        {(mode === 'Home') ? (\n          <Fade in={(mode === 'Home')}>\n            <SimBar setSection={setMode}/>\n          </Fade>\n        ) : (\n          <SimulationContainer mode={mode} setMode={setMode}/>\n        )}\n      </div>\n    )\n  );\n}\n","import './styles/App.css';\nimport SimulationMenu from './components/SimulationMenu.js';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <SimulationMenu/>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl); //eslint-disable-line\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); //eslint-disable-line\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport { unregister } from './registerServiceWorker';\n\nunregister();\n\nReactDOM.render(<App />, document.getElementById(\"root\")); // eslint-disable-line\n// registerServiceWorker();\n"],"sourceRoot":""}